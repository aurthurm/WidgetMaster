Directory structure:
└── aurthurm-beakdash/
    ├── README.md
    ├── components.json
    ├── drizzle.config.ts
    ├── example-env.local
    ├── middleware.ts
    ├── next.config.ts
    ├── notes.txt
    ├── package.json
    ├── pnpm-lock.yaml
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── .eslintrc.json
    ├── app/
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── api/
    │   │   ├── connections/
    │   │   │   ├── route.ts
    │   │   │   ├── [id]/
    │   │   │   │   └── route.ts
    │   │   │   ├── schemas/
    │   │   │   │   └── route.ts
    │   │   │   └── test/
    │   │   │       └── route.ts
    │   │   ├── copilot/
    │   │   │   └── generator/
    │   │   │       └── route.ts
    │   │   ├── data-sources/
    │   │   │   └── route.ts
    │   │   ├── datasets/
    │   │   │   └── route.ts
    │   │   ├── keys/
    │   │   │   └── routeX.ts
    │   │   ├── pages/
    │   │   │   └── route.ts
    │   │   ├── webhooks/
    │   │   │   └── routeX.ts
    │   │   └── widgets/
    │   │       ├── route.ts
    │   │       └── [id]/
    │   │           └── route.ts
    │   ├── dashboard/
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── (navigation)/
    │   │   │   ├── AddPageModal.tsx
    │   │   │   ├── Header.tsx
    │   │   │   └── Sidebar.tsx
    │   │   ├── components/
    │   │   │   ├── DataExplorer.tsx
    │   │   │   ├── AICopilot/
    │   │   │   │   ├── AICopilotButton.tsx
    │   │   │   │   └── AICopilotChat.tsx
    │   │   │   └── widgets/
    │   │   │       ├── ChartWrapper.tsx
    │   │   │       ├── WidgetGrid.tsx
    │   │   │       ├── WidgetVisual.tsx
    │   │   │       ├── states/
    │   │   │       │   ├── WidgetError.tsx
    │   │   │       │   └── WidgetSkeleton.tsx
    │   │   │       └── widget-editor/
    │   │   │           ├── DatasetPanel.tsx
    │   │   │           ├── WidgetEditorModal.tsx
    │   │   │           └── config-panel/
    │   │   │               ├── AdvancedTab.tsx
    │   │   │               ├── ChartConfigPanel.tsx
    │   │   │               ├── ChartTypeTab.tsx
    │   │   │               ├── DataAxisMapping.tsx
    │   │   │               ├── DataDualMapping.tsx
    │   │   │               ├── DataPieMapping.tsx
    │   │   │               ├── DataScatterMapping.tsx
    │   │   │               ├── DataTab.tsx
    │   │   │               ├── FilterRow.tsx
    │   │   │               ├── FilteringTab.tsx
    │   │   │               ├── FormattingTab.tsx
    │   │   │               └── SeriesTab.tsx
    │   │   ├── connections/
    │   │   │   ├── page.tsx
    │   │   │   ├── components/
    │   │   │   │   ├── ConnectionDialog.tsx
    │   │   │   │   ├── ConnectionManager.tsx
    │   │   │   │   └── connection-forms/
    │   │   │   │       ├── CSVForm.tsx
    │   │   │   │       ├── RESTForm.tsx
    │   │   │   │       ├── SQLForm.tsx
    │   │   │   │       └── index.ts
    │   │   │   └── hooks/
    │   │   │       └── useConnection.ts
    │   │   ├── datasets/
    │   │   │   ├── page.tsx
    │   │   │   ├── components/
    │   │   │   │   ├── DatasetDialog.tsx
    │   │   │   │   ├── DatasetForm.tsx
    │   │   │   │   └── DatasetManager.tsx
    │   │   │   └── hooks/
    │   │   │       └── useDataset.ts
    │   │   ├── hooks/
    │   │   │   └── useWidget.ts
    │   │   └── settings/
    │   │       └── page.tsx
    │   ├── error/
    │   │   └── page.tsx
    │   ├── lib/
    │   │   ├── utils.ts
    │   │   ├── adapters/
    │   │   │   ├── csv.ts
    │   │   │   ├── javascript.ts
    │   │   │   ├── rest.ts
    │   │   │   ├── sql.ts
    │   │   │   └── websocket.ts
    │   │   ├── apiKey/
    │   │   │   └── apiKey.ts
    │   │   ├── charts/
    │   │   │   ├── aggregation.ts
    │   │   │   ├── chart-bar.ts
    │   │   │   ├── chart-column.ts
    │   │   │   ├── chart-dual-axes.ts
    │   │   │   ├── chart-line.ts
    │   │   │   ├── chart-pie.ts
    │   │   │   ├── chart-scatter.ts
    │   │   │   ├── common.ts
    │   │   │   ├── filter.ts
    │   │   │   ├── formatting.ts
    │   │   │   ├── options.ts
    │   │   │   ├── sorting.ts
    │   │   │   ├── transformer.ts
    │   │   │   └── utils.ts
    │   │   ├── drizzle/
    │   │   │   ├── index.ts
    │   │   │   └── schemas/
    │   │   │       └── index.ts
    │   │   ├── hooks/
    │   │   │   ├── useDataSet.ts
    │   │   │   └── useDebounce.ts
    │   │   ├── models/
    │   │   │   ├── apiKey.model.ts
    │   │   │   └── webhook.model.ts
    │   │   ├── webhook/
    │   │   │   └── webhook.ts
    │   │   └── workers/
    │   │       └── webhook.worker.ts
    │   ├── schemas/
    │   │   └── transformSchema.ts
    │   ├── settings/
    │   │   ├── apikeys/
    │   │   │   ├── notes.txt
    │   │   │   └── pageX.tsx
    │   │   └── webhooks/
    │   │       ├── WebhookForm.tsx
    │   │       └── pageX.tsx
    │   ├── sign-in/
    │   │   └── [[...sign-in]]/
    │   │       └── page.tsx
    │   ├── sign-up/
    │   │   └── [[...sign-up]]/
    │   │       └── page.tsx
    │   ├── store/
    │   │   ├── connections.ts
    │   │   ├── copilotStore.ts
    │   │   ├── datasets.ts
    │   │   ├── organizationStore.ts
    │   │   ├── pageStore.ts
    │   │   └── widgetStore.ts
    │   ├── types/
    │   │   ├── adapter.ts
    │   │   ├── apiKey.ts
    │   │   ├── copilot.ts
    │   │   ├── data.ts
    │   │   ├── datasource.ts
    │   │   └── webhook.ts
    │   └── ui/
    │       ├── globals.css
    │       ├── components/
    │       │   ├── ErrorBoundary.tsx
    │       │   ├── alert-dialog.tsx
    │       │   ├── alert.tsx
    │       │   ├── badge.tsx
    │       │   ├── button.tsx
    │       │   ├── card.tsx
    │       │   ├── checkbox.tsx
    │       │   ├── dialog.tsx
    │       │   ├── form.tsx
    │       │   ├── hover-card.tsx
    │       │   ├── input.tsx
    │       │   ├── label.tsx
    │       │   ├── radio-group.tsx
    │       │   ├── scroll-area.tsx
    │       │   ├── select.tsx
    │       │   ├── separator.tsx
    │       │   ├── sheet.tsx
    │       │   ├── switch.tsx
    │       │   ├── table.tsx
    │       │   ├── tabs.tsx
    │       │   └── icons/
    │       │       ├── Icon.tsx
    │       │       └── IconSelector.tsx
    │       └── fonts/
    │           ├── GeistMonoVF.woff
    │           └── GeistVF.woff
    ├── drizzle/
    │   ├── 0000_broad_morlocks.sql
    │   └── meta/
    │       ├── 0000_snapshot.json
    │       └── _journal.json
    ├── packages/
    │   └── beakdash-sdk/
    │       ├── package.json
    │       ├── webpack.config.js
    │       └── src/
    │           ├── examples/
    │           │   ├── raw.html
    │           │   ├── react.tsx
    │           │   └── vue.vue
    │           └── lib/
    │               └── sdk/
    │                   └── DashboardWidgetSDK.ts
    └── public/

================================================
File: README.md
================================================
## BeakDash

![Beak Dash Dashboard Widgets](https://github.com/user-attachments/assets/6a96b2da-516e-4d3c-bdbd-5f4f283990bb)




The **BeakDash** project is a modular, feature-rich dashboard application built using modern web development technologies such as Next.js, TypeScript, and Tailwind CSS. It is designed to facilitate data integration, visualization, and management for users working with complex datasets and diverse data sources. Below is a detailed overview of the project's structure and purpose:

---

### **Project Structure Overview**

1. **Root Files**
   - Core configuration files for the project include `package.json`, `tsconfig.json`, `tailwind.config.ts`, and `drizzle.config.ts`.
   - Development and build tools like ESLint (`.eslintrc.json`), PostCSS (`postcss.config.mjs`), and Next.js (`next.config.ts`) are pre-configured.
   - A `README.md` provides documentation, and `notes.txt` includes developer notes or ideas.

2. **Primary Folders**
   - **`app/`**: Contains the main application code structured for modularity and scalability. Subfolders include:
     - **`api/`**: Implements backend API endpoints, with categorized folders for `connections`, `datasets`, `keys`, `webhooks`, and `widgets`.
     - **`dashboard/`**: Hosts the user-facing dashboard interface with layouts, navigation, widgets, and visualization components. Includes hooks and state management.
     - **`lib/`**: Utility functions, adapters (e.g., CSV, REST, SQL), and shared logic for API keys, webhooks, and data transformation.
     - **`store/`**: State management modules for connections, datasets, widgets, and other key entities.
     - **`ui/`**: Shared UI components (buttons, cards, tables) and styles (global CSS).
   - **`packages/beakdash-sdk/`**: A reusable SDK to interact with the dashboard. Includes examples for different frameworks (React, Vue) and a core SDK library for widgets.
   - **`public/`**: Assets for public access, such as images or static files.

3. **Key Features**
   - **Dashboard Widgets**: Users can create, edit, and manage data visualization widgets. The `widget-editor/` provides advanced configuration options (e.g., ChartConfigPanel, FilteringTab).
   - **Connections**: Supports integration with various data sources through components like CSV, REST, and SQL forms.
   - **AI Copilot**: Integrates AI-driven assistance via the `copilot/generator/route.ts` and AICopilot components.
   - **State Management**: Centralized using TypeScript stores (e.g., `pageStore`, `widgetStore`).
   - **Error Handling**: Features robust error boundaries and fallback mechanisms for user-friendly experiences.
   - **Schemas and Validation**: JSON schemas and transformations are handled systematically via `schemas/`.

4. **Development Workflow**
   - **Code Modularity**: Modular components for reusability, scalability, and maintainability.
   - **Modern Design**: Leverages Tailwind CSS for streamlined and consistent UI design.
   - **Developer Utilities**: Includes helper functions, hooks (e.g., `useDebounce`, `useWidget`), and type definitions for better DX (developer experience).

5. **Future Possibilities**
   - Integration with new data sources or APIs.
   - Expanding the AI Copilot's capabilities to enhance user interactivity and automation.
   - Enabling advanced analytics and reporting features.

---

### **Purpose**
The project aims to provide an efficient platform for integrating, visualizing, and managing diverse datasets. It caters to professionals and organizations needing a customizable, AI-enhanced dashboard for data-driven decision-making.

If you'd like further elaboration or help with specific areas of the project, let me know!



================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/ui/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/app/ui/components",
    "utils": "@/app/lib/utils",
    "ui": "@/app/ui/components",
    "lib": "@/app/lib",
    "hooks": "@/app/lib/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: drizzle.config.ts
================================================
import 'dotenv/config';
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  out: './drizzle',
  schema: './app/lib/drizzle/schemas/*',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
});



================================================
File: example-env.local
================================================
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
CLERK_SECRET_KEY=
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
OPENAI_API_KEY=
DATABASE_URL=
DATABASE_PASSWORD=



================================================
File: middleware.ts
================================================
import { clerkMiddleware } from "@clerk/nextjs/server";

export default clerkMiddleware();

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};

// // API Keys middleware
// const redis = new Redis(process.env.REDIS_URL);

// export async function apiKeyAuth(
//   req: NextApiRequest,
//   res: NextApiResponse,
//   next: () => void
// ) {
//   const apiKey = req.headers['x-api-key'] || req.query.api_key;

//   if (!apiKey) {
//     return res.status(401).json({ error: 'API key required' });
//   }

//   try {
//     // Validate API key
//     const keyData = await ApiKeyModel.validate(apiKey as string);
//     if (!keyData) {
//       return res.status(401).json({ error: 'Invalid API key' });
//     }

//     // Check expiration
//     if (keyData.expiresAt && keyData.expiresAt < new Date()) {
//       return res.status(401).json({ error: 'API key expired' });
//     }

//     // Check rate limit
//     const rateKey = `rate_limit:${keyData.id}`;
//     const currentRequests = await redis.incr(rateKey);
    
//     if (currentRequests === 1) {
//       await redis.expire(rateKey, keyData.rateLimit.duration);
//     }

//     if (currentRequests > keyData.rateLimit.requests) {
//       return res.status(429).json({ 
//         error: 'Rate limit exceeded',
//         resetIn: await redis.ttl(rateKey)
//       });
//     }

//     // Add API key data to request
//     req.apiKey = keyData;
//     next();
//   } catch (error) {
//     console.error('API key validation error:', error);
//     return res.status(500).json({ error: 'Internal server error' });
//   }
// }


================================================
File: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
File: notes.txt
================================================
https://github.com/bklieger-groq/stockbot-on-groq
https://github.com/vercel/ai-chatbot

# usehydra.ai
https://github.com/use-hydra-ai/hydra-template
https://github.com/use-hydra-ai/hydra-ai

https://github.com/michaelmagan/awesome-ai-devtools


# competitors
https://www.luzmo.com/
https://saas.toucantoco.com/en/vs-luzmo


https://codesandbox.io/p/sandbox/dashboarddnd-f7iib?file=%2Fsrc%2FApp.js


https://github.com/laverdet/isolated-vm


https://chatgpt.com/c/67484e88-1060-800c-813e-71bf5afc157b
https://claude.ai/chat/c333d467-e76e-4e0e-8628-2066a803a802



https://github.com/chartbrew/chartbrew
https://github.com/getredash/redash/

https://github.com/lightdash/lightdash
https://github.com/apache/superset/


https://github.com/evidence-dev/evidence
https://baserow.io/






================================================
File: package.json
================================================
{
  "name": "beaks-dashing",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "drizzle:push": "npx drizzle-kit push",
    "drizzle:generate": "npx drizzle-kit generate",
    "drizzle:migrate": "npx drizzle-kit migrate"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "^1.0.5",
    "@ai-sdk/openai": "^1.0.8",
    "@ant-design/charts": "^2.2.6",
    "@anthropic-ai/sdk": "^0.32.1",
    "@auth/drizzle-adapter": "^1.7.4",
    "@clerk/nextjs": "^6.5.1",
    "@hookform/resolvers": "^3.9.1",
    "@monaco-editor/react": "^4.6.0",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@redux-devtools/extension": "^3.3.0",
    "@supabase/supabase-js": "^2.46.2",
    "ai": "^4.0.18",
    "axios": "^1.7.8",
    "bullmq": "^5.30.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.37.0",
    "echarts": "^5.5.0",
    "echarts-for-react": "^3.0.2",
    "es-toolkit": "^1.29.0",
    "framer-motion": "^11.12.0",
    "html2canvas": "^1.4.1",
    "lodash": "^4.17.21",
    "lucide-react": "^0.462.0",
    "mysql2": "^3.11.5",
    "next": "15.0.3",
    "openai": "^4.76.3",
    "papaparse": "^5.4.1",
    "pg": "^8.13.1",
    "postgres": "^3.4.5",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106",
    "react-dropzone": "^14.3.5",
    "react-grid-layout": "^1.4.4",
    "react-hook-form": "^7.53.2",
    "react-markdown": "^9.0.1",
    "react-resizable": "^3.0.5",
    "react-router-dom": "^6.22.3",
    "react-use": "^17.5.1",
    "sql-formatter": "^15.4.6",
    "sqlite3": "^5.1.7",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8",
    "zustand": "^5.0.1"
  },
  "devDependencies": {
    "@types/lodash": "^4.17.13",
    "@types/node": "^20",
    "@types/pg": "^8.11.10",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-grid-layout": "^1.3.5",
    "autoprefixer": "^10.4.18",
    "drizzle-kit": "^0.29.1",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "globals": "^15.9.0",
    "postcss": "^8",
    "prisma": "^6.0.0",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.19.2",
    "typescript": "^5",
    "typescript-eslint": "^8.3.0"
  },
  "peerDependencies": {
    "react": "^19.0",
    "react-dom": "^19.0"
  }
}



================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@ai-sdk/anthropic':
        specifier: ^1.0.5
        version: 1.0.5(zod@3.23.8)
      '@ai-sdk/openai':
        specifier: ^1.0.8
        version: 1.0.8(zod@3.23.8)
      '@ant-design/charts':
        specifier: ^2.2.6
        version: 2.2.6(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      '@anthropic-ai/sdk':
        specifier: ^0.32.1
        version: 0.32.1(encoding@0.1.13)
      '@auth/drizzle-adapter':
        specifier: ^1.7.4
        version: 1.7.4
      '@clerk/nextjs':
        specifier: ^6.5.1
        version: 6.5.1(next@15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106))(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@hookform/resolvers':
        specifier: ^3.9.1
        version: 3.9.1(react-hook-form@7.53.2(react@19.0.0-rc-66855b96-20241106))
      '@monaco-editor/react':
        specifier: ^4.6.0
        version: 4.6.0(monaco-editor@0.52.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-alert-dialog':
        specifier: ^1.1.2
        version: 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-checkbox':
        specifier: ^1.1.2
        version: 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-dialog':
        specifier: ^1.1.2
        version: 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-hover-card':
        specifier: ^1.1.2
        version: 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-label':
        specifier: ^2.1.0
        version: 2.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-radio-group':
        specifier: ^1.2.1
        version: 1.2.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-scroll-area':
        specifier: ^1.2.1
        version: 1.2.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-select':
        specifier: ^2.1.2
        version: 2.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-separator':
        specifier: ^1.1.0
        version: 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-slot':
        specifier: ^1.1.0
        version: 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-switch':
        specifier: ^1.1.1
        version: 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-tabs':
        specifier: ^1.1.1
        version: 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@redux-devtools/extension':
        specifier: ^3.3.0
        version: 3.3.0(redux@5.0.1)
      '@supabase/supabase-js':
        specifier: ^2.46.2
        version: 2.46.2
      ai:
        specifier: ^4.0.18
        version: 4.0.18(react@19.0.0-rc-66855b96-20241106)(zod@3.23.8)
      axios:
        specifier: ^1.7.8
        version: 1.7.8
      bullmq:
        specifier: ^5.30.0
        version: 5.30.0
      class-variance-authority:
        specifier: ^0.7.1
        version: 0.7.1
      clsx:
        specifier: ^2.1.1
        version: 2.1.1
      cmdk:
        specifier: ^1.0.4
        version: 1.0.4(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      dotenv:
        specifier: ^16.4.7
        version: 16.4.7
      drizzle-orm:
        specifier: ^0.37.0
        version: 0.37.0(@opentelemetry/api@1.9.0)(@types/pg@8.11.10)(@types/react@18.3.12)(mysql2@3.11.5)(pg@8.13.1)(postgres@3.4.5)(prisma@6.0.0)(react@19.0.0-rc-66855b96-20241106)(sqlite3@5.1.7)
      echarts:
        specifier: ^5.5.0
        version: 5.5.1
      echarts-for-react:
        specifier: ^3.0.2
        version: 3.0.2(echarts@5.5.1)(react@19.0.0-rc-66855b96-20241106)
      es-toolkit:
        specifier: ^1.29.0
        version: 1.29.0
      framer-motion:
        specifier: ^11.12.0
        version: 11.12.0(@emotion/is-prop-valid@1.2.2)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      html2canvas:
        specifier: ^1.4.1
        version: 1.4.1
      lodash:
        specifier: ^4.17.21
        version: 4.17.21
      lucide-react:
        specifier: ^0.462.0
        version: 0.462.0(react@19.0.0-rc-66855b96-20241106)
      mysql2:
        specifier: ^3.11.5
        version: 3.11.5
      next:
        specifier: 15.0.3
        version: 15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      openai:
        specifier: ^4.76.3
        version: 4.76.3(encoding@0.1.13)(zod@3.23.8)
      papaparse:
        specifier: ^5.4.1
        version: 5.4.1
      pg:
        specifier: ^8.13.1
        version: 8.13.1
      postgres:
        specifier: ^3.4.5
        version: 3.4.5
      react:
        specifier: 19.0.0-rc-66855b96-20241106
        version: 19.0.0-rc-66855b96-20241106
      react-dom:
        specifier: 19.0.0-rc-66855b96-20241106
        version: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-dropzone:
        specifier: ^14.3.5
        version: 14.3.5(react@19.0.0-rc-66855b96-20241106)
      react-grid-layout:
        specifier: ^1.4.4
        version: 1.5.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react-hook-form:
        specifier: ^7.53.2
        version: 7.53.2(react@19.0.0-rc-66855b96-20241106)
      react-markdown:
        specifier: ^9.0.1
        version: 9.0.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react-resizable:
        specifier: ^3.0.5
        version: 3.0.5(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react-router-dom:
        specifier: ^6.22.3
        version: 6.28.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react-use:
        specifier: ^17.5.1
        version: 17.5.1(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      sql-formatter:
        specifier: ^15.4.6
        version: 15.4.6
      sqlite3:
        specifier: ^5.1.7
        version: 5.1.7
      tailwind-merge:
        specifier: ^2.5.5
        version: 2.5.5
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.15)
      zod:
        specifier: ^3.23.8
        version: 3.23.8
      zustand:
        specifier: ^5.0.1
        version: 5.0.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)(use-sync-external-store@1.2.2(react@19.0.0-rc-66855b96-20241106))
    devDependencies:
      '@types/lodash':
        specifier: ^4.17.13
        version: 4.17.13
      '@types/node':
        specifier: ^20
        version: 20.17.9
      '@types/pg':
        specifier: ^8.11.10
        version: 8.11.10
      '@types/react':
        specifier: ^18
        version: 18.3.12
      '@types/react-dom':
        specifier: ^18
        version: 18.3.1
      '@types/react-grid-layout':
        specifier: ^1.3.5
        version: 1.3.5
      autoprefixer:
        specifier: ^10.4.18
        version: 10.4.20(postcss@8.4.49)
      drizzle-kit:
        specifier: ^0.29.1
        version: 0.29.1
      eslint:
        specifier: ^8
        version: 8.57.1
      eslint-config-next:
        specifier: 15.0.3
        version: 15.0.3(eslint@8.57.1)(typescript@5.7.2)
      globals:
        specifier: ^15.9.0
        version: 15.12.0
      postcss:
        specifier: ^8
        version: 8.4.49
      prisma:
        specifier: ^6.0.0
        version: 6.0.0
      tailwindcss:
        specifier: ^3.4.1
        version: 3.4.15
      tsx:
        specifier: ^4.19.2
        version: 4.19.2
      typescript:
        specifier: ^5
        version: 5.7.2
      typescript-eslint:
        specifier: ^8.3.0
        version: 8.16.0(eslint@8.57.1)(typescript@5.7.2)

packages:

  '@ai-sdk/anthropic@1.0.5':
    resolution: {integrity: sha512-qNEB7AYz6W0HTHbhJk/brhGZtjivcRdberD1fn3aCdvzlQ321q1EOTc2k7TvfE+PmNCZbp/uutBbWPGHHODKpw==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0

  '@ai-sdk/openai@1.0.8':
    resolution: {integrity: sha512-wcTHM9qgRWGYVO3WxPSTN/RwnZ9R5/17xyo61iUCCSCZaAuJyh6fKddO0/oamwDp3BG7g+4wbfAyuTo32H+fHw==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0

  '@ai-sdk/provider-utils@2.0.4':
    resolution: {integrity: sha512-GMhcQCZbwM6RoZCri0MWeEWXRt/T+uCxsmHEsTwNvEH3GDjNzchfX25C8ftry2MeEOOn6KfqCLSKomcgK6RoOg==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  '@ai-sdk/provider@1.0.2':
    resolution: {integrity: sha512-YYtP6xWQyaAf5LiWLJ+ycGTOeBLWrED7LUrvc+SQIWhGaneylqbaGsyQL7VouQUeQ4JZ1qKYZuhmi3W56HADPA==}
    engines: {node: '>=18'}

  '@ai-sdk/react@1.0.6':
    resolution: {integrity: sha512-8Hkserq0Ge6AEi7N4hlv2FkfglAGbkoAXEZ8YSp255c3PbnZz6+/5fppw+aROmZMOfNwallSRuy1i/iPa2rBpQ==}
    engines: {node: '>=18'}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  '@ai-sdk/ui-utils@1.0.5':
    resolution: {integrity: sha512-DGJSbDf+vJyWmFNexSPUsS1AAy7gtsmFmoSyNbNbJjwl9hRIf2dknfA1V0ahx6pg3NNklNYFm53L8Nphjovfvg==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0
    peerDependenciesMeta:
      zod:
        optional: true

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ant-design/charts-util@0.0.1-alpha.7':
    resolution: {integrity: sha512-Yh0o6EdO6SvdSnStFZMbnUzjyymkVzV+TQ9ymVW9hlVgO/fUkUII3JYSdV+UVcFnYwUF0YiDKuSTLCZNAzg2bQ==}
    peerDependencies:
      react: '>=16.8.4'
      react-dom: '>=16.8.4'

  '@ant-design/charts@2.2.6':
    resolution: {integrity: sha512-pkzdIkc+TdHejOkjnizIXleCQ3psqNQSStllhHul4Ep82IU/qfTbGZ9iaVGJoFOc0+uHBO9Y65RVS47TPMBerQ==}
    peerDependencies:
      react: '>=16.8.4'
      react-dom: '>=16.8.4'

  '@ant-design/graphs@2.0.4':
    resolution: {integrity: sha512-8Os7/it/auQt7NWUA+Ml+NjVYz2VsRjaGJYGxlUnfT4w0KiW6A9aYgixjVqWYjsdNBK0J3lHtrlME5RLiJ5DTw==}
    peerDependencies:
      react: '>=16.8.4'
      react-dom: '>=16.8.4'

  '@ant-design/plots@2.3.3':
    resolution: {integrity: sha512-t+pMXuCNEnbrPsRsIMyPSVMYKnFuVYeqHwtjg3ImfTTBdUAfqnJfCBnyPVakPRoMRV2y9+uVL8YWrOQiEvc6rg==}
    peerDependencies:
      react: '>=16.8.4'
      react-dom: '>=16.8.4'

  '@anthropic-ai/sdk@0.32.1':
    resolution: {integrity: sha512-U9JwTrDvdQ9iWuABVsMLj8nJVwAyQz6QXvgLsVhryhCEPkLsbcP/MXxm+jYcAwLoV8ESbaTTjnD4kuAFa+Hyjg==}

  '@antv/algorithm@0.1.26':
    resolution: {integrity: sha512-DVhcFSQ8YQnMNW34Mk8BSsfc61iC1sAnmcfYoXTAshYHuU50p/6b7x3QYaGctDNKWGvi1ub7mPcSY0bK+aN0qg==}

  '@antv/component@2.1.2':
    resolution: {integrity: sha512-5nC9i9lh5rBHE+pk4TNnerLe4mn5874YHHhvv6EdL618UkgpdKJL0hJu4l7uAYjZ3g46VBK+IYT7md0FYv8f4w==}

  '@antv/coord@0.4.7':
    resolution: {integrity: sha512-UTbrMLhwJUkKzqJx5KFnSRpU3BqrdLORJbwUbHK2zHSCT3q3bjcFA//ZYLVfIlwqFDXp/hzfMyRtp0c77A9ZVA==}

  '@antv/event-emitter@0.1.3':
    resolution: {integrity: sha512-4ddpsiHN9Pd4UIlWuKVK1C4IiZIdbwQvy9i7DUSI3xNJ89FPUFt8lxDYj8GzzfdllV0NkJTRxnG+FvLk0llidg==}

  '@antv/g-camera-api@2.0.34':
    resolution: {integrity: sha512-OgfVaMX8D5cm1OIkY+5oyBoxtAw8GqT64qBPzwqobBpO0pRd0WQ37qebukrgGIb1t9CCPQdO45pwnx89cGM/8w==}

  '@antv/g-canvas@2.0.38':
    resolution: {integrity: sha512-WyVdBzrhetwqayTepOs9SeA59g8jqdzfR8r4/jW+bajtMhN2IkRQ8ScLvpMjyKqLp9o549L4jyXQDDLjympxNw==}

  '@antv/g-dom-mutation-observer-api@2.0.31':
    resolution: {integrity: sha512-+0aE8OyekUvBfxXOri6WZ2nFMIAScbf0sw10ZqSelHl1u0ffWcmBxTnUCeVikR+PMaNlCuPTmeqDoLBZ1xRQYA==}

  '@antv/g-lite@2.2.15':
    resolution: {integrity: sha512-HfZg0GL1p6h/equzP1JSfsC08K4UuaWfnTwtwmb0efnmIMo/2sya1jyTGNWZ+Ge76qU9eWt+XzF3UfP71fxUTw==}

  '@antv/g-math@3.0.0':
    resolution: {integrity: sha512-AkmiNIEL1vgqTPeGY2wtsMdBBqKFwF7SKSgs+D1iOS/rqYMsXdhp/HvtuQ5tx/HdawE/ZzTiicIYopc520ADZw==}

  '@antv/g-plugin-canvas-path-generator@2.1.15':
    resolution: {integrity: sha512-vHJD83YNaXnP73ajkNLkNvA0Y9V1B0XhgSjpGUgl09Yf/FiG7RaeHBKETN3UfXV2dWUSCV6RsdbNqushm5MOvw==}

  '@antv/g-plugin-canvas-picker@2.1.17':
    resolution: {integrity: sha512-Ad0PsbHEcGt6OisKZL4KWOYPrcVCduukC32fuL7/prqT1l3avmjg+zFVkl/Tvj6siCz5J81p4mo0cdGridFgqA==}

  '@antv/g-plugin-canvas-renderer@2.2.17':
    resolution: {integrity: sha512-h6gj5SzQZKYewOYclFywGs4zMwkfexieZxE+U0Vt2AhIcPMGKLnrl8XPqbzONfu/EoYJGCZcFI9v0l4qtHPusg==}

  '@antv/g-plugin-dom-interaction@2.1.20':
    resolution: {integrity: sha512-tbIDaHcVWbSXVe6IGKNcgyRTJwNjmlQxx82hDUJPPPUhDaK0pFJv0TC5SrphAiTDGK8T+Htm0qU1ajg2cv9UeQ==}

  '@antv/g-plugin-dragndrop@2.0.31':
    resolution: {integrity: sha512-7Pp0NeE6/XZevyh+JoBvOhVu1geIw02knE+PuQT9FsSqOt6vtzVhaOjlqYkegP4jlCRmbzMZybsL60ovlAJrAg==}

  '@antv/g-plugin-html-renderer@2.1.20':
    resolution: {integrity: sha512-gCT1oAnThsUzyKspwROph7EXQUW2+vTttgnIFaTfls9kI4NqhpigvJadGdNcWdTFvPWArhN6yuns86UreNYkjQ==}

  '@antv/g-plugin-image-loader@2.1.17':
    resolution: {integrity: sha512-Fpdye5xslcAzF8NhKsxOo8+yYGPqnjStghOtMPOXwSYYaTaLt4xPB7SLAuFryEnfUFWWx7IOP/fbi+lmLYvlUA==}

  '@antv/g-plugin-svg-picker@2.0.33':
    resolution: {integrity: sha512-np+H6d3wQr3ycI/Pu1h+RAyenF2T2TqCKZSIXKxH6+w2O+wSvIRiiPhDccbqts1M/eLkAD8J6RweX+q+wfT0+w==}

  '@antv/g-plugin-svg-renderer@2.2.15':
    resolution: {integrity: sha512-zzumu0YkpOp39cLVt+b3DFgNMcnzSo+i+sYbaCyhJ+t2xP5RoadXcG6q8z5pV+Ye9ht+LG+5ey/pJkjXEvuH3g==}

  '@antv/g-svg@2.0.33':
    resolution: {integrity: sha512-uhu5LPHQyj2coZ0AyLTicDB+oZc3aM664BH/d6S9X3h6umLusAH8xkVoCZwMw9PCYh/mxot7cFt+M4eUkBBVBQ==}

  '@antv/g-web-animations-api@2.1.20':
    resolution: {integrity: sha512-Daws/epGwKGGX9dmKj79C0Ql8M2aZtX8Ja3Gv+6xahAh5BF7Ita9jGNp7W20vd9JY3UtKPjjrW7TSnuPF2z/kA==}

  '@antv/g2-extension-plot@0.2.1':
    resolution: {integrity: sha512-WNv/LIUNJLwlfG8XXmKUbje9PbImtJqh36UDvuOk/uu+kmP/uMyHAXsBuu0yCOWdQgBVTVwoxszxJOCnY4mVfg==}

  '@antv/g2@5.2.10':
    resolution: {integrity: sha512-ewJx9eeDuiMYRq+iy6jKnTJuxfmzHPKDQ+EHWLc+F0GhPs2UrGY+A27p2Wb3jbdZI42agnkwtvI6WgDGC3ZXlw==}

  '@antv/g6-extension-react@0.1.17':
    resolution: {integrity: sha512-0G1ThaAFvq8rzd9mauNSy/OKjVWpepATZifN1FJkuaD3xCNsrewUd0p8AkXH7R2bqmzpcHT/aWKBGIGmlXg/yQ==}
    peerDependencies:
      '@antv/g6': ^5.0.42
      react: '>=16.8'
      react-dom: '>=16.8'

  '@antv/g6@5.0.42':
    resolution: {integrity: sha512-JGYSeicGIX5C1EGN7DZOYbFm6k18eFlHSdJLQOq5l9bJmWD3Zq7mpRPK8PVsb8YlmFdqajJrCPKnw0zp22kACg==}

  '@antv/g@6.1.20':
    resolution: {integrity: sha512-/FiZLJBxmYj4hbIMS39/Jo3Ilvd4gLbM818SA9T3/g/c1C88u92TxYg+GWFDcKEN17j+PhHgGUsTiU8lwzpWjg==}

  '@antv/graphin@3.0.4':
    resolution: {integrity: sha512-7ce6RDI5Z6ud93yiyS7b+mmFrHJhlkwwNo53kb7P7KoCsnV7ioMONDE6Gw0ROeMSR6TwHtxGZUhHw9wxnPp82Q==}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  '@antv/graphlib@2.0.4':
    resolution: {integrity: sha512-zc/5oQlsdk42Z0ib1mGklwzhJ5vczLFiPa1v7DgJkTbgJ2YxRh9xdarf86zI49sKVJmgbweRpJs7Nu5bIiwv4w==}

  '@antv/hierarchy@0.6.14':
    resolution: {integrity: sha512-V3uknf7bhynOqQDw2sg+9r9DwZ9pc6k/EcqyTFdfXB1+ydr7urisP0MipIuimucvQKN+Qkd+d6w601r1UIroqQ==}

  '@antv/layout@1.2.14-beta.9':
    resolution: {integrity: sha512-wPlwBFMtq2lWZFc89/7Lzb8fjHnyKVZZ9zBb2h+zZIP0YWmVmHRE8+dqCiPKOyOGUXEdDtn813f1g107dCHZlg==}

  '@antv/react-g@2.0.36':
    resolution: {integrity: sha512-6FXQ4IdRSXpnLoF6jo5XBdM9cMgj810GAps77UskTVGG4KOKkV71RUZZt5wLNaXHzcsq5IDpmFiwdQDOGLWNqQ==}
    peerDependencies:
      react: ^16.13.1

  '@antv/scale@0.4.16':
    resolution: {integrity: sha512-5wg/zB5kXHxpTV5OYwJD3ja6R8yTiqIOkjOhmpEJiowkzRlbEC/BOyMvNUq5fqFIHnMCE9woO7+c3zxEQCKPjw==}

  '@antv/util@2.0.17':
    resolution: {integrity: sha512-o6I9hi5CIUvLGDhth0RxNSFDRwXeywmt6ExR4+RmVAzIi48ps6HUy+svxOCayvrPBN37uE6TAc2KDofRo0nK9Q==}

  '@antv/util@3.3.10':
    resolution: {integrity: sha512-basGML3DFA3O87INnzvDStjzS+n0JLEhRnRsDzP9keiXz8gT1z/fTdmJAZFOzMMWxy+HKbi7NbSt0+8vz/OsBQ==}

  '@auth/core@0.37.4':
    resolution: {integrity: sha512-HOXJwXWXQRhbBDHlMU0K/6FT1v+wjtzdKhsNg0ZN7/gne6XPsIrjZ4daMcFnbq0Z/vsAbYBinQhhua0d77v7qw==}
    peerDependencies:
      '@simplewebauthn/browser': ^9.0.1
      '@simplewebauthn/server': ^9.0.2
      nodemailer: ^6.8.0
    peerDependenciesMeta:
      '@simplewebauthn/browser':
        optional: true
      '@simplewebauthn/server':
        optional: true
      nodemailer:
        optional: true

  '@auth/drizzle-adapter@1.7.4':
    resolution: {integrity: sha512-OPZQakWWm5Hbx6okVMbtgI08WBliz/dCbFUXiPg9TThpp3Wh7MME/ubg4fW1oOp8P0gul6MkFvMVO733sVtd2w==}

  '@babel/runtime@7.26.0':
    resolution: {integrity: sha512-FDSOghenHTiToteC/QRlv2q3DhPZ/oOXTBoirfWNx1Cx3TMVcGWQtMMmQcSvb/JjpNeGzx8Pq/b4fKEJuWm1sw==}
    engines: {node: '>=6.9.0'}

  '@clerk/backend@1.18.0':
    resolution: {integrity: sha512-FIGBtr8qIgS+NbovKcLOIg8BsQj1JaykW3VKft3H83tONQD5Rg9ENXj/JX1HyZGC3ixLv5BUxu4bihQ78L/gJQ==}
    engines: {node: '>=18.17.0'}

  '@clerk/clerk-react@5.17.1':
    resolution: {integrity: sha512-j8WfJcd0NrD2hvtc3EF5IcWos3ajbKz2Bmv5do3VKYoj2JG1M6UbT2jDJ0Qv2gV8Cks51VNp+YuP89gX5ZNnrQ==}
    engines: {node: '>=18.17.0'}
    peerDependencies:
      react: ^18 || ^19.0.0-0
      react-dom: ^18 || ^19.0.0-0

  '@clerk/nextjs@6.5.1':
    resolution: {integrity: sha512-/FS1wRMOZvEF7azI+DX/DoQ3Q49oqjC3R4GgJzKnd1TIXZxhnPQbM1OvOnwBa7OEieieaXm+aPko+EYPYnSy9A==}
    engines: {node: '>=18.17.0'}
    peerDependencies:
      next: ^13.5.4 || ^14.0.3 || ^15.0.0
      react: ^18 || ^19.0.0-0
      react-dom: ^18 || ^19.0.0-0

  '@clerk/shared@2.17.0':
    resolution: {integrity: sha512-Jn/oBGjGfQQJIiMMf6Y0puC62R0rL1l/gLoPWnO6vNlCBzuFHGcsSTCWWDpmAXfyVwY7wJ7Dcq/B1UEsKeJ8zQ==}
    engines: {node: '>=18.17.0'}
    peerDependencies:
      react: ^18 || ^19.0.0-0
      react-dom: ^18 || ^19.0.0-0
    peerDependenciesMeta:
      react:
        optional: true
      react-dom:
        optional: true

  '@clerk/types@4.35.0':
    resolution: {integrity: sha512-sBSYCCIXcwI+JHQRqBtskw10+rQ1NcA9w1G6ndnS48F5C+if6xI9OpYaaDjhhvzLjBeZFydKAOhe35mgC7bmoA==}
    engines: {node: '>=18.17.0'}

  '@drizzle-team/brocli@0.10.2':
    resolution: {integrity: sha512-z33Il7l5dKjUgGULTqBsQBQwckHh5AbIuxhdsIxDDiZAzBOrZO6q9ogcWC65kU382AfynTfgNumVcNIjuIua6w==}

  '@emnapi/runtime@1.3.1':
    resolution: {integrity: sha512-kEBmG8KyqtxJZv+ygbEim+KCGtIq1fC22Ms3S4ziXmYKm8uyoLX0MHONVKwp+9opg390VaKRNt4a7A9NwmpNhw==}

  '@emotion/is-prop-valid@1.2.2':
    resolution: {integrity: sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==}

  '@emotion/memoize@0.8.1':
    resolution: {integrity: sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==}

  '@emotion/unitless@0.8.1':
    resolution: {integrity: sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==}

  '@esbuild-kit/core-utils@3.3.2':
    resolution: {integrity: sha512-sPRAnw9CdSsRmEtnsl2WXWdyquogVpB3yZ3dgwJfe8zrOzTsV7cJvmwrKVa+0ma5BoiGJ+BoqkMvawbayKUsqQ==}
    deprecated: 'Merged into tsx: https://tsx.is'

  '@esbuild-kit/esm-loader@2.6.5':
    resolution: {integrity: sha512-FxEMIkJKnodyA1OaCUoEvbYRkoZlLZ4d/eXFu9Fh8CbBBgP5EmZxrfTRyN0qpXZ4vOvqnE5YdRdcrmUUXuU+dA==}
    deprecated: 'Merged into tsx: https://tsx.is'

  '@esbuild/aix-ppc64@0.19.12':
    resolution: {integrity: sha512-bmoCYyWdEL3wDQIVbcyzRyeKLgk2WtWLTWz1ZIAZF/EGbNOwSA6ew3PftJ1PqMiOOGu0OyFMzG53L0zqIpPeNA==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/aix-ppc64@0.23.1':
    resolution: {integrity: sha512-6VhYk1diRqrhBAqpJEdjASR/+WVRtfjpqKuNw11cLiaWpAT/Uu+nokB+UJnevzy/P9C/ty6AOe0dwueMrGh/iQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.18.20':
    resolution: {integrity: sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.19.12':
    resolution: {integrity: sha512-P0UVNGIienjZv3f5zq0DP3Nt2IE/3plFzuaS96vihvD0Hd6H/q4WXUGpCxD/E8YrSXfNyRPbpTq+T8ZQioSuPA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.23.1':
    resolution: {integrity: sha512-xw50ipykXcLstLeWH7WRdQuysJqejuAGPd30vd1i5zSyKK3WE+ijzHmLKxdiCMtH1pHz78rOg0BKSYOSB/2Khw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.18.20':
    resolution: {integrity: sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.19.12':
    resolution: {integrity: sha512-qg/Lj1mu3CdQlDEEiWrlC4eaPZ1KztwGJ9B6J+/6G+/4ewxJg7gqj8eVYWvao1bXrqGiW2rsBZFSX3q2lcW05w==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.23.1':
    resolution: {integrity: sha512-uz6/tEy2IFm9RYOyvKl88zdzZfwEfKZmnX9Cj1BHjeSGNuGLuMD1kR8y5bteYmwqKm1tj8m4cb/aKEorr6fHWQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.18.20':
    resolution: {integrity: sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.19.12':
    resolution: {integrity: sha512-3k7ZoUW6Q6YqhdhIaq/WZ7HwBpnFBlW905Fa4s4qWJyiNOgT1dOqDiVAQFwBH7gBRZr17gLrlFCRzF6jFh7Kew==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.23.1':
    resolution: {integrity: sha512-nlN9B69St9BwUoB+jkyU090bru8L0NA3yFvAd7k8dNsVH8bi9a8cUAUSEcEEgTp2z3dbEDGJGfP6VUnkQnlReg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.18.20':
    resolution: {integrity: sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.19.12':
    resolution: {integrity: sha512-B6IeSgZgtEzGC42jsI+YYu9Z3HKRxp8ZT3cqhvliEHovq8HSX2YX8lNocDn79gCKJXOSaEot9MVYky7AKjCs8g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.23.1':
    resolution: {integrity: sha512-YsS2e3Wtgnw7Wq53XXBLcV6JhRsEq8hkfg91ESVadIrzr9wO6jJDMZnCQbHm1Guc5t/CdDiFSSfWP58FNuvT3Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.18.20':
    resolution: {integrity: sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.19.12':
    resolution: {integrity: sha512-hKoVkKzFiToTgn+41qGhsUJXFlIjxI/jSYeZf3ugemDYZldIXIxhvwN6erJGlX4t5h417iFuheZ7l+YVn05N3A==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.23.1':
    resolution: {integrity: sha512-aClqdgTDVPSEGgoCS8QDG37Gu8yc9lTHNAQlsztQ6ENetKEO//b8y31MMu2ZaPbn4kVsIABzVLXYLhCGekGDqw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.18.20':
    resolution: {integrity: sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.19.12':
    resolution: {integrity: sha512-4aRvFIXmwAcDBw9AueDQ2YnGmz5L6obe5kmPT8Vd+/+x/JMVKCgdcRwH6APrbpNXsPz+K653Qg8HB/oXvXVukA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.23.1':
    resolution: {integrity: sha512-h1k6yS8/pN/NHlMl5+v4XPfikhJulk4G+tKGFIOwURBSFzE8bixw1ebjluLOjfwtLqY0kewfjLSrO6tN2MgIhA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.18.20':
    resolution: {integrity: sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.19.12':
    resolution: {integrity: sha512-EYoXZ4d8xtBoVN7CEwWY2IN4ho76xjYXqSXMNccFSx2lgqOG/1TBPW0yPx1bJZk94qu3tX0fycJeeQsKovA8gg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.23.1':
    resolution: {integrity: sha512-lK1eJeyk1ZX8UklqFd/3A60UuZ/6UVfGT2LuGo3Wp4/z7eRTRYY+0xOu2kpClP+vMTi9wKOfXi2vjUpO1Ro76g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.18.20':
    resolution: {integrity: sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.19.12':
    resolution: {integrity: sha512-EoTjyYyLuVPfdPLsGVVVC8a0p1BFFvtpQDB/YLEhaXyf/5bczaGeN15QkR+O4S5LeJ92Tqotve7i1jn35qwvdA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.23.1':
    resolution: {integrity: sha512-/93bf2yxencYDnItMYV/v116zff6UyTjo4EtEQjUBeGiVpMmffDNUyD9UN2zV+V3LRV3/on4xdZ26NKzn6754g==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.18.20':
    resolution: {integrity: sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.19.12':
    resolution: {integrity: sha512-J5jPms//KhSNv+LO1S1TX1UWp1ucM6N6XuL6ITdKWElCu8wXP72l9MM0zDTzzeikVyqFE6U8YAV9/tFyj0ti+w==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.23.1':
    resolution: {integrity: sha512-CXXkzgn+dXAPs3WBwE+Kvnrf4WECwBdfjfeYHpMeVxWE0EceB6vhWGShs6wi0IYEqMSIzdOF1XjQ/Mkm5d7ZdQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.18.20':
    resolution: {integrity: sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.19.12':
    resolution: {integrity: sha512-Thsa42rrP1+UIGaWz47uydHSBOgTUnwBwNq59khgIwktK6x60Hivfbux9iNR0eHCHzOLjLMLfUMLCypBkZXMHA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.23.1':
    resolution: {integrity: sha512-VTN4EuOHwXEkXzX5nTvVY4s7E/Krz7COC8xkftbbKRYAl96vPiUssGkeMELQMOnLOJ8k3BY1+ZY52tttZnHcXQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.18.20':
    resolution: {integrity: sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.19.12':
    resolution: {integrity: sha512-LiXdXA0s3IqRRjm6rV6XaWATScKAXjI4R4LoDlvO7+yQqFdlr1Bax62sRwkVvRIrwXxvtYEHHI4dm50jAXkuAA==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.23.1':
    resolution: {integrity: sha512-Vx09LzEoBa5zDnieH8LSMRToj7ir/Jeq0Gu6qJ/1GcBq9GkfoEAoXvLiW1U9J1qE/Y/Oyaq33w5p2ZWrNNHNEw==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.18.20':
    resolution: {integrity: sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.19.12':
    resolution: {integrity: sha512-fEnAuj5VGTanfJ07ff0gOA6IPsvrVHLVb6Lyd1g2/ed67oU1eFzL0r9WL7ZzscD+/N6i3dWumGE1Un4f7Amf+w==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.23.1':
    resolution: {integrity: sha512-nrFzzMQ7W4WRLNUOU5dlWAqa6yVeI0P78WKGUo7lg2HShq/yx+UYkeNSE0SSfSure0SqgnsxPvmAUu/vu0E+3Q==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.18.20':
    resolution: {integrity: sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.19.12':
    resolution: {integrity: sha512-nYJA2/QPimDQOh1rKWedNOe3Gfc8PabU7HT3iXWtNUbRzXS9+vgB0Fjaqr//XNbd82mCxHzik2qotuI89cfixg==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.23.1':
    resolution: {integrity: sha512-dKN8fgVqd0vUIjxuJI6P/9SSSe/mB9rvA98CSH2sJnlZ/OCZWO1DJvxj8jvKTfYUdGfcq2dDxoKaC6bHuTlgcw==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.18.20':
    resolution: {integrity: sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.19.12':
    resolution: {integrity: sha512-2MueBrlPQCw5dVJJpQdUYgeqIzDQgw3QtiAHUC4RBz9FXPrskyyU3VI1hw7C0BSKB9OduwSJ79FTCqtGMWqJHg==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.23.1':
    resolution: {integrity: sha512-5AV4Pzp80fhHL83JM6LoA6pTQVWgB1HovMBsLQ9OZWLDqVY8MVobBXNSmAJi//Csh6tcY7e7Lny2Hg1tElMjIA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.18.20':
    resolution: {integrity: sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.19.12':
    resolution: {integrity: sha512-+Pil1Nv3Umes4m3AZKqA2anfhJiVmNCYkPchwFJNEJN5QxmTs1uzyy4TvmDrCRNT2ApwSari7ZIgrPeUx4UZDg==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.23.1':
    resolution: {integrity: sha512-9ygs73tuFCe6f6m/Tb+9LtYxWR4c9yg7zjt2cYkjDbDpV/xVn+68cQxMXCjUpYwEkze2RcU/rMnfIXNRFmSoDw==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.18.20':
    resolution: {integrity: sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.19.12':
    resolution: {integrity: sha512-B71g1QpxfwBvNrfyJdVDexenDIt1CiDN1TIXLbhOw0KhJzE78KIFGX6OJ9MrtC0oOqMWf+0xop4qEU8JrJTwCg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.23.1':
    resolution: {integrity: sha512-EV6+ovTsEXCPAp58g2dD68LxoP/wK5pRvgy0J/HxPGB009omFPv3Yet0HiaqvrIrgPTBuC6wCH1LTOY91EO5hQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.18.20':
    resolution: {integrity: sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.19.12':
    resolution: {integrity: sha512-3ltjQ7n1owJgFbuC61Oj++XhtzmymoCihNFgT84UAmJnxJfm4sYCiSLTXZtE00VWYpPMYc+ZQmB6xbSdVh0JWA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.23.1':
    resolution: {integrity: sha512-aevEkCNu7KlPRpYLjwmdcuNz6bDFiE7Z8XC4CPqExjTvrHugh28QzUXVOZtiYghciKUacNktqxdpymplil1beA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.23.1':
    resolution: {integrity: sha512-3x37szhLexNA4bXhLrCC/LImN/YtWis6WXr1VESlfVtVeoFJBRINPJ3f0a/6LV8zpikqoUg4hyXw0sFBt5Cr+Q==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.18.20':
    resolution: {integrity: sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.19.12':
    resolution: {integrity: sha512-RbrfTB9SWsr0kWmb9srfF+L933uMDdu9BIzdA7os2t0TXhCRjrQyCeOt6wVxr79CKD4c+p+YhCj31HBkYcXebw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.23.1':
    resolution: {integrity: sha512-aY2gMmKmPhxfU+0EdnN+XNtGbjfQgwZj43k8G3fyrDM/UdZww6xrWxmDkuz2eCZchqVeABjV5BpildOrUbBTqA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.18.20':
    resolution: {integrity: sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.19.12':
    resolution: {integrity: sha512-HKjJwRrW8uWtCQnQOz9qcU3mUZhTUQvi56Q8DPTLLB+DawoiQdjsYq+j+D3s9I8VFtDr+F9CjgXKKC4ss89IeA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.23.1':
    resolution: {integrity: sha512-RBRT2gqEl0IKQABT4XTj78tpk9v7ehp+mazn2HbUeZl1YMdaGAQqhapjGTCe7uw7y0frDi4gS0uHzhvpFuI1sA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.18.20':
    resolution: {integrity: sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.19.12':
    resolution: {integrity: sha512-URgtR1dJnmGvX864pn1B2YUYNzjmXkuJOIqG2HdU62MVS4EHpU2946OZoTMnRUHklGtJdJZ33QfzdjGACXhn1A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.23.1':
    resolution: {integrity: sha512-4O+gPR5rEBe2FpKOVyiJ7wNDPA8nGzDuJ6gN4okSA1gEOYZ67N8JPk58tkWtdtPeLz7lBnY6I5L3jdsr3S+A6A==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.18.20':
    resolution: {integrity: sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.19.12':
    resolution: {integrity: sha512-+ZOE6pUkMOJfmxmBZElNOx72NKpIa/HFOMGzu8fqzQJ5kgf6aTGrcJaFsNiVMH4JKpMipyK+7k0n2UXN7a8YKQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.23.1':
    resolution: {integrity: sha512-BcaL0Vn6QwCwre3Y717nVHZbAa4UBEigzFm6VdsVdT/MbZ38xoj1X9HPkZhbmaBGUD1W8vxAfffbDe8bA6AKnQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.18.20':
    resolution: {integrity: sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.19.12':
    resolution: {integrity: sha512-T1QyPSDCyMXaO3pzBkF96E8xMkiRYbUEZADd29SyPGabqxMViNoii+NcK7eWJAEoU6RZyEm5lVSIjTmcdoB9HA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.23.1':
    resolution: {integrity: sha512-BHpFFeslkWrXWyUPnbKm+xYYVYruCinGcftSBaa8zoF9hZO4BcSCFUvHVTtzpIY6YzUnYtuEhZ+C9iEXjxnasg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.1':
    resolution: {integrity: sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.1':
    resolution: {integrity: sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@floating-ui/core@1.6.8':
    resolution: {integrity: sha512-7XJ9cPU+yI2QeLS+FCSlqNFZJq8arvswefkZrYI1yQBbftw6FyrZOxYSh+9S7z7TpeWlRt9zJ5IhM1WIL334jA==}

  '@floating-ui/dom@1.6.12':
    resolution: {integrity: sha512-NP83c0HjokcGVEMeoStg317VD9W7eDlGK7457dMBANbKA6GJZdc7rjujdgqzTaz93jkGgc5P/jeWbaCHnMNc+w==}

  '@floating-ui/react-dom@2.1.2':
    resolution: {integrity: sha512-06okr5cgPzMNBy+Ycse2A6udMi4bqwW/zgBF/rwjcNqWkyr82Mcg8b0vjX8OJpZFy/FKjJmw6wV7t44kK6kW7A==}
    peerDependencies:
      react: '>=16.8.0'
      react-dom: '>=16.8.0'

  '@floating-ui/utils@0.2.8':
    resolution: {integrity: sha512-kym7SodPp8/wloecOpcmSnWJsK7M0E5Wg8UcFA+uO4B9s5d0ywXOEro/8HM9x0rW+TljRzul/14UYz3TleT3ig==}

  '@gar/promisify@1.1.3':
    resolution: {integrity: sha512-k2Ty1JcVojjJFwrg/ThKi2ujJ7XNLYaFGNB/bWT9wGR+oSMJHMa5w+CUq6p/pVrKeNNgA7pCqEcjSnHVoqJQFw==}

  '@hookform/resolvers@3.9.1':
    resolution: {integrity: sha512-ud2HqmGBM0P0IABqoskKWI6PEf6ZDDBZkFqe2Vnl+mTHCEHzr3ISjjZyCwTjC/qpL25JC9aIDkloQejvMeq0ug==}
    peerDependencies:
      react-hook-form: ^7.0.0

  '@humanwhocodes/config-array@0.13.0':
    resolution: {integrity: sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@img/sharp-darwin-arm64@0.33.5':
    resolution: {integrity: sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.33.5':
    resolution: {integrity: sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    resolution: {integrity: sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.0.4':
    resolution: {integrity: sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.0.4':
    resolution: {integrity: sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.0.5':
    resolution: {integrity: sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.0.4':
    resolution: {integrity: sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.0.4':
    resolution: {integrity: sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    resolution: {integrity: sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    resolution: {integrity: sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.33.5':
    resolution: {integrity: sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.33.5':
    resolution: {integrity: sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-s390x@0.33.5':
    resolution: {integrity: sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.33.5':
    resolution: {integrity: sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.33.5':
    resolution: {integrity: sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.33.5':
    resolution: {integrity: sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.33.5':
    resolution: {integrity: sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-ia32@0.33.5':
    resolution: {integrity: sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.33.5':
    resolution: {integrity: sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@ioredis/commands@1.2.0':
    resolution: {integrity: sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/source-map@0.3.6':
    resolution: {integrity: sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@ljharb/resumer@0.0.1':
    resolution: {integrity: sha512-skQiAOrCfO7vRTq53cxznMpks7wS1va95UCidALlOVWqvBAzwPVErwizDwoMqNVMEn1mDq0utxZd02eIrvF1lw==}
    engines: {node: '>= 0.4'}

  '@ljharb/through@2.3.13':
    resolution: {integrity: sha512-/gKJun8NNiWGZJkGzI/Ragc53cOdcLNdzjLaIa+GEjguQs0ulsurx8WN0jijdK9yPqDvziX995sMRLyLt1uZMQ==}
    engines: {node: '>= 0.4'}

  '@monaco-editor/loader@1.4.0':
    resolution: {integrity: sha512-00ioBig0x642hytVspPl7DbQyaSWRaolYie/UFNjoTdvoKPzo6xrXLhTk9ixgIKcLH5b5vDOjVNiGyY+uDCUlg==}
    peerDependencies:
      monaco-editor: '>= 0.21.0 < 1'

  '@monaco-editor/react@4.6.0':
    resolution: {integrity: sha512-RFkU9/i7cN2bsq/iTkurMWOEErmYcY6JiQI3Jn+WeR/FGISH8JbHERjpS9oRuSOPvDMJI0Z8nJeKkbOs9sBYQw==}
    peerDependencies:
      monaco-editor: '>= 0.25.0 < 1'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
      react-dom: ^16.8.0 || ^17.0.0 || ^18.0.0

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    resolution: {integrity: sha512-QZHtlVgbAdy2zAqNA9Gu1UpIuI8Xvsd1v8ic6B2pZmeFnFcMWiPLfWXh7TVw4eGEZ/C9TH281KwhVoeQUKbyjw==}
    cpu: [arm64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    resolution: {integrity: sha512-mdzd3AVzYKuUmiWOQ8GNhl64/IoFGol569zNRdkLReh6LRLHOXxU4U8eq0JwaD8iFHdVGqSy4IjFL4reoWCDFw==}
    cpu: [x64]
    os: [darwin]

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    resolution: {integrity: sha512-YxQL+ax0XqBJDZiKimS2XQaf+2wDGVa1enVRGzEvLLVFeqa5kx2bWbtcSXgsxjQB7nRqqIGFIcLteF/sHeVtQg==}
    cpu: [arm64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    resolution: {integrity: sha512-fg0uy/dG/nZEXfYilKoRe7yALaNmHoYeIoJuJ7KJ+YyU2bvY8vPv27f7UKhGRpY6euFYqEVhxCFZgAUNQBM3nw==}
    cpu: [arm]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    resolution: {integrity: sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==}
    cpu: [x64]
    os: [linux]

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    resolution: {integrity: sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==}
    cpu: [x64]
    os: [win32]

  '@naoak/workerize-transferable@0.1.0':
    resolution: {integrity: sha512-fDLfuP71IPNP5+zSfxFb52OHgtjZvauRJWbVnpzQ7G7BjcbLjTny0OW1d3ZO806XKpLWNKmeeW3MhE0sy8iwYQ==}
    peerDependencies:
      workerize-loader: '*'

  '@next/env@15.0.3':
    resolution: {integrity: sha512-t9Xy32pjNOvVn2AS+Utt6VmyrshbpfUMhIjFO60gI58deSo/KgLOp31XZ4O+kY/Is8WAGYwA5gR7kOb1eORDBA==}

  '@next/eslint-plugin-next@15.0.3':
    resolution: {integrity: sha512-3Ln/nHq2V+v8uIaxCR6YfYo7ceRgZNXfTd3yW1ukTaFbO+/I8jNakrjYWODvG9BuR2v5kgVtH/C8r0i11quOgw==}

  '@next/swc-darwin-arm64@15.0.3':
    resolution: {integrity: sha512-s3Q/NOorCsLYdCKvQlWU+a+GeAd3C8Rb3L1YnetsgwXzhc3UTWrtQpB/3eCjFOdGUj5QmXfRak12uocd1ZiiQw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.0.3':
    resolution: {integrity: sha512-Zxl/TwyXVZPCFSf0u2BNj5sE0F2uR6iSKxWpq4Wlk/Sv9Ob6YCKByQTkV2y6BCic+fkabp9190hyrDdPA/dNrw==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.0.3':
    resolution: {integrity: sha512-T5+gg2EwpsY3OoaLxUIofmMb7ohAUlcNZW0fPQ6YAutaWJaxt1Z1h+8zdl4FRIOr5ABAAhXtBcpkZNwUcKI2fw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.0.3':
    resolution: {integrity: sha512-WkAk6R60mwDjH4lG/JBpb2xHl2/0Vj0ZRu1TIzWuOYfQ9tt9NFsIinI1Epma77JVgy81F32X/AeD+B2cBu/YQA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.0.3':
    resolution: {integrity: sha512-gWL/Cta1aPVqIGgDb6nxkqy06DkwJ9gAnKORdHWX1QBbSZZB+biFYPFti8aKIQL7otCE1pjyPaXpFzGeG2OS2w==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.0.3':
    resolution: {integrity: sha512-QQEMwFd8r7C0GxQS62Zcdy6GKx999I/rTO2ubdXEe+MlZk9ZiinsrjwoiBL5/57tfyjikgh6GOU2WRQVUej3UA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.0.3':
    resolution: {integrity: sha512-9TEp47AAd/ms9fPNgtgnT7F3M1Hf7koIYYWCMQ9neOwjbVWJsHZxrFbI3iEDJ8rf1TDGpmHbKxXf2IFpAvheIQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.0.3':
    resolution: {integrity: sha512-VNAz+HN4OGgvZs6MOoVfnn41kBzT+M+tB+OK4cww6DNyWS6wKaDpaAm/qLeOUbnMh0oVx1+mg0uoYARF69dJyA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@npmcli/fs@1.1.1':
    resolution: {integrity: sha512-8KG5RD0GVP4ydEzRn/I4BNDuxDtqVbOdm8675T49OIG/NGhaK0pjPX7ZcDlvKYbA+ulvVK3ztfcF4uBdOxuJbQ==}

  '@npmcli/move-file@1.1.2':
    resolution: {integrity: sha512-1SUf/Cg2GzGDyaf15aR9St9TWlb+XvbZXWpDx8YKs7MLzMH/BCeopv+y9vzrzgkfykCGuWOlSu3mZhj2+FQcrg==}
    engines: {node: '>=10'}
    deprecated: This functionality has been moved to @npmcli/fs

  '@opentelemetry/api@1.9.0':
    resolution: {integrity: sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==}
    engines: {node: '>=8.0.0'}

  '@panva/hkdf@1.2.1':
    resolution: {integrity: sha512-6oclG6Y3PiDFcoyk8srjLfVKyMfVCKJ27JwNPViuXziFpmdz+MZnZN/aKY0JGXgYuO/VghU0jcOAZgWXZ1Dmrw==}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@prisma/debug@6.0.0':
    resolution: {integrity: sha512-eUjoNThlDXdyJ1iQ2d7U6aTVwm59EwvODb5zFVNJEokNoSiQmiYWNzZIwZyDmZ+j51j42/0iTaHIJ4/aZPKFRg==}

  '@prisma/engines-version@5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e':
    resolution: {integrity: sha512-JmIds0Q2/vsOmnuTJYxY4LE+sajqjYKhLtdOT6y4imojqv5d/aeVEfbBGC74t8Be1uSp0OP8lxIj2OqoKbLsfQ==}

  '@prisma/engines@6.0.0':
    resolution: {integrity: sha512-ZZCVP3q22ifN6Ex6C8RIcTDBlRtMJS2H1ljV0knCiWNGArvvkEbE88W3uDdq/l4+UvyvHpGzdf9ZsCWSQR7ZQQ==}

  '@prisma/fetch-engine@6.0.0':
    resolution: {integrity: sha512-j2m+iO5RDPRI7SUc7sHo8wX7SA4iTkJ+18Sxch8KinQM46YiCQD1iXKN6qU79C1Fliw5Bw/qDyTHaTsa3JMerA==}

  '@prisma/get-platform@6.0.0':
    resolution: {integrity: sha512-PS6nYyIm9g8C03E4y7LknOfdCw/t2KyEJxntMPQHQZCOUgOpF82Ma60mdlOD08w90I3fjLiZZ0+MadenR3naDQ==}

  '@radix-ui/number@1.1.0':
    resolution: {integrity: sha512-V3gRzhVNU1ldS5XhAPTom1fOIo4ccrjjJgmE+LI2h/WaFpHmx0MQApT+KZHnx8abG6Avtfcz4WoEciMnpFT3HQ==}

  '@radix-ui/primitive@1.1.0':
    resolution: {integrity: sha512-4Z8dn6Upk0qk4P74xBhZ6Hd/w0mPEzOOLxy4xiPXOXqjF7jZS0VAKk7/x/H6FyY2zCkYJqePf1G5KmkmNJ4RBA==}

  '@radix-ui/react-alert-dialog@1.1.2':
    resolution: {integrity: sha512-eGSlLzPhKO+TErxkiGcCZGuvbVMnLA1MTnyBksGOeGRGkxHiiJUujsjmNTdWTm4iHVSRaUao9/4Ur671auMghQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.1.0':
    resolution: {integrity: sha512-FmlW1rCg7hBpEBwFbjHwCW6AmWLQM6g/v0Sn8XbP9NvmSZ2San1FpQeyPtufzOMSIx7Y4dzjlHoifhp+7NkZhw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-checkbox@1.1.2':
    resolution: {integrity: sha512-/i0fl686zaJbDQLNKrkCbMyDm6FQMt4jg323k7HuqitoANm9sE23Ql8yOK3Wusk34HSLKDChhMux05FnP6KUkw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.1.0':
    resolution: {integrity: sha512-GZsZslMJEyo1VKm5L1ZJY8tGDxZNPAoUeQUIbKeJfoi7Q4kmig5AsgLMYYuyYbfjd8fBmFORAIwYAkXMnXZgZw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.1.0':
    resolution: {integrity: sha512-b4inOtiaOnYf9KWyO3jAeeCG6FeyfY6ldiEPanbUjWd+xIk5wZeHa8yVwmrJ2vderhu/BQvzCrJI0lHd+wIiqw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context@1.1.0':
    resolution: {integrity: sha512-OKrckBy+sMEgYM/sMmqmErVn0kZqrHPJze+Ql3DzYsDDp0hl0L62nx/2122/Bvps1qz645jlcu2tD9lrRSdf8A==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context@1.1.1':
    resolution: {integrity: sha512-UASk9zi+crv9WteK/NU4PLvOoL3OuE6BWVKNF6hPRBtYBDXQ2u5iu3O59zUlJiTVvkyuycnqrztsHVJwcK9K+Q==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.1.2':
    resolution: {integrity: sha512-Yj4dZtqa2o+kG61fzB0H2qUvmwBA2oyQroGLyNtBj1beo1khoQ3q1a2AO8rrQYjd8256CO9+N8L9tvsS+bnIyA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.1.0':
    resolution: {integrity: sha512-BUuBvgThEiAXh2DWu93XsT+a3aWrGqolGlqqw5VU1kG7p/ZH2cuDlM1sRLNnY3QcBS69UIz2mcKhMxDsdewhjg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.1.1':
    resolution: {integrity: sha512-QSxg29lfr/xcev6kSz7MAlmDnzbP1eI/Dwn3Tp1ip0KT5CUELsxkekFEMVBEoykI3oV39hKT4TKZzBNMbcTZYQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.1.1':
    resolution: {integrity: sha512-pSIwfrT1a6sIoDASCSpFwOasEwKTZWDw/iBdtnqKO7v6FeOzYJ7U53cPzYFVR3geGGXgVHaH+CdngrrAzqUGxg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.1.0':
    resolution: {integrity: sha512-200UD8zylvEyL8Bx+z76RJnASR2gRMuxlgFCPAe/Q/679a/r0eK3MBVYMb7vZODZcffZBdob1EGnky78xmVvcA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.1.2':
    resolution: {integrity: sha512-Y5w0qGhysvmqsIy6nQxaPa6mXNKznfoGjOfBgzOjocLxr2XlSjqBMYQQL+FfyogsMuX+m8cZyQGYhJxvxUzO4w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-id@1.1.0':
    resolution: {integrity: sha512-EJUrI8yYh7WOjNOqpoJaf1jlFIH2LvtgAl+YcFqNCa+4hj64ZXmPkAKOFs/ukjz3byN6bdb/AVUqHkI8/uWWMA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-label@2.1.0':
    resolution: {integrity: sha512-peLblDlFw/ngk3UWq0VnYaOLy6agTZZ+MUO/WhVfm14vJGML+xH4FAl2XQGLqdefjNb7ApRg6Yn7U42ZhmYXdw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.2.0':
    resolution: {integrity: sha512-ZnRMshKF43aBxVWPWvbj21+7TQCvhuULWJ4gNIKYpRlQt5xGRhLx66tMp8pya2UkGHTSlhpXwmjqltDYHhw7Vg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.1.2':
    resolution: {integrity: sha512-WeDYLGPxJb/5EGBoedyJbT0MpoULmwnIPMJMSldkuiMsBAv7N1cRdsTWZWht9vpPOiN3qyiGAtbK2is47/uMFg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.1.1':
    resolution: {integrity: sha512-IeFXVi4YS1K0wVZzXNrbaaUvIJ3qdY+/Ih4eHFhWA9SwGR9UDX7Ck8abvL57C4cv3wwMvUE0OG69Qc3NCcTe/A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@2.0.0':
    resolution: {integrity: sha512-ZSpFm0/uHa8zTvKBDjLFWLo8dkr4MBsiDLz0g3gMUwqgLHz9rTaRRGYDgvZPtBJgYCBKXkS9fzmoySgr8CO6Cw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-radio-group@1.2.1':
    resolution: {integrity: sha512-kdbv54g4vfRjja9DNWPMxKvXblzqbpEC8kspEkZ6dVP7kQksGCn+iZHkcCz2nb00+lPdRvxrqy4WrvvV1cNqrQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.1.0':
    resolution: {integrity: sha512-EA6AMGeq9AEeQDeSH0aZgG198qkfHSbvWTf1HvoDmOB5bBG/qTxjYMWUKMnYiV6J/iP/J8MEFSuB2zRU2n7ODA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.2.1':
    resolution: {integrity: sha512-FnM1fHfCtEZ1JkyfH/1oMiTcFBQvHKl4vD9WnpwkLgtF+UmnXMCad6ECPTaAjcDjam+ndOEJWgHyKDGNteWSHw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.1.2':
    resolution: {integrity: sha512-rZJtWmorC7dFRi0owDmoijm6nSJH1tVw64QGiNIZ9PNLyBDtG+iAq+XGsya052At4BfarzY/Dhv9wrrUr6IMZA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-separator@1.1.0':
    resolution: {integrity: sha512-3uBAs+egzvJBDZAzvb/n4NxxOYpnspmWxO2u5NbZ8Y6FM/NdrGSF9bop3Cf6F6C71z1rTSn8KV0Fo2ZVd79lGA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.1.0':
    resolution: {integrity: sha512-FUCf5XMfmW4dtYl69pdS4DbxKy8nj4M7SafBgPllysxmdachynNflAdp/gCsnYWNDnge6tI9onzMp5ARYc1KNw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-switch@1.1.1':
    resolution: {integrity: sha512-diPqDDoBcZPSicYoMWdWx+bCPuTRH4QSp9J+65IvtdS0Kuzt67bI6n32vCj8q6NZmYW/ah+2orOtMwcX5eQwIg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-tabs@1.1.1':
    resolution: {integrity: sha512-3GBUDmP2DvzmtYLMsHmpA1GtR46ZDZ+OreXM/N+kkQJOPIgytFWWTfDQmBQKBvaFS0Vno0FktdbVzN28KGrMdw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.1.0':
    resolution: {integrity: sha512-CasTfvsy+frcFkbXtSJ2Zu9JHpN8TYKxkgJGWbjiZhFivxaeW7rMeZt7QELGVLaYVfFMsKHjb7Ak0nMEe+2Vfw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.1.0':
    resolution: {integrity: sha512-MtfMVJiSr2NjzS0Aa90NPTnvTSg6C/JLCV7ma0W6+OMV78vd8OyRpID+Ng9LxzsPbLeuBnWBA1Nq30AtBIDChw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.1.0':
    resolution: {integrity: sha512-L7vwWlR1kTTQ3oh7g1O0CBF3YCyyTj8NmhLR+phShpyA50HCfBFKVJTpshm9PzLiKmehsrQzTYTpX9HvmC9rhw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.1.0':
    resolution: {integrity: sha512-+FPE0rOdziWSrH9athwI1R0HDVbWlEhd+FR+aSDk4uWGmSJ9Z54sdZVDQPZAinJhJXwfT+qnj969mCsT2gfm5w==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.1.0':
    resolution: {integrity: sha512-Z/e78qg2YFnnXcW88A4JmTtm4ADckLno6F7OXotmkQfeuCVaKuYzqAATPhVzl3delXE7CxIV8shofPn3jPc5Og==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.1.0':
    resolution: {integrity: sha512-0Fmkebhr6PiseyZlYAOtLS+nb7jLmpqTrJyv61Pe68MKYW6OWdRE2kI70TaYY27u7H0lajqM3hSMMLFq18Z7nQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.1.0':
    resolution: {integrity: sha512-XW3/vWuIXHa+2Uwcc2ABSfcCledmXhhQPlGbfcRXbiUQI5Icjcg19BGCZVKKInYbvUCut/ufbbLLPFC5cbb1hw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.1.0':
    resolution: {integrity: sha512-N8MDZqtgCgG5S3aV60INAB475osJousYpZ4cTJ2cFbMpdHS5Y6loLTH8LPtkj2QN0x93J30HT/M3qJXM0+lyeQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
      react-dom: ^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.1.0':
    resolution: {integrity: sha512-A9+lCBZoaMJlVKcRBz2YByCG+Cp2t6nAnMnNba+XiWxnj6r4JUFqfsgwocMBZU9LPtdxC6wB56ySYpc7LQIoJg==}

  '@redux-devtools/extension@3.3.0':
    resolution: {integrity: sha512-X34S/rC8S/M1BIrkYD1mJ5f8vlH0BDqxXrs96cvxSBo4FhMdbhU+GUGsmNYov1xjSyLMHgo8NYrUG8bNX7525g==}
    peerDependencies:
      redux: ^3.1.0 || ^4.0.0 || ^5.0.0

  '@remix-run/router@1.21.0':
    resolution: {integrity: sha512-xfSkCAchbdG5PnbrKqFWwia4Bi61nH+wm8wLEqfHDyp7Y3dZzgqS2itV8i4gAq9pC2HsTpwyBC6Ds8VHZ96JlA==}
    engines: {node: '>=14.0.0'}

  '@rtsao/scc@1.1.0':
    resolution: {integrity: sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==}

  '@rushstack/eslint-patch@1.10.4':
    resolution: {integrity: sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA==}

  '@supabase/auth-js@2.65.1':
    resolution: {integrity: sha512-IA7i2Xq2SWNCNMKxwmPlHafBQda0qtnFr8QnyyBr+KaSxoXXqEzFCnQ1dGTy6bsZjVBgXu++o3qrDypTspaAPw==}

  '@supabase/functions-js@2.4.3':
    resolution: {integrity: sha512-sOLXy+mWRyu4LLv1onYydq+10mNRQ4rzqQxNhbrKLTLTcdcmS9hbWif0bGz/NavmiQfPs4ZcmQJp4WqOXlR4AQ==}

  '@supabase/node-fetch@2.6.15':
    resolution: {integrity: sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==}
    engines: {node: 4.x || >=6.0.0}

  '@supabase/postgrest-js@1.16.3':
    resolution: {integrity: sha512-HI6dsbW68AKlOPofUjDTaosiDBCtW4XAm0D18pPwxoW3zKOE2Ru13Z69Wuys9fd6iTpfDViNco5sgrtnP0666A==}

  '@supabase/realtime-js@2.10.9':
    resolution: {integrity: sha512-0AjN65VDNIScZzrrPaVvlND4vbgVS+j9Wcy3zf7e+l9JY4IwCTahFenPLcKy9bkr7KY0wfB7MkipZPKxMaDnjw==}

  '@supabase/storage-js@2.7.1':
    resolution: {integrity: sha512-asYHcyDR1fKqrMpytAS1zjyEfvxuOIp1CIXX7ji4lHHcJKqyk+sLl/Vxgm4sN6u8zvuUtae9e4kDxQP2qrwWBA==}

  '@supabase/supabase-js@2.46.2':
    resolution: {integrity: sha512-5FEzYMZhfIZrMWEqo5/dQincvrhM+DeMWH3/okeZrkBBW1AJxblOQhnhF4/dfNYK25oZ1O8dAnnxZ9gQqdr40w==}

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.13':
    resolution: {integrity: sha512-UoKGxQ3r5kYI9dALKJapMmuK+1zWM/H17Z1+iwnNmzcJRnfFuevZs375TA5rW31pu4BS4NoSy1fRsexDXfWn5w==}

  '@tootallnate/once@1.1.2':
    resolution: {integrity: sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==}
    engines: {node: '>= 6'}

  '@types/debug@4.1.12':
    resolution: {integrity: sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==}

  '@types/diff-match-patch@1.0.36':
    resolution: {integrity: sha512-xFdR6tkm0MWvBfO8xXCSsinYxHcqkQUlcHeSpMC2ukzOb6lwQAfDmW+Qt0AvlGd8HpsS28qKsB+oPeJn9I39jg==}

  '@types/eslint-scope@3.7.7':
    resolution: {integrity: sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==}

  '@types/eslint@9.6.1':
    resolution: {integrity: sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==}

  '@types/estree-jsx@1.0.5':
    resolution: {integrity: sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==}

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/hast@3.0.4':
    resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}

  '@types/js-cookie@2.2.7':
    resolution: {integrity: sha512-aLkWa0C0vO5b4Sr798E26QgOkss68Un0bLjs7u9qxzPT5CG+8DuNTffWES58YzJs3hrVAOs1wonycqEBqNJubA==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/json5@0.0.29':
    resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}

  '@types/lodash@4.17.13':
    resolution: {integrity: sha512-lfx+dftrEZcdBPczf9d0Qv0x+j/rfNCMuC6OcfXmO8gkfeNAY88PgKUbvG56whcN23gc27yenwF6oJZXGFpYxg==}

  '@types/mdast@4.0.4':
    resolution: {integrity: sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==}

  '@types/ms@0.7.34':
    resolution: {integrity: sha512-nG96G3Wp6acyAgJqGasjODb+acrI7KltPiRxzHPXnP3NgI28bpQDRv53olbqGXbfcgF5aiiHmO3xpwEpS5Ld9g==}

  '@types/node-fetch@2.6.12':
    resolution: {integrity: sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==}

  '@types/node@18.19.68':
    resolution: {integrity: sha512-QGtpFH1vB99ZmTa63K4/FU8twThj4fuVSBkGddTp7uIL/cuoLWIUSL2RcOaigBhfR+hg5pgGkBnkoOxrTVBMKw==}

  '@types/node@20.17.9':
    resolution: {integrity: sha512-0JOXkRyLanfGPE2QRCwgxhzlBAvaRdCNMcvbd7jFfpmD4eEXll7LRwy5ymJmyeZqk7Nh7eD2LeUyQ68BbndmXw==}

  '@types/pg@8.11.10':
    resolution: {integrity: sha512-LczQUW4dbOQzsH2RQ5qoeJ6qJPdrcM/DcMLoqWQkMLMsq83J5lAX3LXjdkWdpscFy67JSOWDnh7Ny/sPFykmkg==}

  '@types/phoenix@1.6.6':
    resolution: {integrity: sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==}

  '@types/prop-types@15.7.13':
    resolution: {integrity: sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==}

  '@types/react-dom@18.3.1':
    resolution: {integrity: sha512-qW1Mfv8taImTthu4KoXgDfLuk4bydU6Q/TkADnDWWHwi4NX4BR+LWfTp2sVmTqRrsHvyDDTelgelxJ+SsejKKQ==}

  '@types/react-grid-layout@1.3.5':
    resolution: {integrity: sha512-WH/po1gcEcoR6y857yAnPGug+ZhkF4PaTUxgAbwfeSH/QOgVSakKHBXoPGad/sEznmkiaK3pqHk+etdWisoeBQ==}

  '@types/react@18.3.12':
    resolution: {integrity: sha512-D2wOSq/d6Agt28q7rSI3jhU7G6aiuzljDGZ2hTZHIkrTLUI+AF3WMeKkEZ9nN2fkBAlcktT6vcZjDFiIhMYEQw==}

  '@types/stylis@4.2.5':
    resolution: {integrity: sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==}

  '@types/unist@2.0.11':
    resolution: {integrity: sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==}

  '@types/unist@3.0.3':
    resolution: {integrity: sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==}

  '@types/ws@8.5.13':
    resolution: {integrity: sha512-osM/gWBTPKgHV8XkTunnegTRIsvF6owmf5w+JtAfOw472dptdm0dlGv4xCt6GwQRcC2XVOvvRE/0bAoQcL2QkA==}

  '@typescript-eslint/eslint-plugin@8.16.0':
    resolution: {integrity: sha512-5YTHKV8MYlyMI6BaEG7crQ9BhSc8RxzshOReKwZwRWN0+XvvTOm+L/UYLCYxFpfwYuAAqhxiq4yae0CMFwbL7Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.0.0 || ^8.0.0-alpha.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@8.16.0':
    resolution: {integrity: sha512-D7DbgGFtsqIPIFMPJwCad9Gfi/hC0PWErRRHFnaCWoEDYi5tQUDiJCTmGUbBiLzjqAck4KcXt9Ayj0CNlIrF+w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@8.16.0':
    resolution: {integrity: sha512-mwsZWubQvBki2t5565uxF0EYvG+FwdFb8bMtDuGQLdCCnGPrDEDvm1gtfynuKlnpzeBRqdFCkMf9jg1fnAK8sg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/type-utils@8.16.0':
    resolution: {integrity: sha512-IqZHGG+g1XCWX9NyqnI/0CX5LL8/18awQqmkZSl2ynn8F76j579dByc0jhfVSnSnhf7zv76mKBQv9HQFKvDCgg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@8.16.0':
    resolution: {integrity: sha512-NzrHj6thBAOSE4d9bsuRNMvk+BvaQvmY4dDglgkgGC0EW/tB3Kelnp3tAKH87GEwzoxgeQn9fNGRyFJM/xd+GQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.16.0':
    resolution: {integrity: sha512-E2+9IzzXMc1iaBy9zmo+UYvluE3TW7bCGWSF41hVWUE01o8nzr1rvOQYSxelxr6StUvRcTMe633eY8mXASMaNw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@8.16.0':
    resolution: {integrity: sha512-C1zRy/mOL8Pj157GiX4kaw7iyRLKfJXBR3L82hk5kS/GyHcOFmy4YUq/zfZti72I9wnuQtA/+xzft4wCC8PJdA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/visitor-keys@8.16.0':
    resolution: {integrity: sha512-pq19gbaMOmFE3CbL0ZB8J8BFCo2ckfHBfaIsaOZgBIF4EoISJIdLX5xRhd0FGB0LlHReNRuzoJoMGpTjq8F2CQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@webassemblyjs/ast@1.14.1':
    resolution: {integrity: sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==}

  '@webassemblyjs/floating-point-hex-parser@1.13.2':
    resolution: {integrity: sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==}

  '@webassemblyjs/helper-api-error@1.13.2':
    resolution: {integrity: sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==}

  '@webassemblyjs/helper-buffer@1.14.1':
    resolution: {integrity: sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==}

  '@webassemblyjs/helper-numbers@1.13.2':
    resolution: {integrity: sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==}

  '@webassemblyjs/helper-wasm-bytecode@1.13.2':
    resolution: {integrity: sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    resolution: {integrity: sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==}

  '@webassemblyjs/ieee754@1.13.2':
    resolution: {integrity: sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==}

  '@webassemblyjs/leb128@1.13.2':
    resolution: {integrity: sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==}

  '@webassemblyjs/utf8@1.13.2':
    resolution: {integrity: sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==}

  '@webassemblyjs/wasm-edit@1.14.1':
    resolution: {integrity: sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==}

  '@webassemblyjs/wasm-gen@1.14.1':
    resolution: {integrity: sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==}

  '@webassemblyjs/wasm-opt@1.14.1':
    resolution: {integrity: sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==}

  '@webassemblyjs/wasm-parser@1.14.1':
    resolution: {integrity: sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==}

  '@webassemblyjs/wast-printer@1.14.1':
    resolution: {integrity: sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==}

  '@xobotyi/scrollbar-width@1.9.5':
    resolution: {integrity: sha512-N8tkAACJx2ww8vFMneJmaAgmjAG1tnVBZJRLRcx061tmsLRZHSEZSLuGWnwPtunsSLvSqXQ2wfp7Mgqg1I+2dQ==}

  '@xtuc/ieee754@1.2.0':
    resolution: {integrity: sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==}

  '@xtuc/long@4.2.2':
    resolution: {integrity: sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==}

  abbrev@1.1.1:
    resolution: {integrity: sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agent-base@6.0.2:
    resolution: {integrity: sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==}
    engines: {node: '>= 6.0.0'}

  agentkeepalive@4.5.0:
    resolution: {integrity: sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==}
    engines: {node: '>= 8.0.0'}

  aggregate-error@3.1.0:
    resolution: {integrity: sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==}
    engines: {node: '>=8'}

  ai@4.0.18:
    resolution: {integrity: sha512-BTWzalLNE1LQphEka5xzJXDs5v4xXy1Uzr7dAVk+C/CnO3WNpuMBgrCymwUv0VrWaWc8xMQuh+OqsT7P7JyekQ==}
    engines: {node: '>=18'}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      zod: ^3.0.0
    peerDependenciesMeta:
      react:
        optional: true
      zod:
        optional: true

  ajv-formats@2.1.1:
    resolution: {integrity: sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==}
    peerDependencies:
      ajv: ^8.0.0
    peerDependenciesMeta:
      ajv:
        optional: true

  ajv-keywords@3.5.2:
    resolution: {integrity: sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==}
    peerDependencies:
      ajv: ^6.9.1

  ajv-keywords@5.1.0:
    resolution: {integrity: sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==}
    peerDependencies:
      ajv: ^8.8.2

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ajv@8.17.1:
    resolution: {integrity: sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==}

  align-text@0.1.4:
    resolution: {integrity: sha512-GrTZLRpmp6wIC2ztrWW9MjjTgSKccffgFagbNDOX95/dcjEcYZibYTeaOntySQLcdw1ztBoFkviiUvTMbb9MYg==}
    engines: {node: '>=0.10.0'}

  amdefine@1.0.1:
    resolution: {integrity: sha512-S2Hw0TtNkMJhIabBwIojKL9YHO5T0n5eNqWJ7Lrlel/zDbftQpxpapi8tZs3X1HWa+u+QeydGmzzNU0m09+Rcg==}
    engines: {node: '>=0.4.2'}

  ansi-regex@2.1.1:
    resolution: {integrity: sha512-TIGnTpdo+E3+pCyAluZvtED5p5wCqLdezCyhPZzKPcxvFplEt4i+W7OONCKgeZFT3+y5NZZfOOS/Bdcanm1MYA==}
    engines: {node: '>=0.10.0'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@2.2.1:
    resolution: {integrity: sha512-kmCevFghRiWM7HB5zTPULl4r9bVFSWjz62MhqizDGUrq2NWuNMQyuv4tHHoKJHs69M/MF64lEcHdYIocrdWQYA==}
    engines: {node: '>=0.10.0'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  aproba@2.0.0:
    resolution: {integrity: sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==}

  are-we-there-yet@3.0.1:
    resolution: {integrity: sha512-QZW4EDmGwlYur0Yyf/b2uGucHQMa8aFUP7eu9ddR73vvhFyt4V0Vl3QHPcTNJ8l6qYOBdxgXdnBXQrHilfRQBg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}
    deprecated: This package is no longer supported.

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.4:
    resolution: {integrity: sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A==}
    engines: {node: '>=10'}

  aria-query@5.3.2:
    resolution: {integrity: sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==}
    engines: {node: '>= 0.4'}

  array-buffer-byte-length@1.0.1:
    resolution: {integrity: sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==}
    engines: {node: '>= 0.4'}

  array-includes@3.1.8:
    resolution: {integrity: sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlast@1.2.5:
    resolution: {integrity: sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==}
    engines: {node: '>= 0.4'}

  array.prototype.findlastindex@1.2.5:
    resolution: {integrity: sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==}
    engines: {node: '>= 0.4'}

  array.prototype.flat@1.3.2:
    resolution: {integrity: sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==}
    engines: {node: '>= 0.4'}

  array.prototype.flatmap@1.3.2:
    resolution: {integrity: sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==}
    engines: {node: '>= 0.4'}

  array.prototype.tosorted@1.1.4:
    resolution: {integrity: sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==}
    engines: {node: '>= 0.4'}

  arraybuffer.prototype.slice@1.0.3:
    resolution: {integrity: sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==}
    engines: {node: '>= 0.4'}

  ast-types-flow@0.0.8:
    resolution: {integrity: sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  attr-accept@2.2.5:
    resolution: {integrity: sha512-0bDNnY/u6pPwHDMoF0FieU354oBi0a8rD9FcsLwzcGWbc8KS8KPIi7y+s13OlVY+gMWc/9xEMUgNE6Qm8ZllYQ==}
    engines: {node: '>=4'}

  autoprefixer@10.4.20:
    resolution: {integrity: sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  aws-ssl-profiles@1.1.2:
    resolution: {integrity: sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==}
    engines: {node: '>= 6.0.0'}

  axe-core@4.10.2:
    resolution: {integrity: sha512-RE3mdQ7P3FRSe7eqCWoeQ/Z9QXrtniSjp1wUjt5nRC3WIpz5rSCve6o3fsZ2aCpJtrZjSZgjwXAoTO5k4tEI0w==}
    engines: {node: '>=4'}

  axios@1.7.8:
    resolution: {integrity: sha512-Uu0wb7KNqK2t5K+YQyVCLM76prD5sRFjKHbJYCP1J7JFGEQ6nN7HWn9+04LAeiJ3ji54lgS/gZCH1oxyrf1SPw==}

  axobject-query@4.1.0:
    resolution: {integrity: sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==}
    engines: {node: '>= 0.4'}

  bail@2.0.2:
    resolution: {integrity: sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base64-arraybuffer@1.0.2:
    resolution: {integrity: sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==}
    engines: {node: '>= 0.6.0'}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  big.js@5.2.2:
    resolution: {integrity: sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.24.2:
    resolution: {integrity: sha512-ZIc+Q62revdMcqC6aChtW4jz3My3klmCO1fEmINZY/8J3EpBg5/A/D0AKmBveUh6pgoeycoMkVMko84tuYS+Gg==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bubblesets-js@2.3.4:
    resolution: {integrity: sha512-DyMjHmpkS2+xcFNtyN00apJYL3ESdp9fTrkDr5+9Qg/GPqFmcWgGsK1akZnttE1XFxJ/VMy4DNNGMGYtmFp1Sg==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  bullmq@5.30.0:
    resolution: {integrity: sha512-xSBiQksJpMHb1tuvH4+3FYQGiCqxvjD8kN/v4YAeDYCHP76AUedQGeehQPVqy9fsCbb0DTXah/Us/ydM8vU9Ug==}

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  cacache@15.3.0:
    resolution: {integrity: sha512-VVdYzXEn+cnbXpFgWs5hTT7OScegHVmLhJIR8Ufqk3iFD6A6j5iSX1KuBTfNEv4tdJWE2PzA6IVFtcLC7fN9wQ==}
    engines: {node: '>= 10'}

  call-bind-apply-helpers@1.0.1:
    resolution: {integrity: sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.7:
    resolution: {integrity: sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.3:
    resolution: {integrity: sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  camelcase@1.2.1:
    resolution: {integrity: sha512-wzLkDa4K/mzI1OSITC+DUyjgIl/ETNHE9QvYgy6J6Jvqyyz4C0Xfd+lQhb19sX2jMpZV4IssUn0VDVmglV+s4g==}
    engines: {node: '>=0.10.0'}

  camelize@1.0.1:
    resolution: {integrity: sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==}

  caniuse-lite@1.0.30001684:
    resolution: {integrity: sha512-G1LRwLIQjBQoyq0ZJGqGIJUXzJ8irpbjHLpVRXDvBEScFJ9b17sgK6vlx0GAJFE21okD7zXl08rRRUfq6HdoEQ==}

  ccount@2.0.1:
    resolution: {integrity: sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==}

  center-align@0.1.3:
    resolution: {integrity: sha512-Baz3aNe2gd2LP2qk5U+sDk/m4oSuwSDcBfayTCTBoWpfIGO5XFxPmjILQII4NGiZjD6DoDI6kf7gKaxkf7s3VQ==}
    engines: {node: '>=0.10.0'}

  chalk@1.1.3:
    resolution: {integrity: sha512-U3lRVLMSlsCfjqYPbLyVv11M9CPW4I728d6TCKMAOJueEeB9/8o+eSsMnxPJD+Q+K909sdESg7C+tIkoH6on1A==}
    engines: {node: '>=0.10.0'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.3.0:
    resolution: {integrity: sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  character-entities-html4@2.1.0:
    resolution: {integrity: sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==}

  character-entities-legacy@3.0.0:
    resolution: {integrity: sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==}

  character-entities@2.0.2:
    resolution: {integrity: sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==}

  character-reference-invalid@2.0.1:
    resolution: {integrity: sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  chownr@1.1.4:
    resolution: {integrity: sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==}

  chownr@2.0.0:
    resolution: {integrity: sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==}
    engines: {node: '>=10'}

  chrome-trace-event@1.0.4:
    resolution: {integrity: sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==}
    engines: {node: '>=6.0'}

  class-variance-authority@0.7.1:
    resolution: {integrity: sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==}

  clean-stack@2.2.0:
    resolution: {integrity: sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==}
    engines: {node: '>=6'}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  cliui@2.1.0:
    resolution: {integrity: sha512-GIOYRizG+TGoc7Wgc1LiOTLare95R3mzKgoln+Q/lE4ceiYH19gUpl0l0Ffq4lJDEf3FxujMe6IBfOCs7pfqNA==}

  clsx@1.2.1:
    resolution: {integrity: sha512-EcR6r5a8bj6pu3ycsa/E/cKVGuTgZJZdsyUYHOksG/UHIiKfjxzRxYJpyVBwYaQeOvghal9fcc4PidlgzugAQg==}
    engines: {node: '>=6'}

  clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}

  cluster-key-slot@1.1.2:
    resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
    engines: {node: '>=0.10.0'}

  cmdk@1.0.4:
    resolution: {integrity: sha512-AnsjfHyHpQ/EFeAnG216WY7A5LiYCoZzCSygiLvfXC3H3LFGCprErteUcszaVluGOhuOTbJS3jWHrSDYPBBygg==}
    peerDependencies:
      react: ^18 || ^19 || ^19.0.0-rc
      react-dom: ^18 || ^19 || ^19.0.0-rc

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color-support@1.1.3:
    resolution: {integrity: sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==}
    hasBin: true

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  comlink@4.4.2:
    resolution: {integrity: sha512-OxGdvBmJuNKSCMO4NTl1L47VRp6xn2wG4F/2hYzB6tiCb709otOxtEYCSvK80PtjODfXXZu8ds+Nw5kVCjqd2g==}

  comma-separated-tokens@2.0.3:
    resolution: {integrity: sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==}

  commander@2.20.3:
    resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  commander@7.2.0:
    resolution: {integrity: sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==}
    engines: {node: '>= 10'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  console-control-strings@1.1.0:
    resolution: {integrity: sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==}

  contour_plot@0.0.1:
    resolution: {integrity: sha512-Nil2HI76Xux6sVGORvhSS8v66m+/h5CwFkBJDO+U5vWaMdNC0yXNCsGDPbzPhvqOEU5koebhdEvD372LI+IyLw==}

  cookie@0.7.0:
    resolution: {integrity: sha512-qCf+V4dtlNhSRXGAZatc1TasyFO6GjohcOul807YOb5ik3+kQSnb4d7iajeCL8QHaJ4uZEjCgiCJerKXwdRVlQ==}
    engines: {node: '>= 0.6'}

  copy-to-clipboard@3.3.3:
    resolution: {integrity: sha512-2KV8NhB5JqC3ky0r9PMCAZKbUHSwtEo4CwCs0KXgruG43gX5PMqDEBbVU4OUzw2MuAWUfsuFmWvEKG5QRfSnJA==}

  cron-parser@4.9.0:
    resolution: {integrity: sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==}
    engines: {node: '>=12.0.0'}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  crypto-js@4.2.0:
    resolution: {integrity: sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==}

  css-color-keywords@1.0.0:
    resolution: {integrity: sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==}
    engines: {node: '>=4'}

  css-in-js-utils@3.1.0:
    resolution: {integrity: sha512-fJAcud6B3rRu+KHYk+Bwf+WFL2MDCJJ1XG9x137tJQ0xYxor7XziQtuGFbWNdqrvF4Tk26O3H73nfVqXt/fW1A==}

  css-line-break@2.1.0:
    resolution: {integrity: sha512-FHcKFCZcAha3LwfVBhCQbW2nCNbkZXn7KVUJcsT5/P8YmfsVja0FMPJr0B903j/E69HUphKiV9iQArX8SDYA4w==}

  css-to-react-native@3.2.0:
    resolution: {integrity: sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==}

  css-tree@1.1.3:
    resolution: {integrity: sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==}
    engines: {node: '>=8.0.0'}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.1:
    resolution: {integrity: sha512-DJR/VvkAvSZW9bTouZue2sSxDwdTN92uHjqeKVm+0dAqdfNykRzQ95tay8aXMBAAPpUiq4Qcug2L7neoRh2Egw==}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  d3-array@3.2.4:
    resolution: {integrity: sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==}
    engines: {node: '>=12'}

  d3-binarytree@1.0.2:
    resolution: {integrity: sha512-cElUNH+sHu95L04m92pG73t2MEJXKu+GeKUN1TJkFsu93E5W8E9Sc3kHEGJKgenGvj19m6upSn2EunvMgMD2Yw==}

  d3-color@3.1.0:
    resolution: {integrity: sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==}
    engines: {node: '>=12'}

  d3-dispatch@3.0.1:
    resolution: {integrity: sha512-rzUyPU/S7rwUflMyLc1ETDeBj0NRuHKKAcvukozwhshr6g6c5d8zh4c2gQjY2bZ0dXeGLWc1PF174P2tVvKhfg==}
    engines: {node: '>=12'}

  d3-dsv@3.0.1:
    resolution: {integrity: sha512-UG6OvdI5afDIFP9w4G0mNq50dSOsXHJaRE8arAS5o9ApWnIElp8GZw1Dun8vP8OyHOZ/QJUKUJwxiiCCnUwm+Q==}
    engines: {node: '>=12'}
    hasBin: true

  d3-force-3d@3.0.5:
    resolution: {integrity: sha512-tdwhAhoTYZY/a6eo9nR7HP3xSW/C6XvJTbeRpR92nlPzH6OiE+4MliN9feuSFd0tPtEUo+191qOhCTWx3NYifg==}
    engines: {node: '>=12'}

  d3-force@3.0.0:
    resolution: {integrity: sha512-zxV/SsA+U4yte8051P4ECydjD/S+qeYtnaIyAs9tgHCqfguma/aAQDjo85A9Z6EKhBirHRJHXIgJUlffT4wdLg==}
    engines: {node: '>=12'}

  d3-format@3.1.0:
    resolution: {integrity: sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==}
    engines: {node: '>=12'}

  d3-geo@3.1.1:
    resolution: {integrity: sha512-637ln3gXKXOwhalDzinUgY83KzNWZRKbYubaG+fGVuc/dxO64RRljtCTnf5ecMyE1RIdtqpkVcq0IbtU2S8j2Q==}
    engines: {node: '>=12'}

  d3-hierarchy@3.1.2:
    resolution: {integrity: sha512-FX/9frcub54beBdugHjDCdikxThEqjnR93Qt7PvQTOHxyiNCAlvMrHhclk3cD5VeAaq9fxmfRp+CnWw9rEMBuA==}
    engines: {node: '>=12'}

  d3-interpolate@3.0.1:
    resolution: {integrity: sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==}
    engines: {node: '>=12'}

  d3-octree@1.1.0:
    resolution: {integrity: sha512-F8gPlqpP+HwRPMO/8uOu5wjH110+6q4cgJvgJT6vlpy3BEaDIKlTZrgHKZSp/i1InRpVfh4puY/kvL6MxK930A==}

  d3-path@3.1.0:
    resolution: {integrity: sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==}
    engines: {node: '>=12'}

  d3-quadtree@3.0.1:
    resolution: {integrity: sha512-04xDrxQTDTCFwP5H6hRhsRcb9xxv2RzkcsygFzmkSIOJy3PeRJP7sNk3VRIbKXcog561P9oU0/rVH6vDROAgUw==}
    engines: {node: '>=12'}

  d3-scale-chromatic@3.1.0:
    resolution: {integrity: sha512-A3s5PWiZ9YCXFye1o246KoscMWqf8BsD9eRiJ3He7C9OBaxKhAd5TFCdEx/7VbKtxxTsu//1mMJFrEt572cEyQ==}
    engines: {node: '>=12'}

  d3-shape@3.2.0:
    resolution: {integrity: sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==}
    engines: {node: '>=12'}

  d3-timer@3.0.1:
    resolution: {integrity: sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==}
    engines: {node: '>=12'}

  dagre@0.8.5:
    resolution: {integrity: sha512-/aTqmnRta7x7MCCpExk7HQL2O4owCT2h8NT//9I1OQ9vt29Pa0BzSAkR5lwFUcQ7491yVi/3CXU9jQ5o0Mn2Sw==}

  damerau-levenshtein@1.0.8:
    resolution: {integrity: sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==}

  data-view-buffer@1.0.1:
    resolution: {integrity: sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==}
    engines: {node: '>= 0.4'}

  data-view-byte-length@1.0.1:
    resolution: {integrity: sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==}
    engines: {node: '>= 0.4'}

  data-view-byte-offset@1.0.0:
    resolution: {integrity: sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==}
    engines: {node: '>= 0.4'}

  debug@3.2.7:
    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  debug@4.3.7:
    resolution: {integrity: sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decamelize@1.2.0:
    resolution: {integrity: sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==}
    engines: {node: '>=0.10.0'}

  decode-named-character-reference@1.0.2:
    resolution: {integrity: sha512-O8x12RzrUF8xyVcY0KJowWsmaJxQbmy0/EtnNtHRpsOcT7dFk5W598coHqBVpmWo1oQQfsCqfCmkZN5DJrZVdg==}

  decompress-response@6.0.0:
    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
    engines: {node: '>=10'}

  deep-equal@1.1.2:
    resolution: {integrity: sha512-5tdhKF6DbU7iIzrIOa1AOUt39ZRm13cmL1cGEh//aqR8x9+tNfbywRf0n5FD/18OKMdo7DNEtrX2t22ZAkI+eg==}
    engines: {node: '>= 0.4'}

  deep-extend@0.6.0:
    resolution: {integrity: sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==}
    engines: {node: '>=4.0.0'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  define-properties@1.2.1:
    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
    engines: {node: '>= 0.4'}

  defined@1.0.1:
    resolution: {integrity: sha512-hsBd2qSVCRE+5PmNdHt1uzyrFu5d3RwmFDKzyNZMFq/EwDNJF7Ee5+D5oEKF0hU6LhtoUF1macFvOe4AskQC1Q==}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  delegates@1.0.0:
    resolution: {integrity: sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  dequal@2.0.3:
    resolution: {integrity: sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==}
    engines: {node: '>=6'}

  detect-libc@2.0.3:
    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}
    engines: {node: '>=8'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  devlop@1.1.0:
    resolution: {integrity: sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  diff-match-patch@1.0.5:
    resolution: {integrity: sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==}

  discontinuous-range@1.0.0:
    resolution: {integrity: sha512-c68LpLbO+7kP/b1Hr1qs8/BJ09F5khZGTxqxZuhzxpmwJKOgRFHJWIb9/KmqnqHhLdO55aOxFH/EGBvUQbL/RQ==}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doctrine@2.1.0:
    resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
    engines: {node: '>=0.10.0'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  dot-case@3.0.4:
    resolution: {integrity: sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==}

  dotenv@16.4.7:
    resolution: {integrity: sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==}
    engines: {node: '>=12'}

  dotignore@0.1.2:
    resolution: {integrity: sha512-UGGGWfSauusaVJC+8fgV+NVvBXkCTmVv7sk6nojDZZvuOUNGUy0Zk4UpHQD6EDjS0jpBwcACvH4eofvyzBcRDw==}
    hasBin: true

  drizzle-kit@0.29.1:
    resolution: {integrity: sha512-OvHL8RVyYiPR3LLRE3SHdcON8xGXl+qMfR9uTTnFWBPIqVk/3NWYZPb7nfpM1Bhix3H+BsxqPyyagG7YZ+Z63A==}
    hasBin: true

  drizzle-orm@0.37.0:
    resolution: {integrity: sha512-AsCNACQ/T2CyZUkrBRUqFT2ibHJ9ZHz3+lzYJFFn3hnj7ylIeItMz5kacRG89uSE74nXYShqehr6u+6ks4JR1A==}
    peerDependencies:
      '@aws-sdk/client-rds-data': '>=3'
      '@cloudflare/workers-types': '>=4'
      '@electric-sql/pglite': '>=0.2.0'
      '@libsql/client': '>=0.10.0'
      '@libsql/client-wasm': '>=0.10.0'
      '@neondatabase/serverless': '>=0.10.0'
      '@op-engineering/op-sqlite': '>=2'
      '@opentelemetry/api': ^1.4.1
      '@planetscale/database': '>=1'
      '@prisma/client': '*'
      '@tidbcloud/serverless': '*'
      '@types/better-sqlite3': '*'
      '@types/pg': '*'
      '@types/react': '>=18'
      '@types/sql.js': '*'
      '@vercel/postgres': '>=0.8.0'
      '@xata.io/client': '*'
      better-sqlite3: '>=7'
      bun-types: '*'
      expo-sqlite: '>=14.0.0'
      knex: '*'
      kysely: '*'
      mysql2: '>=2'
      pg: '>=8'
      postgres: '>=3'
      prisma: '*'
      react: '>=18'
      sql.js: '>=1'
      sqlite3: '>=5'
    peerDependenciesMeta:
      '@aws-sdk/client-rds-data':
        optional: true
      '@cloudflare/workers-types':
        optional: true
      '@electric-sql/pglite':
        optional: true
      '@libsql/client':
        optional: true
      '@libsql/client-wasm':
        optional: true
      '@neondatabase/serverless':
        optional: true
      '@op-engineering/op-sqlite':
        optional: true
      '@opentelemetry/api':
        optional: true
      '@planetscale/database':
        optional: true
      '@prisma/client':
        optional: true
      '@tidbcloud/serverless':
        optional: true
      '@types/better-sqlite3':
        optional: true
      '@types/pg':
        optional: true
      '@types/react':
        optional: true
      '@types/sql.js':
        optional: true
      '@vercel/postgres':
        optional: true
      '@xata.io/client':
        optional: true
      better-sqlite3:
        optional: true
      bun-types:
        optional: true
      expo-sqlite:
        optional: true
      knex:
        optional: true
      kysely:
        optional: true
      mysql2:
        optional: true
      pg:
        optional: true
      postgres:
        optional: true
      prisma:
        optional: true
      react:
        optional: true
      sql.js:
        optional: true
      sqlite3:
        optional: true

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  echarts-for-react@3.0.2:
    resolution: {integrity: sha512-DRwIiTzx8JfwPOVgGttDytBqdp5VzCSyMRIxubgU/g2n9y3VLUmF2FK7Icmg/sNVkv4+rktmrLN9w22U2yy3fA==}
    peerDependencies:
      echarts: ^3.0.0 || ^4.0.0 || ^5.0.0
      react: ^15.0.0 || >=16.0.0

  echarts@5.5.1:
    resolution: {integrity: sha512-Fce8upazaAXUVUVsjgV6mBnGuqgO+JNDlcgF79Dksy4+wgGpQB2lmYoO4TSweFg/mZITdpGHomw/cNBJZj1icA==}

  electron-to-chromium@1.5.67:
    resolution: {integrity: sha512-nz88NNBsD7kQSAGGJyp8hS6xSPtWwqNogA0mjtc2nUYeEf3nURK9qpV18TuBdDmEDgVWotS8Wkzf+V52dSQ/LQ==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  emojis-list@3.0.0:
    resolution: {integrity: sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==}
    engines: {node: '>= 4'}

  encoding@0.1.13:
    resolution: {integrity: sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==}

  end-of-stream@1.4.4:
    resolution: {integrity: sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==}

  enhanced-resolve@5.17.1:
    resolution: {integrity: sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==}
    engines: {node: '>=10.13.0'}

  env-paths@2.2.1:
    resolution: {integrity: sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==}
    engines: {node: '>=6'}

  err-code@2.0.3:
    resolution: {integrity: sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==}

  error-stack-parser@2.1.4:
    resolution: {integrity: sha512-Sk5V6wVazPhq5MhpO+AUxJn5x7XSXGl1R93Vn7i+zS15KDVxQijejNCrz8340/2bgLBjR9GtEG8ZVKONDjcqGQ==}

  es-abstract@1.23.5:
    resolution: {integrity: sha512-vlmniQ0WNPwXqA0BnmwV3Ng7HxiGlh6r5U6JcTMNx8OilcAGqVJBHJcPjqOMaczU9fRuRK5Px2BdVyPRnKMMVQ==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.0:
    resolution: {integrity: sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==}
    engines: {node: '>= 0.4'}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-iterator-helpers@1.2.0:
    resolution: {integrity: sha512-tpxqxncxnpw3c93u8n3VOzACmRFoVmWJqbWXvX/JfKbkhBw1oslgPrUfeSt2psuqyEJFD6N/9lg5i7bsKpoq+Q==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.6.0:
    resolution: {integrity: sha512-qqnD1yMU6tk/jnaMosogGySTZP8YtUgAffA9nMN+E/rjxcfRQ6IEk7IiozUjgxKoFHBGjTLnrHB/YC45r/59EQ==}

  es-object-atoms@1.0.0:
    resolution: {integrity: sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.0.3:
    resolution: {integrity: sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==}
    engines: {node: '>= 0.4'}

  es-shim-unscopables@1.0.2:
    resolution: {integrity: sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==}

  es-to-primitive@1.3.0:
    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
    engines: {node: '>= 0.4'}

  es-toolkit@1.29.0:
    resolution: {integrity: sha512-GjTll+E6APcfAQA09D89HdT8Qn2Yb+TeDSDBTMcxAo+V+w1amAtCI15LJu4YPH/UCPoSo/F47Gr1LIM0TE0lZA==}

  esbuild-register@3.6.0:
    resolution: {integrity: sha512-H2/S7Pm8a9CL1uhp9OvjwrBh5Pvx0H8qVOxNu8Wed9Y7qv56MPtq+GGM8RJpq6glYJn9Wspr8uw7l55uyinNeg==}
    peerDependencies:
      esbuild: '>=0.12 <1'

  esbuild@0.18.20:
    resolution: {integrity: sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.19.12:
    resolution: {integrity: sha512-aARqgq8roFBj054KvQr5f1sFu0D65G+miZRCuJyJ0G13Zwx7vRar5Zhn2tkQNzIXcBrNVsv/8stehpj+GAjgbg==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.23.1:
    resolution: {integrity: sha512-VVNz/9Sa0bs5SELtn3f7qhJCDPCF5oMEl5cO9/SSinpE9hbPVvxbd572HH5AKiP7WD8INO53GgfDDhRjkylHEg==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-next@15.0.3:
    resolution: {integrity: sha512-IGP2DdQQrgjcr4mwFPve4DrCqo7CVVez1WoYY47XwKSrYO4hC0Dlb+iJA60i0YfICOzgNADIb8r28BpQ5Zs0wg==}
    peerDependencies:
      eslint: ^7.23.0 || ^8.0.0 || ^9.0.0
      typescript: '>=3.3.1'
    peerDependenciesMeta:
      typescript:
        optional: true

  eslint-import-resolver-node@0.3.9:
    resolution: {integrity: sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==}

  eslint-import-resolver-typescript@3.6.3:
    resolution: {integrity: sha512-ud9aw4szY9cCT1EWWdGv1L1XR6hh2PaRWif0j2QjQ0pgTY/69iw+W0Z4qZv5wHahOl8isEr+k/JnyAqNQkLkIA==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      eslint: '*'
      eslint-plugin-import: '*'
      eslint-plugin-import-x: '*'
    peerDependenciesMeta:
      eslint-plugin-import:
        optional: true
      eslint-plugin-import-x:
        optional: true

  eslint-module-utils@2.12.0:
    resolution: {integrity: sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: '*'
      eslint-import-resolver-node: '*'
      eslint-import-resolver-typescript: '*'
      eslint-import-resolver-webpack: '*'
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true
      eslint:
        optional: true
      eslint-import-resolver-node:
        optional: true
      eslint-import-resolver-typescript:
        optional: true
      eslint-import-resolver-webpack:
        optional: true

  eslint-plugin-import@2.31.0:
    resolution: {integrity: sha512-ixmkI62Rbc2/w8Vfxyh1jQRTdRTF52VxwRVHl/ykPAmqG+Nb7/kNn+byLP0LxPgI7zWA16Jt82SybJInmMia3A==}
    engines: {node: '>=4'}
    peerDependencies:
      '@typescript-eslint/parser': '*'
      eslint: ^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9
    peerDependenciesMeta:
      '@typescript-eslint/parser':
        optional: true

  eslint-plugin-jsx-a11y@6.10.2:
    resolution: {integrity: sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==}
    engines: {node: '>=4.0'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9

  eslint-plugin-react-hooks@5.0.0:
    resolution: {integrity: sha512-hIOwI+5hYGpJEc4uPRmz2ulCjAGD/N13Lukkh8cLV0i2IRk/bdZDYjgLVHj+U9Z704kLIdIO6iueGvxNur0sgw==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0

  eslint-plugin-react@7.37.2:
    resolution: {integrity: sha512-EsTAnj9fLVr/GZleBLFbj/sSuXeWmp1eXIN60ceYnZveqEaUCyW4X+Vh4WTdUhCkW4xutXYqTXCUSyqD4rB75w==}
    engines: {node: '>=4'}
    peerDependencies:
      eslint: ^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7

  eslint-scope@5.1.1:
    resolution: {integrity: sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==}
    engines: {node: '>=8.0.0'}

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.0:
    resolution: {integrity: sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@8.57.1:
    resolution: {integrity: sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    deprecated: This version is no longer supported. Please see https://eslint.org/version-support for other options.
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@4.3.0:
    resolution: {integrity: sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-util-is-identifier-name@3.0.0:
    resolution: {integrity: sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventemitter3@5.0.1:
    resolution: {integrity: sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==}

  events@3.3.0:
    resolution: {integrity: sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==}
    engines: {node: '>=0.8.x'}

  eventsource-parser@3.0.0:
    resolution: {integrity: sha512-T1C0XCUimhxVQzW4zFipdx0SficT651NnkR0ZSH3yQwh+mFMdLfgjABVi4YtMTtaL4s168593DaoaRLMqryavA==}
    engines: {node: '>=18.0.0'}

  expand-template@2.0.3:
    resolution: {integrity: sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==}
    engines: {node: '>=6'}

  extend@3.0.2:
    resolution: {integrity: sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==}

  ezheaders@0.1.0:
    resolution: {integrity: sha512-U0wdCs2dS+IzFuxyHGyw1aWhiunW22sGqnyH4yQsovkgqUvO4YSbzQ5BQzV6HY4oFlNnK+TbFGJj8rvvX5aN7w==}
    peerDependencies:
      next: ^13.5.4 || ^14 || ^15

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-equals@4.0.3:
    resolution: {integrity: sha512-G3BSX9cfKttjr+2o1O22tYMLq0DPluZnYtq1rXumE1SpL/F/SLIfHx08WYQoWSIpeMYf8sRbJ8++71+v6Pnxfg==}

  fast-glob@3.3.1:
    resolution: {integrity: sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==}
    engines: {node: '>=8.6.0'}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fast-shallow-equal@1.0.0:
    resolution: {integrity: sha512-HPtaa38cPgWvaCFmRNhlc6NG7pv6NUHqjPgVAkWGoB9mQMwYB27/K0CvOM5Czy+qpT3e8XJ6Q4aPAnzpNpzNaw==}

  fast-uri@3.0.5:
    resolution: {integrity: sha512-5JnBCWpFlMo0a3ciDy/JckMzzv1U9coZrIhedq+HXxxUfDTAiS0LA8OKVao4G9BxmCVck/jtA5r3KAtRWEyD8Q==}

  fastest-stable-stringify@2.0.2:
    resolution: {integrity: sha512-bijHueCGd0LqqNK9b5oCMHc0MluJAx0cwqASgbWMvkO01lCYgIhacVRLcaDz3QnyYIRNJRDwMb41VuT6pHJ91Q==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fecha@4.2.3:
    resolution: {integrity: sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  file-selector@2.1.2:
    resolution: {integrity: sha512-QgXo+mXTe8ljeqUFaX3QVHc5osSItJ/Km+xpocx0aSqWGMSCf6qYs/VnzZgS864Pjn5iceMRFigeAV7AfTlaig==}
    engines: {node: '>= 12'}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.2:
    resolution: {integrity: sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==}

  flru@1.0.2:
    resolution: {integrity: sha512-kWyh8ADvHBFz6ua5xYOPnUroZTT/bwWfrCeL0Wj1dzG4/YOmOcfJ99W8dOVyyynJN35rZ9aCOtHChqQovV7yog==}
    engines: {node: '>=6'}

  fmin@0.0.2:
    resolution: {integrity: sha512-sSi6DzInhl9d8yqssDfGZejChO8d2bAGIpysPsvYsxFe898z89XhCZg6CPNV3nhUhFefeC/AXZK2bAJxlBjN6A==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.3:
    resolution: {integrity: sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==}

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  form-data-encoder@1.7.2:
    resolution: {integrity: sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==}

  form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}

  formdata-node@4.4.1:
    resolution: {integrity: sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==}
    engines: {node: '>= 12.20'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  framer-motion@11.12.0:
    resolution: {integrity: sha512-gZaZeqFM6pX9kMVti60hYAa75jGpSsGYWAHbBfIkuHN7DkVHVkxSxeNYnrGmHuM0zPkWTzQx10ZT+fDjn7N4SA==}
    peerDependencies:
      '@emotion/is-prop-valid': '*'
      react: ^18.0.0
      react-dom: ^18.0.0
    peerDependenciesMeta:
      '@emotion/is-prop-valid':
        optional: true
      react:
        optional: true
      react-dom:
        optional: true

  fs-constants@1.0.0:
    resolution: {integrity: sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==}

  fs-minipass@2.1.0:
    resolution: {integrity: sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==}
    engines: {node: '>= 8'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  function.prototype.name@1.1.6:
    resolution: {integrity: sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==}
    engines: {node: '>= 0.4'}

  functions-have-names@1.2.3:
    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}

  gauge@4.0.4:
    resolution: {integrity: sha512-f9m+BEN5jkg6a0fZjleidjN51VE1X+mPFQ2DJ0uv1V39oCLCbsGe6yjbBnp7eK7z/+GAon99a3nHuqbuuthyPg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}
    deprecated: This package is no longer supported.

  generate-function@2.3.1:
    resolution: {integrity: sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==}

  get-intrinsic@1.2.4:
    resolution: {integrity: sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==}
    engines: {node: '>= 0.4'}

  get-intrinsic@1.2.7:
    resolution: {integrity: sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==}
    engines: {node: '>= 0.4'}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-stdin@8.0.0:
    resolution: {integrity: sha512-sY22aA6xchAzprjyqmSEQv4UbAAzRN0L2dQB0NlN5acTTK9Don6nhoc3eAbUnpZiCANAMfd/+40kVdKfFygohg==}
    engines: {node: '>=10'}

  get-symbol-description@1.0.2:
    resolution: {integrity: sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.8.1:
    resolution: {integrity: sha512-k9PN+cFBmaLWtVz29SkUoqU5O0slLuHJXt/2P+tMVFT+phsSGXGkp9t3rQIqdz0e+06EHNGs3oM6ZX1s2zHxRg==}

  github-from-package@0.0.0:
    resolution: {integrity: sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==}

  gl-matrix@3.4.3:
    resolution: {integrity: sha512-wcCp8vu8FT22BnvKVPjXa/ICBWRq/zjFfdofZy1WSpQZpphblv12/bOQLBC1rMM7SGOFS9ltVmKOHil5+Ml7gA==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob-to-regexp@0.4.1:
    resolution: {integrity: sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globals@15.12.0:
    resolution: {integrity: sha512-1+gLErljJFhbOVyaetcwJiJ4+eLe45S2E7P5UiZ9xGfeq3ATQf5DOv9G7MH3gGbKQLkzmNh2DxfZwLdw+j6oTQ==}
    engines: {node: '>=18'}

  globalthis@1.0.4:
    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
    engines: {node: '>= 0.4'}

  gopd@1.0.1:
    resolution: {integrity: sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  graphlib@2.1.8:
    resolution: {integrity: sha512-jcLLfkpoVGmH7/InMC/1hIvOPSUh38oJtGhvrOFGzioE1DZ+0YW16RgmOJhHiuWTvGiJQ9Z1Ik43JvkRPRvE+A==}

  has-ansi@2.0.0:
    resolution: {integrity: sha512-C8vBJ8DwUCx19vhm7urhTuUsr4/IyP6l4VzNQDv+ryHQObW3TTTp9yB68WpYgRe2bbaGuZ/se74IqFeVnMnLZg==}
    engines: {node: '>=0.10.0'}

  has-bigints@1.0.2:
    resolution: {integrity: sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-proto@1.0.3:
    resolution: {integrity: sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==}
    engines: {node: '>= 0.4'}

  has-symbols@1.0.3:
    resolution: {integrity: sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  has-unicode@2.0.1:
    resolution: {integrity: sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==}

  has@1.0.4:
    resolution: {integrity: sha512-qdSAmqLF6209RFj4VVItywPMbm3vWylknmB3nvNiUIs72xAimcM8nVYxYr7ncvZq5qzk9MKIZR8ijqD/1QuYjQ==}
    engines: {node: '>= 0.4.0'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hast-util-to-jsx-runtime@2.3.2:
    resolution: {integrity: sha512-1ngXYb+V9UT5h+PxNRa1O1FYguZK/XL+gkeqvp7EdHlB9oHUG0eYRo/vY5inBdcqo3RkPMC58/H94HvkbfGdyg==}

  hast-util-whitespace@3.0.0:
    resolution: {integrity: sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==}

  html-url-attributes@3.0.1:
    resolution: {integrity: sha512-ol6UPyBWqsrO6EJySPz2O7ZSr856WDrEzM5zMqp+FJJLGMW35cLYmmZnl0vztAZxRUoNZJFTCohfjuIJ8I4QBQ==}

  html2canvas@1.4.1:
    resolution: {integrity: sha512-fPU6BHNpsyIhr8yyMpTLLxAbkaK8ArIBcmZIRiBLiDhjeqvXolaEmDGmELFuX9I4xDcaKKcJl+TKZLqruBbmWA==}
    engines: {node: '>=8.0.0'}

  http-cache-semantics@4.1.1:
    resolution: {integrity: sha512-er295DKPVsV82j5kw1Gjt+ADA/XYHsajl82cGNQG2eyoPkvgUhX+nDIyelzhIWbbsXP39EHcI6l5tYs2FYqYXQ==}

  http-proxy-agent@4.0.1:
    resolution: {integrity: sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==}
    engines: {node: '>= 6'}

  https-proxy-agent@5.0.1:
    resolution: {integrity: sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==}
    engines: {node: '>= 6'}

  hull.js@1.0.6:
    resolution: {integrity: sha512-TC7e9sHYOaCVms0sn2hN7buxnaGfcl9h5EPVoVX9DTPoMpqQiS9bf3tmGDgiNaMVHBD91RAvWjCxrJ5Jx8BI5A==}
    deprecated: 'This package is no longer published on npmjs.com, you are using a deprecated and vulnerable version. Do not use it! Check project homepage on GitHub to see how to fetch the latest version: https://github.com/andriiheonia/hull?tab=readme-ov-file#npm-package'

  humanize-ms@1.2.1:
    resolution: {integrity: sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==}

  hyphenate-style-name@1.1.0:
    resolution: {integrity: sha512-WDC/ui2VVRrz3jOVi+XtjqkDjiVjTtFaAGiW37k6b+ohyQ5wYDOGkvCZa8+H0nx3gyvv0+BST9xuOgIyGQ00gw==}

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  immutable@4.3.7:
    resolution: {integrity: sha512-1hqclzwYwjRDFLjcFxOM5AYkkG0rpFPpr1RLPMEuGczoS7YA8gLhy8SWXYRAA/XwfEHpfo3cw5JGioS32fnMRw==}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  indent-string@4.0.0:
    resolution: {integrity: sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==}
    engines: {node: '>=8'}

  infer-owner@1.0.4:
    resolution: {integrity: sha512-IClj+Xz94+d7irH5qRyfJonOdfTzuDaifE6ZPWfx0N0+/ATZCbuTPq2prFl526urkQd90WyUKIh1DfBQ2hMz9A==}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  inline-style-parser@0.2.4:
    resolution: {integrity: sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q==}

  inline-style-prefixer@7.0.1:
    resolution: {integrity: sha512-lhYo5qNTQp3EvSSp3sRvXMbVQTLrvGV6DycRMJ5dm2BLMiJ30wpXKdDdgX+GmJZ5uQMucwRKHamXSst3Sj/Giw==}

  internal-slot@1.0.7:
    resolution: {integrity: sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==}
    engines: {node: '>= 0.4'}

  internmap@2.0.3:
    resolution: {integrity: sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==}
    engines: {node: '>=12'}

  invariant@2.2.4:
    resolution: {integrity: sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==}

  ioredis@5.4.1:
    resolution: {integrity: sha512-2YZsvl7jopIa1gaePkeMtd9rAcSjOOjPtpcLlOeusyO+XH2SK5ZcT+UCrElPP+WVIInh2TzeI4XW9ENaSLVVHA==}
    engines: {node: '>=12.22.0'}

  ip-address@9.0.5:
    resolution: {integrity: sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==}
    engines: {node: '>= 12'}

  is-alphabetical@2.0.1:
    resolution: {integrity: sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==}

  is-alphanumerical@2.0.1:
    resolution: {integrity: sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==}

  is-any-array@2.0.1:
    resolution: {integrity: sha512-UtilS7hLRu++wb/WBAw9bNuP1Eg04Ivn1vERJck8zJthEvXCBEBpGR/33u/xLKWEQf95803oalHrVDptcAvFdQ==}

  is-arguments@1.2.0:
    resolution: {integrity: sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==}
    engines: {node: '>= 0.4'}

  is-array-buffer@3.0.4:
    resolution: {integrity: sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-async-function@2.0.0:
    resolution: {integrity: sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==}
    engines: {node: '>= 0.4'}

  is-bigint@1.0.4:
    resolution: {integrity: sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-boolean-object@1.1.2:
    resolution: {integrity: sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==}
    engines: {node: '>= 0.4'}

  is-buffer@1.1.6:
    resolution: {integrity: sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==}

  is-bun-module@1.3.0:
    resolution: {integrity: sha512-DgXeu5UWI0IsMQundYb5UAOzm6G2eVnarJ0byP6Tm55iZNKceD59LNPA2L4VvsScTtHcw0yEkVwSf7PC+QoLSA==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-core-module@2.15.1:
    resolution: {integrity: sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==}
    engines: {node: '>= 0.4'}

  is-data-view@1.0.1:
    resolution: {integrity: sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==}
    engines: {node: '>= 0.4'}

  is-date-object@1.0.5:
    resolution: {integrity: sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==}
    engines: {node: '>= 0.4'}

  is-decimal@2.0.1:
    resolution: {integrity: sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-finalizationregistry@1.1.0:
    resolution: {integrity: sha512-qfMdqbAQEwBw78ZyReKnlA8ezmPdb9BemzIIip/JkjaZUhitfXDkkr+3QTboW0JrSXT1QWyYShpvnNHGZ4c4yA==}
    engines: {node: '>= 0.4'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.0.10:
    resolution: {integrity: sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-hexadecimal@2.0.1:
    resolution: {integrity: sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==}

  is-lambda@1.0.1:
    resolution: {integrity: sha512-z7CMFGNrENq5iFB9Bqo64Xk6Y9sg+epq1myIcdHaGnbMTYOxvzsEtdYqQUylB7LxfkvgrrjP32T6Ywciio9UIQ==}

  is-map@2.0.3:
    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
    engines: {node: '>= 0.4'}

  is-negative-zero@2.0.3:
    resolution: {integrity: sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==}
    engines: {node: '>= 0.4'}

  is-number-object@1.0.7:
    resolution: {integrity: sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==}
    engines: {node: '>= 0.4'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-plain-obj@4.1.0:
    resolution: {integrity: sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==}
    engines: {node: '>=12'}

  is-property@1.0.2:
    resolution: {integrity: sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==}

  is-regex@1.1.4:
    resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}
    engines: {node: '>= 0.4'}

  is-set@2.0.3:
    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
    engines: {node: '>= 0.4'}

  is-shared-array-buffer@1.0.3:
    resolution: {integrity: sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==}
    engines: {node: '>= 0.4'}

  is-string@1.0.7:
    resolution: {integrity: sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==}
    engines: {node: '>= 0.4'}

  is-symbol@1.0.4:
    resolution: {integrity: sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==}
    engines: {node: '>= 0.4'}

  is-typed-array@1.1.13:
    resolution: {integrity: sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==}
    engines: {node: '>= 0.4'}

  is-weakmap@2.0.2:
    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
    engines: {node: '>= 0.4'}

  is-weakref@1.0.2:
    resolution: {integrity: sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==}

  is-weakset@2.0.3:
    resolution: {integrity: sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==}
    engines: {node: '>= 0.4'}

  isarray@2.0.5:
    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  iterator.prototype@1.1.3:
    resolution: {integrity: sha512-FW5iMbeQ6rBGm/oKgzq2aW4KvAGpxPzYES8N4g4xNXUKpL1mclMvOe+76AcLDTvD+Ze+sOpVhgdAQEKF4L9iGQ==}
    engines: {node: '>= 0.4'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jest-worker@27.5.1:
    resolution: {integrity: sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==}
    engines: {node: '>= 10.13.0'}

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  jose@5.9.6:
    resolution: {integrity: sha512-AMlnetc9+CV9asI19zHmrgS/WYsWUwCn2R7RzlbJWD7F9eWYUTGyBmU9o6PxngtLGOiDGPRu+Uc4fhKzbpteZQ==}

  js-cookie@2.2.1:
    resolution: {integrity: sha512-HvdH2LzI/EAZcUwA8+0nKNtWHqS+ZmijLA30RwZA0bo7ToCckjK5MkGhjED9KoRcXO6BaGI3I9UIzSA1FKFPOQ==}

  js-cookie@3.0.5:
    resolution: {integrity: sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==}
    engines: {node: '>=14'}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsbn@1.1.0:
    resolution: {integrity: sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==}

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema-traverse@1.0.0:
    resolution: {integrity: sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==}

  json-schema@0.4.0:
    resolution: {integrity: sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json2module@0.0.3:
    resolution: {integrity: sha512-qYGxqrRrt4GbB8IEOy1jJGypkNsjWoIMlZt4bAsmUScCA507Hbc2p1JOhBzqn45u3PWafUgH2OnzyNU7udO/GA==}
    hasBin: true

  json5@1.0.2:
    resolution: {integrity: sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  jsondiffpatch@0.6.0:
    resolution: {integrity: sha512-3QItJOXp2AP1uv7waBkao5nCvhEv+QmJAd38Ybq7wNI74Q+BBmnLn4EDKz6yI9xGAIQoUF87qHt+kc1IVxB4zQ==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true

  jsx-ast-utils@3.3.5:
    resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
    engines: {node: '>=4.0'}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kind-of@3.2.2:
    resolution: {integrity: sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==}
    engines: {node: '>=0.10.0'}

  language-subtag-registry@0.3.23:
    resolution: {integrity: sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==}

  language-tags@1.0.9:
    resolution: {integrity: sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==}
    engines: {node: '>=0.10'}

  lazy-cache@1.0.4:
    resolution: {integrity: sha512-RE2g0b5VGZsOCFOCgP7omTRYFqydmZkBwl5oNnQ1lDYC57uyO9KqNnNVxT7COSHTxrRCWVcAVOcbjk+tvh/rgQ==}
    engines: {node: '>=0.10.0'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@2.1.0:
    resolution: {integrity: sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==}
    engines: {node: '>=10'}

  lilconfig@3.1.2:
    resolution: {integrity: sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  loader-runner@4.3.0:
    resolution: {integrity: sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==}
    engines: {node: '>=6.11.5'}

  loader-utils@2.0.4:
    resolution: {integrity: sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==}
    engines: {node: '>=8.9.0'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.defaults@4.2.0:
    resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}

  lodash.isarguments@3.1.0:
    resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  long@5.2.3:
    resolution: {integrity: sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==}

  longest-streak@3.1.0:
    resolution: {integrity: sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==}

  longest@1.0.1:
    resolution: {integrity: sha512-k+yt5n3l48JU4k8ftnKG6V7u32wyH2NfKzeMto9F/QRE0amxy/LayxwlvjjkZEIzqR+19IrtFO8p5kB9QaYUFg==}
    engines: {node: '>=0.10.0'}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lower-case@2.0.2:
    resolution: {integrity: sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@6.0.0:
    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
    engines: {node: '>=10'}

  lru-cache@7.18.3:
    resolution: {integrity: sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==}
    engines: {node: '>=12'}

  lru.min@1.1.1:
    resolution: {integrity: sha512-FbAj6lXil6t8z4z3j0E5mfRlPzxkySotzUHwRXjlpRh10vc6AI6WN62ehZj82VG7M20rqogJ0GLwar2Xa05a8Q==}
    engines: {bun: '>=1.0.0', deno: '>=1.30.0', node: '>=8.0.0'}

  lucide-react@0.462.0:
    resolution: {integrity: sha512-NTL7EbAao9IFtuSivSZgrAh4fZd09Lr+6MTkqIxuHaH2nnYiYIzXPo06cOxHg9wKLdj6LL8TByG4qpePqwgx/g==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0-rc

  luxon@3.5.0:
    resolution: {integrity: sha512-rh+Zjr6DNfUYR3bPwJEnuwDdqMbxZW7LOQfUN4B54+Cl+0o5zaU9RJ6bcidfDtC1cWCZXQ+nvX8bf6bAji37QQ==}
    engines: {node: '>=12'}

  make-fetch-happen@9.1.0:
    resolution: {integrity: sha512-+zopwDy7DNknmwPQplem5lAZX/eCOzSvSNNcSKm5eVwTkOBzoktEfXsa9L23J/GIRhxRsaxzkPEhrJEpE2F4Gg==}
    engines: {node: '>= 10'}

  map-obj@4.3.0:
    resolution: {integrity: sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==}
    engines: {node: '>=8'}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  mdast-util-from-markdown@2.0.2:
    resolution: {integrity: sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==}

  mdast-util-mdx-expression@2.0.1:
    resolution: {integrity: sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==}

  mdast-util-mdx-jsx@3.1.3:
    resolution: {integrity: sha512-bfOjvNt+1AcbPLTFMFWY149nJz0OjmewJs3LQQ5pIyVGxP4CdOqNVJL6kTaM5c68p8q82Xv3nCyFfUnuEcH3UQ==}

  mdast-util-mdxjs-esm@2.0.1:
    resolution: {integrity: sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==}

  mdast-util-phrasing@4.1.0:
    resolution: {integrity: sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==}

  mdast-util-to-hast@13.2.0:
    resolution: {integrity: sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==}

  mdast-util-to-markdown@2.1.2:
    resolution: {integrity: sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==}

  mdast-util-to-string@4.0.0:
    resolution: {integrity: sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==}

  mdn-data@2.0.14:
    resolution: {integrity: sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromark-core-commonmark@2.0.2:
    resolution: {integrity: sha512-FKjQKbxd1cibWMM1P9N+H8TwlgGgSkWZMmfuVucLCHaYqeSvJ0hFeHsIa65pA2nYbes0f8LDHPMrd9X7Ujxg9w==}

  micromark-factory-destination@2.0.1:
    resolution: {integrity: sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==}

  micromark-factory-label@2.0.1:
    resolution: {integrity: sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==}

  micromark-factory-space@2.0.1:
    resolution: {integrity: sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==}

  micromark-factory-title@2.0.1:
    resolution: {integrity: sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==}

  micromark-factory-whitespace@2.0.1:
    resolution: {integrity: sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==}

  micromark-util-character@2.1.1:
    resolution: {integrity: sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==}

  micromark-util-chunked@2.0.1:
    resolution: {integrity: sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==}

  micromark-util-classify-character@2.0.1:
    resolution: {integrity: sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==}

  micromark-util-combine-extensions@2.0.1:
    resolution: {integrity: sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==}

  micromark-util-decode-numeric-character-reference@2.0.2:
    resolution: {integrity: sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==}

  micromark-util-decode-string@2.0.1:
    resolution: {integrity: sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==}

  micromark-util-encode@2.0.1:
    resolution: {integrity: sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==}

  micromark-util-html-tag-name@2.0.1:
    resolution: {integrity: sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==}

  micromark-util-normalize-identifier@2.0.1:
    resolution: {integrity: sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==}

  micromark-util-resolve-all@2.0.1:
    resolution: {integrity: sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==}

  micromark-util-sanitize-uri@2.0.1:
    resolution: {integrity: sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==}

  micromark-util-subtokenize@2.0.3:
    resolution: {integrity: sha512-VXJJuNxYWSoYL6AJ6OQECCFGhIU2GGHMw8tahogePBrjkG8aCCas3ibkp7RnVOSTClg2is05/R7maAhF1XyQMg==}

  micromark-util-symbol@2.0.1:
    resolution: {integrity: sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==}

  micromark-util-types@2.0.1:
    resolution: {integrity: sha512-534m2WhVTddrcKVepwmVEVnUAmtrx9bfIjNoQHRqfnvdaHQiFytEhJoTgpWJvDEXCO5gLTQh3wYC1PgOJA4NSQ==}

  micromark@4.0.1:
    resolution: {integrity: sha512-eBPdkcoCNvYcxQOAKAlceo5SNdzZWfF+FcSupREAzdAh9rRmE239CEQAiTwIgblwnoM8zzj35sZ5ZwvSEOF6Kw==}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mimic-response@3.1.0:
    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
    engines: {node: '>=10'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass-collect@1.0.2:
    resolution: {integrity: sha512-6T6lH0H8OG9kITm/Jm6tdooIbogG9e0tLgpY6mphXSm/A9u8Nq1ryBG+Qspiub9LjWlBPsPS3tWQ/Botq4FdxA==}
    engines: {node: '>= 8'}

  minipass-fetch@1.4.1:
    resolution: {integrity: sha512-CGH1eblLq26Y15+Azk7ey4xh0J/XfJfrCox5LDJiKqI2Q2iwOLOKrlmIaODiSQS8d18jalF6y2K2ePUm0CmShw==}
    engines: {node: '>=8'}

  minipass-flush@1.0.5:
    resolution: {integrity: sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==}
    engines: {node: '>= 8'}

  minipass-pipeline@1.2.4:
    resolution: {integrity: sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==}
    engines: {node: '>=8'}

  minipass-sized@1.0.3:
    resolution: {integrity: sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==}
    engines: {node: '>=8'}

  minipass@3.3.6:
    resolution: {integrity: sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==}
    engines: {node: '>=8'}

  minipass@5.0.0:
    resolution: {integrity: sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==}
    engines: {node: '>=8'}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  minizlib@2.1.2:
    resolution: {integrity: sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==}
    engines: {node: '>= 8'}

  mkdirp-classic@0.5.3:
    resolution: {integrity: sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==}

  mkdirp@1.0.4:
    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}
    engines: {node: '>=10'}
    hasBin: true

  ml-array-max@1.2.4:
    resolution: {integrity: sha512-BlEeg80jI0tW6WaPyGxf5Sa4sqvcyY6lbSn5Vcv44lp1I2GR6AWojfUvLnGTNsIXrZ8uqWmo8VcG1WpkI2ONMQ==}

  ml-array-min@1.2.3:
    resolution: {integrity: sha512-VcZ5f3VZ1iihtrGvgfh/q0XlMobG6GQ8FsNyQXD3T+IlstDv85g8kfV0xUG1QPRO/t21aukaJowDzMTc7j5V6Q==}

  ml-array-rescale@1.3.7:
    resolution: {integrity: sha512-48NGChTouvEo9KBctDfHC3udWnQKNKEWN0ziELvY3KG25GR5cA8K8wNVzracsqSW1QEkAXjTNx+ycgAv06/1mQ==}

  ml-matrix@6.12.0:
    resolution: {integrity: sha512-AGfR+pWaC0GmzjUnB6BfwhndPEUGz0i7QUYdqNuw1zhTov/vSRJ9pP2hs6BoGpaSbtXgrKjZz2zjD1M0xuur6A==}

  mock-property@1.0.3:
    resolution: {integrity: sha512-2emPTb1reeLLYwHxyVx993iYyCHEiRRO+y8NFXFPL5kl5q14sgTK76cXyEKkeKCHeRw35SfdkUJ10Q1KfHuiIQ==}
    engines: {node: '>= 0.4'}

  monaco-editor@0.52.0:
    resolution: {integrity: sha512-OeWhNpABLCeTqubfqLMXGsqf6OmPU6pHM85kF3dhy6kq5hnhuVS1p3VrEW/XhWHc71P2tHyS5JFySD8mgs1crw==}

  moo@0.5.2:
    resolution: {integrity: sha512-iSAJLHYKnX41mKcJKjqvnAN9sf0LMDTXDEvFv+ffuRR9a1MIuXLjMNL6EsnDHSkKLTWNqQQ5uo61P4EbU4NU+Q==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  msgpackr-extract@3.0.3:
    resolution: {integrity: sha512-P0efT1C9jIdVRefqjzOQ9Xml57zpOXnIuS+csaB4MdZbTdmGDLo8XhzBG1N7aO11gKDDkJvBLULeFTo46wwreA==}
    hasBin: true

  msgpackr@1.11.2:
    resolution: {integrity: sha512-F9UngXRlPyWCDEASDpTf6c9uNhGPTqnTeLVt7bN+bU1eajoR/8V9ys2BRaV5C/e5ihE6sJ9uPIKaYt6bFuO32g==}

  mysql2@3.11.5:
    resolution: {integrity: sha512-0XFu8rUmFN9vC0ME36iBvCUObftiMHItrYFhlCRvFWbLgpNqtC4Br/NmZX1HNCszxT0GGy5QtP+k3Q3eCJPaYA==}
    engines: {node: '>= 8.0'}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  named-placeholders@1.1.3:
    resolution: {integrity: sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==}
    engines: {node: '>=12.0.0'}

  nano-css@5.6.2:
    resolution: {integrity: sha512-+6bHaC8dSDGALM1HJjOHVXpuastdu2xFoZlC77Jh4cg+33Zcgm+Gxd+1xsnpZK14eyHObSp82+ll5y3SX75liw==}
    peerDependencies:
      react: '*'
      react-dom: '*'

  nanoid@3.3.8:
    resolution: {integrity: sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  napi-build-utils@1.0.2:
    resolution: {integrity: sha512-ONmRUqK7zj7DWX0D9ADe03wbwOBZxNAfF20PlGfCWQcD3+/MakShIHrMqx9YwPTfxDdF1zLeL+RGZiR9kGMLdg==}

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  nearley@2.20.1:
    resolution: {integrity: sha512-+Mc8UaAebFzgV+KpI5n7DasuuQCHA89dmwm7JXw3TV43ukfNQ9DnBH3Mdb2g/I4Fdxc26pwimBWvjIw0UAILSQ==}
    hasBin: true

  negotiator@0.6.4:
    resolution: {integrity: sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==}
    engines: {node: '>= 0.6'}

  neo-async@2.6.2:
    resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}

  next@15.0.3:
    resolution: {integrity: sha512-ontCbCRKJUIoivAdGB34yCaOcPgYXr9AAkV/IwqFfWWTXEPUgLYkSkqBhIk9KK7gGmgjc64B+RdoeIDM13Irnw==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: ^18.2.0 || 19.0.0-rc-66855b96-20241106
      react-dom: ^18.2.0 || 19.0.0-rc-66855b96-20241106
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  no-case@3.0.4:
    resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}

  node-abi@3.71.0:
    resolution: {integrity: sha512-SZ40vRiy/+wRTf21hxkkEjPJZpARzUMVcJoQse2EF8qkUWbbO2z7vd5oA/H6bVH6SZQ5STGcu0KRDS7biNRfxw==}
    engines: {node: '>=10'}

  node-abort-controller@3.1.1:
    resolution: {integrity: sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ==}

  node-addon-api@7.1.1:
    resolution: {integrity: sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==}

  node-domexception@1.0.0:
    resolution: {integrity: sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==}
    engines: {node: '>=10.5.0'}

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-gyp-build-optional-packages@5.2.2:
    resolution: {integrity: sha512-s+w+rBWnpTMwSFbaE0UXsRlg7hU4FjekKU4eyAih5T8nJuNZT1nNsskXpxmeqSK9UzkBl6UgRlnKc8hz8IEqOw==}
    hasBin: true

  node-gyp@8.4.1:
    resolution: {integrity: sha512-olTJRgUtAb/hOXG0E93wZDs5YiJlgbXxTwQAFHyNlRsXQnYzUaF2aGgujZbw+hR8aF4ZG/rST57bWMWD16jr9w==}
    engines: {node: '>= 10.12.0'}
    hasBin: true

  node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}

  nopt@5.0.0:
    resolution: {integrity: sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==}
    engines: {node: '>=6'}
    hasBin: true

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  npmlog@6.0.2:
    resolution: {integrity: sha512-/vBvz5Jfr9dT/aFWd0FIRf+T/Q2WBsLENygUaFUqstqsycmZAP/t5BvFJTK0viFmSUxiUKTUplWy5vt+rvKIxg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}
    deprecated: This package is no longer supported.

  oauth4webapi@3.1.3:
    resolution: {integrity: sha512-dik5wEMdFL5p3JlijYvM7wMNCgaPhblLIDCZtdXcaZp5wgu5Iwmsu7lMzgFhIDTi5d0BJo03LVoOoFQvXMeOeQ==}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  object-inspect@1.12.3:
    resolution: {integrity: sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==}

  object-inspect@1.13.3:
    resolution: {integrity: sha512-kDCGIbxkDSXE3euJZZXzc6to7fCrKHNI/hSRQnRuQ+BWjFNzZwiFF8fj/6o2t2G9/jTj8PSIYTfCLelLZEeRpA==}
    engines: {node: '>= 0.4'}

  object-is@1.1.6:
    resolution: {integrity: sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==}
    engines: {node: '>= 0.4'}

  object-keys@1.1.1:
    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
    engines: {node: '>= 0.4'}

  object.assign@4.1.5:
    resolution: {integrity: sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==}
    engines: {node: '>= 0.4'}

  object.entries@1.1.8:
    resolution: {integrity: sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==}
    engines: {node: '>= 0.4'}

  object.fromentries@2.0.8:
    resolution: {integrity: sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==}
    engines: {node: '>= 0.4'}

  object.groupby@1.0.3:
    resolution: {integrity: sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==}
    engines: {node: '>= 0.4'}

  object.values@1.2.0:
    resolution: {integrity: sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==}
    engines: {node: '>= 0.4'}

  obuf@1.1.2:
    resolution: {integrity: sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  openai@4.76.3:
    resolution: {integrity: sha512-BISkI90m8zT7BAMljK0j00TzOoLvmc7AulPxv6EARa++3+hhIK5G6z4xkITurEaA9bvDhQ09kSNKA3DL+rDMwA==}
    hasBin: true
    peerDependencies:
      zod: ^3.23.8
    peerDependenciesMeta:
      zod:
        optional: true

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-map@4.0.0:
    resolution: {integrity: sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  papaparse@5.4.1:
    resolution: {integrity: sha512-HipMsgJkZu8br23pW15uvo6sib6wne/4woLZPlFf3rpDyMe9ywEXUsuD7+6K9PRkJlVT51j/sCOYDKGGS3ZJrw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-entities@4.0.1:
    resolution: {integrity: sha512-SWzvYcSJh4d/SGLIOQfZ/CoNv6BTlI6YEQ7Nj82oDVnRpwe/Z/F1EMx42x3JAOwGBlCjeCH0BRJQbQ/opHL17w==}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  pdfast@0.2.0:
    resolution: {integrity: sha512-cq6TTu6qKSFUHwEahi68k/kqN2mfepjkGrG9Un70cgdRRKLKY6Rf8P8uvP2NvZktaQZNF3YE7agEkLj0vGK9bA==}

  pg-cloudflare@1.1.1:
    resolution: {integrity: sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==}

  pg-connection-string@2.7.0:
    resolution: {integrity: sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA==}

  pg-int8@1.0.1:
    resolution: {integrity: sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==}
    engines: {node: '>=4.0.0'}

  pg-numeric@1.0.2:
    resolution: {integrity: sha512-BM/Thnrw5jm2kKLE5uJkXqqExRUY/toLHda65XgFTBTFYZyopbKjBe29Ii3RbkvlsMoFwD+tHeGaCjjv0gHlyw==}
    engines: {node: '>=4'}

  pg-pool@3.7.0:
    resolution: {integrity: sha512-ZOBQForurqh4zZWjrgSwwAtzJ7QiRX0ovFkZr2klsen3Nm0aoh33Ls0fzfv3imeH/nw/O27cjdz5kzYJfeGp/g==}
    peerDependencies:
      pg: '>=8.0'

  pg-protocol@1.7.0:
    resolution: {integrity: sha512-hTK/mE36i8fDDhgDFjy6xNOG+LCorxLG3WO17tku+ij6sVHXh1jQUJ8hYAnRhNla4QVD2H8er/FOjc/+EgC6yQ==}

  pg-types@2.2.0:
    resolution: {integrity: sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==}
    engines: {node: '>=4'}

  pg-types@4.0.2:
    resolution: {integrity: sha512-cRL3JpS3lKMGsKaWndugWQoLOCoP+Cic8oseVcbr0qhPzYD5DWXK+RZ9LY9wxRf7RQia4SCwQlXk0q6FCPrVng==}
    engines: {node: '>=10'}

  pg@8.13.1:
    resolution: {integrity: sha512-OUir1A0rPNZlX//c7ksiu7crsGZTKSOXJPgtNiHGIlC9H0lO+NC6ZDYksSgBYY/thSWhnSRBv8w1lieNNGATNQ==}
    engines: {node: '>= 8.0.0'}
    peerDependencies:
      pg-native: '>=3.0.1'
    peerDependenciesMeta:
      pg-native:
        optional: true

  pgpass@1.0.5:
    resolution: {integrity: sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  possible-typed-array-names@1.0.0:
    resolution: {integrity: sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==}
    engines: {node: '>= 0.4'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.38:
    resolution: {integrity: sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==}
    engines: {node: ^10 || ^12 || >=14}

  postcss@8.4.49:
    resolution: {integrity: sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==}
    engines: {node: ^10 || ^12 || >=14}

  postgres-array@2.0.0:
    resolution: {integrity: sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==}
    engines: {node: '>=4'}

  postgres-array@3.0.2:
    resolution: {integrity: sha512-6faShkdFugNQCLwucjPcY5ARoW1SlbnrZjmGl0IrrqewpvxvhSLHimCVzqeuULCbG0fQv7Dtk1yDbG3xv7Veog==}
    engines: {node: '>=12'}

  postgres-bytea@1.0.0:
    resolution: {integrity: sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==}
    engines: {node: '>=0.10.0'}

  postgres-bytea@3.0.0:
    resolution: {integrity: sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==}
    engines: {node: '>= 6'}

  postgres-date@1.0.7:
    resolution: {integrity: sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==}
    engines: {node: '>=0.10.0'}

  postgres-date@2.1.0:
    resolution: {integrity: sha512-K7Juri8gtgXVcDfZttFKVmhglp7epKb1K4pgrkLxehjqkrgPhfG6OO8LHLkfaqkbpjNRnra018XwAr1yQFWGcA==}
    engines: {node: '>=12'}

  postgres-interval@1.2.0:
    resolution: {integrity: sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==}
    engines: {node: '>=0.10.0'}

  postgres-interval@3.0.0:
    resolution: {integrity: sha512-BSNDnbyZCXSxgA+1f5UU2GmwhoI0aU5yMxRGO8CdFEcY2BQF9xm/7MqKnYoM1nJDk8nONNWDk9WeSmePFhQdlw==}
    engines: {node: '>=12'}

  postgres-range@1.1.4:
    resolution: {integrity: sha512-i/hbxIE9803Alj/6ytL7UHQxRvZkI9O4Sy+J3HGc4F4oo/2eQAjTSNJ0bfxyse3bH0nuVesCk+3IRLaMtG3H6w==}

  postgres@3.4.5:
    resolution: {integrity: sha512-cDWgoah1Gez9rN3H4165peY9qfpEo+SA61oQv65O3cRUE1pOEoJWwddwcqKE8XZYjbblOJlYDlLV4h67HrEVDg==}
    engines: {node: '>=12'}

  preact-render-to-string@6.5.11:
    resolution: {integrity: sha512-ubnauqoGczeGISiOh6RjX0/cdaF8v/oDXIjO85XALCQjwQP+SB4RDXXtvZ6yTYSjG+PC1QRP2AhPgCEsM2EvUw==}
    peerDependencies:
      preact: '>=10'

  preact@10.24.3:
    resolution: {integrity: sha512-Z2dPnBnMUfyQfSQ+GBdsGa16hz35YmLmtTLhM169uW944hYL6xzTYkJjC07j+Wosz733pMWx0fgON3JNw1jJQA==}

  prebuild-install@7.1.2:
    resolution: {integrity: sha512-UnNke3IQb6sgarcZIDU3gbMeTp/9SSU1DAIkil7PrqG1vZlBtY5msYccSKSHDqa3hNg436IXK+SNImReuA1wEQ==}
    engines: {node: '>=10'}
    hasBin: true

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prisma@6.0.0:
    resolution: {integrity: sha512-RX7KtbW7IoEByf7MR32JK1PkVYLVYFqeODTtiIX3cqekq1aKdsF3Eud4zp2sUShMLjvdb5Jow0LbUjRq5LVxPw==}
    engines: {node: '>=18.18'}
    hasBin: true

  promise-inflight@1.0.1:
    resolution: {integrity: sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==}
    peerDependencies:
      bluebird: '*'
    peerDependenciesMeta:
      bluebird:
        optional: true

  promise-retry@2.0.1:
    resolution: {integrity: sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==}
    engines: {node: '>=10'}

  prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}

  property-information@6.5.0:
    resolution: {integrity: sha512-PgTgs/BlvHxOu8QuEN7wi5A0OmXaBcHpmCSTehcs6Uuu9IkDIEo13Hy7n898RHfrQ49vKCoGeWZSaAK01nwVig==}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  pump@3.0.2:
    resolution: {integrity: sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  quickselect@2.0.0:
    resolution: {integrity: sha512-RKJ22hX8mHe3Y6wH/N3wCM6BWtjaxIyyUIkpHOvfFnxdI4yD4tBXEBKSbriGujF6jnSVkJrffuo6vxACiSSxIw==}

  railroad-diagrams@1.0.0:
    resolution: {integrity: sha512-cz93DjNeLY0idrCNOH6PviZGRN9GJhsdm9hpn1YCS879fj4W+x5IFJhhkRZcwVgMmFF7R82UA/7Oh+R8lLZg6A==}

  randexp@0.4.6:
    resolution: {integrity: sha512-80WNmd9DA0tmZrw9qQa62GPPWfuXJknrmVmLcxvq4uZBdYqb1wYoKTmnlGUchvVWe0XiLupYkBoXVOxz3C8DYQ==}
    engines: {node: '>=0.12'}

  randombytes@2.1.0:
    resolution: {integrity: sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==}

  rbush@3.0.1:
    resolution: {integrity: sha512-XRaVO0YecOpEuIvbhbpTrZgoiI6xBlz6hnlr6EHhd+0x9ase6EmeN+hdwwUaJvLcsFFQ8iWVF1GAK1yB0BWi0w==}

  rc@1.2.8:
    resolution: {integrity: sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==}
    hasBin: true

  react-dom@19.0.0-rc-66855b96-20241106:
    resolution: {integrity: sha512-D25vdaytZ1wFIRiwNU98NPQ/upS2P8Co4/oNoa02PzHbh8deWdepjm5qwZM/46OdSiGv4WSWwxP55RO9obqJEQ==}
    peerDependencies:
      react: 19.0.0-rc-66855b96-20241106

  react-draggable@4.4.6:
    resolution: {integrity: sha512-LtY5Xw1zTPqHkVmtM3X8MUOxNDOUhv/khTgBgrUvwaS064bwVvxT+q5El0uUFNx5IEPKXuRejr7UqLwBIg5pdw==}
    peerDependencies:
      react: '>= 16.3.0'
      react-dom: '>= 16.3.0'

  react-dropzone@14.3.5:
    resolution: {integrity: sha512-9nDUaEEpqZLOz5v5SUcFA0CjM4vq8YbqO0WRls+EYT7+DvxUdzDPKNCPLqGfj3YL9MsniCLCD4RFA6M95V6KMQ==}
    engines: {node: '>= 10.13'}
    peerDependencies:
      react: '>= 16.8 || 18.0.0'

  react-grid-layout@1.5.0:
    resolution: {integrity: sha512-WBKX7w/LsTfI99WskSu6nX2nbJAUD7GD6nIXcwYLyPpnslojtmql2oD3I2g5C3AK8hrxIarYT8awhuDIp7iQ5w==}
    peerDependencies:
      react: '>= 16.3.0'
      react-dom: '>= 16.3.0'

  react-hook-form@7.53.2:
    resolution: {integrity: sha512-YVel6fW5sOeedd1524pltpHX+jgU2u3DSDtXEaBORNdqiNrsX/nUI/iGXONegttg0mJVnfrIkiV0cmTU6Oo2xw==}
    engines: {node: '>=18.0.0'}
    peerDependencies:
      react: ^16.8.0 || ^17 || ^18 || ^19

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react-markdown@9.0.1:
    resolution: {integrity: sha512-186Gw/vF1uRkydbsOIkcGXw7aHq0sZOCRFFjGrr7b9+nVZg4UfA4enXCaxm4fUzecU38sWfrNDitGhshuU7rdg==}
    peerDependencies:
      '@types/react': '>=18'
      react: '>=18'

  react-reconciler@0.26.2:
    resolution: {integrity: sha512-nK6kgY28HwrMNwDnMui3dvm3rCFjZrcGiuwLc5COUipBK5hWHLOxMJhSnSomirqWwjPBJKV1QcbkI0VJr7Gl1Q==}
    engines: {node: '>=0.10.0'}
    peerDependencies:
      react: ^17.0.2

  react-remove-scroll-bar@2.3.6:
    resolution: {integrity: sha512-DtSYaao4mBmX+HDo5YWYdBWQwYIQQshUV/dVxFxK+KM26Wjwp1gZ6rv6OC3oujI6Bfu6Xyg3TwK533AQutsn/g==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.6.0:
    resolution: {integrity: sha512-I2U4JVEsQenxDAKaVa3VZ/JeJZe0/2DxPWL8Tj8yLKctQJQiZM52pn/GWFpSp8dftjM3pSAHVJZscAnC/y+ySQ==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-resizable@3.0.5:
    resolution: {integrity: sha512-vKpeHhI5OZvYn82kXOs1bC8aOXktGU5AmKAgaZS4F5JPburCtbmDPqE7Pzp+1kN4+Wb81LlF33VpGwWwtXem+w==}
    peerDependencies:
      react: '>= 16.3'

  react-router-dom@6.28.0:
    resolution: {integrity: sha512-kQ7Unsl5YdyOltsPGl31zOjLrDv+m2VcIEcIHqYYD3Lp0UppLjrzcfJqDJwXxFw3TH/yvapbnUvPlAj7Kx5nbg==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'
      react-dom: '>=16.8'

  react-router@6.28.0:
    resolution: {integrity: sha512-HrYdIFqdrnhDw0PqG/AKjAqEqM7AvxCz0DQ4h2W8k6nqmc5uRBYDag0SBxx9iYz5G8gnuNVLzUe13wl9eAsXXg==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'

  react-style-singleton@2.2.1:
    resolution: {integrity: sha512-ZWj0fHEMyWkHzKYUr2Bs/4zU6XLmq9HsgBURm7g5pAVfyn49DgUiNgY2d4lXRlYSiCif9YBGpQleewkcqddc7g==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-universal-interface@0.6.2:
    resolution: {integrity: sha512-dg8yXdcQmvgR13RIlZbTRQOoUrDciFVoSBZILwjE2LFISxZZ8loVJKAkuzswl5js8BHda79bIb2b84ehU8IjXw==}
    peerDependencies:
      react: '*'
      tslib: '*'

  react-use@17.5.1:
    resolution: {integrity: sha512-LG/uPEVRflLWMwi3j/sZqR00nF6JGqTTDblkXK2nzXsIvij06hXl1V/MZIlwj1OKIQUtlh1l9jK8gLsRyCQxMg==}
    peerDependencies:
      react: '*'
      react-dom: '*'

  react@19.0.0-rc-66855b96-20241106:
    resolution: {integrity: sha512-klH7xkT71SxRCx4hb1hly5FJB21Hz0ACyxbXYAECEqssUjtJeFUAaI2U1DgJAzkGEnvEm3DkxuBchMC/9K4ipg==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  redis-errors@1.2.0:
    resolution: {integrity: sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==}
    engines: {node: '>=4'}

  redis-parser@3.0.0:
    resolution: {integrity: sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==}
    engines: {node: '>=4'}

  redux@5.0.1:
    resolution: {integrity: sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==}

  reflect.getprototypeof@1.0.7:
    resolution: {integrity: sha512-bMvFGIUKlc/eSfXNX+aZ+EL95/EgZzuwA0OBPTbZZDEJw/0AkentjMuM1oiRfwHrshqk4RzdgiTg5CcDalXN5g==}
    engines: {node: '>= 0.4'}

  regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}

  regexp.prototype.flags@1.5.3:
    resolution: {integrity: sha512-vqlC04+RQoFalODCbCumG2xIOvapzVMHwsyIGM/SIE8fRhFFsXeH8/QQ+s0T0kDAhKc4k30s73/0ydkHQz6HlQ==}
    engines: {node: '>= 0.4'}

  remark-parse@11.0.0:
    resolution: {integrity: sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==}

  remark-rehype@11.1.1:
    resolution: {integrity: sha512-g/osARvjkBXb6Wo0XvAeXQohVta8i84ACbenPpoSsxTOQH/Ae0/RGP4WZgnMH5pMLpsj4FG7OHmcIcXxpza8eQ==}

  repeat-string@1.6.1:
    resolution: {integrity: sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==}
    engines: {node: '>=0.10'}

  require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}

  resize-observer-polyfill@1.5.1:
    resolution: {integrity: sha512-LwZrotdHOo12nQuZlHEmtuXdqGoOD0OhaxopaNFxWzInpEgaLWoVuAMbTzixuosCx2nEG58ngzW3vxdWoxIgdg==}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  resolve@2.0.0-next.5:
    resolution: {integrity: sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==}
    hasBin: true

  ret@0.1.15:
    resolution: {integrity: sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==}
    engines: {node: '>=0.12'}

  retry@0.12.0:
    resolution: {integrity: sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==}
    engines: {node: '>= 4'}

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  right-align@0.1.3:
    resolution: {integrity: sha512-yqINtL/G7vs2v+dFIZmFUDbnVyFUJFKd6gK22Kgo6R4jfJGFtisKyncWDDULgjfqf4ASQuIQyjJ7XZ+3aWpsAg==}
    engines: {node: '>=0.10.0'}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  rollup@0.25.8:
    resolution: {integrity: sha512-a2S4Bh3bgrdO4BhKr2E4nZkjTvrJ2m2bWjMTzVYtoqSCn0HnuxosXnaJUHrMEziOWr3CzL9GjilQQKcyCQpJoA==}
    hasBin: true

  rtl-css-js@1.16.1:
    resolution: {integrity: sha512-lRQgou1mu19e+Ya0LsTvKrVJ5TYUbqCVPAiImX3UfLTenarvPUl1QFdvu5Z3PYmHT9RCcwIfbjRQBntExyj3Zg==}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rw@1.3.3:
    resolution: {integrity: sha512-PdhdWy89SiZogBLaw42zdeqtRJ//zFd2PgQavcICDUgJT5oW10QCRKbJ6bg4r0/UY2M6BWd5tkxuGFRvCkgfHQ==}

  safe-array-concat@1.1.2:
    resolution: {integrity: sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==}
    engines: {node: '>=0.4'}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex-test@1.0.3:
    resolution: {integrity: sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==}
    engines: {node: '>= 0.4'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  scheduler@0.20.2:
    resolution: {integrity: sha512-2eWfGgAqqWFGqtdMmcL5zCMK1U8KlXv8SQFGglL3CEtd0aDVDWgeF/YoCmvln55m5zSk3J/20hTaSBeSObsQDQ==}

  scheduler@0.25.0-rc-66855b96-20241106:
    resolution: {integrity: sha512-HQXp/Mnp/MMRSXMQF7urNFla+gmtXW/Gr1KliuR0iboTit4KvZRY8KYaq5ccCTAOJiUqQh2rE2F3wgUekmgdlA==}

  schema-utils@3.3.0:
    resolution: {integrity: sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==}
    engines: {node: '>= 10.13.0'}

  schema-utils@4.3.0:
    resolution: {integrity: sha512-Gf9qqc58SpCA/xdziiHz35F4GNIWYWZrEshUc/G/r5BnLph6xpKuLeoJoQuj5WfBIx/eQLf+hmVPYHaxJu7V2g==}
    engines: {node: '>= 10.13.0'}

  screenfull@5.2.0:
    resolution: {integrity: sha512-9BakfsO2aUQN2K9Fdbj87RJIEZ82Q9IGim7FqM5OsebfoFC6ZHXgDq/KvniuLTPdeM8wY2o6Dj3WQ7KeQCj3cA==}
    engines: {node: '>=0.10.0'}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true

  seq-queue@0.0.5:
    resolution: {integrity: sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q==}

  serialize-javascript@6.0.2:
    resolution: {integrity: sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==}

  server-only@0.0.1:
    resolution: {integrity: sha512-qepMx2JxAa5jjfzxG79yPPq+8BuFToHd1hm7kI+Z4zAq1ftQiP7HcxMhDDItrbtwVeLg/cY2JnKnrcFkmiswNA==}

  set-blocking@2.0.0:
    resolution: {integrity: sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  set-function-name@2.0.2:
    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
    engines: {node: '>= 0.4'}

  set-harmonic-interval@1.0.1:
    resolution: {integrity: sha512-AhICkFV84tBP1aWqPwLZqFvAwqEoVA9kxNMniGEUvzOlm4vLmOFLiTT3UZ6bziJTy4bOVpzWGTfSCbmaayGx8g==}
    engines: {node: '>=6.9'}

  shallowequal@1.1.0:
    resolution: {integrity: sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==}

  sharp@0.33.5:
    resolution: {integrity: sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel@1.0.6:
    resolution: {integrity: sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==}
    engines: {node: '>= 0.4'}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-concat@1.0.1:
    resolution: {integrity: sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==}

  simple-get@4.0.1:
    resolution: {integrity: sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  size-sensor@1.0.2:
    resolution: {integrity: sha512-2NCmWxY7A9pYKGXNBfteo4hy14gWu47rg5692peVMst6lQLPKrVjhY+UTEsPI5ceFRJSl3gVgMYaUi/hKuaiKw==}

  smart-buffer@4.2.0:
    resolution: {integrity: sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==}
    engines: {node: '>= 6.0.0', npm: '>= 3.0.0'}

  snake-case@3.0.4:
    resolution: {integrity: sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==}

  snakecase-keys@5.4.4:
    resolution: {integrity: sha512-YTywJG93yxwHLgrYLZjlC75moVEX04LZM4FHfihjHe1FCXm+QaLOFfSf535aXOAd0ArVQMWUAe8ZPm4VtWyXaA==}
    engines: {node: '>=12'}

  socks-proxy-agent@6.2.1:
    resolution: {integrity: sha512-a6KW9G+6B3nWZ1yB8G7pJwL3ggLy1uTzKAgCb7ttblwqdz9fMGJUuTy3uFzEP48FAs9FLILlmzDlE2JJhVQaXQ==}
    engines: {node: '>= 10'}

  socks@2.8.3:
    resolution: {integrity: sha512-l5x7VUUWbjVFbafGLxPWkYsHIhEvmF85tbIeFZWc8ZPtoMyybuEhL7Jye/ooC4/d48FgOjSJXgsF/AJPYCW8Zw==}
    engines: {node: '>= 10.0.0', npm: '>= 3.0.0'}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map-support@0.3.3:
    resolution: {integrity: sha512-9O4+y9n64RewmFoKUZ/5Tx9IHIcXM6Q+RTSw6ehnqybUz4a7iwR3Eaw80uLtqqQ5D0C+5H03D4KKGo9PdP33Gg==}

  source-map-support@0.5.21:
    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}

  source-map@0.1.32:
    resolution: {integrity: sha512-htQyLrrRLkQ87Zfrir4/yN+vAUd6DNjVayEjTSHXu29AYQJw57I4/xEL/M6p6E/woPNJwvZt6rVlzc7gFEJccQ==}
    engines: {node: '>=0.8.0'}

  source-map@0.5.6:
    resolution: {integrity: sha512-MjZkVp0NHr5+TPihLcadqnlVoGIoWo4IBHptutGh9wI3ttUYvCG26HkSuDi+K6lsZ25syXJXcctwgyVCt//xqA==}
    engines: {node: '>=0.10.0'}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  space-separated-tokens@2.0.2:
    resolution: {integrity: sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==}

  split2@4.2.0:
    resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
    engines: {node: '>= 10.x'}

  sprintf-js@1.1.3:
    resolution: {integrity: sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==}

  sql-formatter@15.4.6:
    resolution: {integrity: sha512-aH6kwvJpylljHqXe+zpie0Q5snL3uerDLLhjPEBjDCVK1NMRFq4nMJbuPJWYp08LaaaJJgBhShAdAfspcBYY0Q==}
    hasBin: true

  sqlite3@5.1.7:
    resolution: {integrity: sha512-GGIyOiFaG+TUra3JIfkI/zGP8yZYLPQ0pl1bH+ODjiX57sPhrLU5sQJn1y9bDKZUFYkX1crlrPfSYt0BKKdkog==}

  sqlstring@2.3.3:
    resolution: {integrity: sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==}
    engines: {node: '>= 0.6'}

  ssri@8.0.1:
    resolution: {integrity: sha512-97qShzy1AiyxvPNIkLWoGua7xoQzzPjQ0HAH4B0rWKo7SZ6USuPcrUiAFrws0UH8RrbWmgq3LMTObhPIHbbBeQ==}
    engines: {node: '>= 8'}

  stack-generator@2.0.10:
    resolution: {integrity: sha512-mwnua/hkqM6pF4k8SnmZ2zfETsRUpWXREfA/goT8SLCV4iOFa4bzOX2nDipWAZFPTjLvQB82f5yaodMVhK0yJQ==}

  stackframe@1.3.4:
    resolution: {integrity: sha512-oeVtt7eWQS+Na6F//S4kJ2K2VbRlS9D43mAlMyVpVWovy9o+jfgH8O9agzANzaiLjclA0oYzUXEM4PurhSUChw==}

  stacktrace-gps@3.1.2:
    resolution: {integrity: sha512-GcUgbO4Jsqqg6RxfyTHFiPxdPqF+3LFmQhm7MgCuYQOYuWyqxo5pwRPz5d/u6/WYJdEnWfK4r+jGbyD8TSggXQ==}

  stacktrace-js@2.0.2:
    resolution: {integrity: sha512-Je5vBeY4S1r/RnLydLl0TBTi3F2qdfWmYsGvtfZgEI+SCprPppaIhQf5nGcal4gI4cGpCV/duLcAzT1np6sQqg==}

  standard-as-callback@2.1.0:
    resolution: {integrity: sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==}

  state-local@1.0.7:
    resolution: {integrity: sha512-HTEHMNieakEnoe33shBYcZ7NX83ACUjCu8c40iOGEZsngj9zRnkqS9j1pqQPXwobB0ZcVTk27REb7COQ0UR59w==}

  std-env@3.8.0:
    resolution: {integrity: sha512-Bc3YwwCB+OzldMxOXJIIvC6cPRWr/LxOp48CdQTOkPyk/t4JWWJbrilwBd7RJzKV8QW7tJkcgAmeuLLJugl5/w==}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string.prototype.includes@2.0.1:
    resolution: {integrity: sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==}
    engines: {node: '>= 0.4'}

  string.prototype.matchall@4.0.11:
    resolution: {integrity: sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==}
    engines: {node: '>= 0.4'}

  string.prototype.repeat@1.0.0:
    resolution: {integrity: sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==}

  string.prototype.trim@1.2.9:
    resolution: {integrity: sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==}
    engines: {node: '>= 0.4'}

  string.prototype.trimend@1.0.8:
    resolution: {integrity: sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==}

  string.prototype.trimstart@1.0.8:
    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
    engines: {node: '>= 0.4'}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  stringify-entities@4.0.4:
    resolution: {integrity: sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==}

  strip-ansi@3.0.1:
    resolution: {integrity: sha512-VhumSSbBqDTP8p2ZLKj40UjBCV4+v8bUSEpUb4KjRgWk9pbqGF4REFj6KEagidb2f/M6AzC0EmFyDNGaw9OCzg==}
    engines: {node: '>=0.10.0'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@3.0.0:
    resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
    engines: {node: '>=4'}

  strip-json-comments@2.0.1:
    resolution: {integrity: sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==}
    engines: {node: '>=0.10.0'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  style-to-object@1.0.8:
    resolution: {integrity: sha512-xT47I/Eo0rwJmaXC4oilDGDWLohVhR6o/xAQcPQN8q6QBuZVL8qMYL85kLmST5cPjAorwvqIA4qXTRQoYHaL6g==}

  styled-components@6.1.14:
    resolution: {integrity: sha512-KtfwhU5jw7UoxdM0g6XU9VZQFV4do+KrM8idiVCH5h4v49W+3p3yMe0icYwJgZQZepa5DbH04Qv8P0/RdcLcgg==}
    engines: {node: '>= 16'}
    peerDependencies:
      react: '>= 16.8.0'
      react-dom: '>= 16.8.0'

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  stylis@4.3.2:
    resolution: {integrity: sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==}

  stylis@4.3.4:
    resolution: {integrity: sha512-osIBl6BGUmSfDkyH2mB7EFvCJntXDrLhKjHTRj/rK6xLH0yuPrHULDRQzKokSOD4VoorhtKpfcfW1GAntu8now==}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@2.0.0:
    resolution: {integrity: sha512-KKNVtd6pCYgPIKU4cp2733HWYCpplQhddZLBUryaAHou723x+FRzQ5Df824Fj+IyyuiQTRoub4SnIFfIcrp70g==}
    engines: {node: '>=0.8.0'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  svg-path-parser@1.1.0:
    resolution: {integrity: sha512-jGCUqcQyXpfe38R7RFfhrMyfXcBmpMNJI/B+4CE9/Unkh98UporAc461GTthv+TVDuZXsBx7/WiwJb1Oh4tt4A==}

  swr@2.2.5:
    resolution: {integrity: sha512-QtxqyclFeAsxEUeZIYmsaQ0UjimSq1RZ9Un7I68/0ClKK/U3LoyQunwkQfJZr2fc22DfIXLNDc2wFyTEikCUpg==}
    peerDependencies:
      react: ^16.11.0 || ^17.0.0 || ^18.0.0

  tailwind-merge@2.5.5:
    resolution: {integrity: sha512-0LXunzzAZzo0tEPxV3I297ffKZPlKDrjj7NXphC8V5ak9yHC5zRmxnOe2m/Rd/7ivsOMJe3JZ2JVocoDdQTRBA==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.15:
    resolution: {integrity: sha512-r4MeXnfBmSOuKUWmXe6h2CcyfzJCEk4F0pptO5jlnYSIViUkVmsawj80N5h2lO3gwcmSb4n3PuN+e+GC1Guylw==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  tapable@2.2.1:
    resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}
    engines: {node: '>=6'}

  tape@4.17.0:
    resolution: {integrity: sha512-KCuXjYxCZ3ru40dmND+oCLsXyuA8hoseu2SS404Px5ouyS0A99v8X/mdiLqsR5MTAyamMBN7PRwt2Dv3+xGIxw==}
    hasBin: true

  tar-fs@2.1.1:
    resolution: {integrity: sha512-V0r2Y9scmbDRLCNex/+hYzvp/zyYjvFbHPNgVTKfQvVrb6guiE/fxP+XblDNR011utopbkex2nM4dHNV6GDsng==}

  tar-stream@2.2.0:
    resolution: {integrity: sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==}
    engines: {node: '>=6'}

  tar@6.2.1:
    resolution: {integrity: sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==}
    engines: {node: '>=10'}

  terser-webpack-plugin@5.3.11:
    resolution: {integrity: sha512-RVCsMfuD0+cTt3EwX8hSl2Ks56EbFHWmhluwcqoPKtBnfjiT6olaq7PRIRfhyU8nnC2MrnDrBLfrD/RGE+cVXQ==}
    engines: {node: '>= 10.13.0'}
    peerDependencies:
      '@swc/core': '*'
      esbuild: '*'
      uglify-js: '*'
      webpack: ^5.1.0
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      esbuild:
        optional: true
      uglify-js:
        optional: true

  terser@5.37.0:
    resolution: {integrity: sha512-B8wRRkmre4ERucLM/uXx4MOV5cbnOlVAqUst+1+iLKPI0dOgFO28f84ptoQt9HEI537PMzfYa/d+GEPKTRXmYA==}
    engines: {node: '>=10'}
    hasBin: true

  text-segmentation@1.0.3:
    resolution: {integrity: sha512-iOiPUo/BGnZ6+54OsWxZidGCsdU8YbE4PSpdPinp7DeMtUJNJBoJ/ouUSTJjHkh1KntHaltHl/gDs2FC4i5+Nw==}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  throttle-debounce@3.0.1:
    resolution: {integrity: sha512-dTEWWNu6JmeVXY0ZYoPuH5cRIwc0MeGbJwah9KUNYSJwommQpCzTySTpEe8Gs1J23aeWEuAobe4Ag7EHVt/LOg==}
    engines: {node: '>=10'}

  throttleit@2.1.0:
    resolution: {integrity: sha512-nt6AMGKW1p/70DF/hGBdJB57B8Tspmbp5gfJ8ilhLnt7kkr2ye7hzD6NVG8GGErk2HWF34igrL2CXmNIkzKqKw==}
    engines: {node: '>=18'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toggle-selection@1.0.6:
    resolution: {integrity: sha512-BiZS+C1OS8g/q2RRbJmy59xpyghNBqrr6k5L/uKBGRsTfxmu3ffiRnd8mlGPUVayg8pvfi5urfnu8TU7DVOkLQ==}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  trim-lines@3.0.1:
    resolution: {integrity: sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==}

  trough@2.2.0:
    resolution: {integrity: sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==}

  ts-api-utils@1.4.2:
    resolution: {integrity: sha512-ZF5gQIQa/UmzfvxbHZI3JXN0/Jt+vnAfAviNRAMc491laiK6YCLpCW9ft8oaCRFOTxCZtUTE6XB0ZQAe3olntw==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-easing@0.2.0:
    resolution: {integrity: sha512-Z86EW+fFFh/IFB1fqQ3/+7Zpf9t2ebOAxNI/V6Wo7r5gqiqtxmgTlQ1qbqQcjLKYeSHPTsEmvlJUDg/EuL0uHQ==}

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tsconfig-paths@3.15.0:
    resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}

  tslib@2.3.0:
    resolution: {integrity: sha512-N82ooyxVNm6h1riLCoyS9e3fuJ3AMG2zIZs2Gd1ATcSFjSA23Q0fzjjZeh0jbJvWVDZ0cJT8yaNNaaXHzueNjg==}

  tslib@2.4.1:
    resolution: {integrity: sha512-tGyy4dAjRIEwI7BzsB0lynWgOpfqjUdq91XXAlIWD2OwKBH7oCl/GZG/HT4BOHrTlPMOASlMQ7veyTqpmRcrNA==}

  tslib@2.6.2:
    resolution: {integrity: sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tsx@4.19.2:
    resolution: {integrity: sha512-pOUl6Vo2LUq/bSa8S5q7b91cgNSjctn9ugq/+Mvow99qW6x/UZYwzxy/3NmqoT66eHYfCVvFvACC58UBPFf28g==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  tunnel-agent@0.6.0:
    resolution: {integrity: sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  type-fest@2.19.0:
    resolution: {integrity: sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==}
    engines: {node: '>=12.20'}

  typed-array-buffer@1.0.2:
    resolution: {integrity: sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==}
    engines: {node: '>= 0.4'}

  typed-array-byte-length@1.0.1:
    resolution: {integrity: sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==}
    engines: {node: '>= 0.4'}

  typed-array-byte-offset@1.0.3:
    resolution: {integrity: sha512-GsvTyUHTriq6o/bHcTd0vM7OQ9JEdlvluu9YISaA7+KzDzPaIzEeDFNkTfhdE3MYcNhNi0vq/LlegYgIs5yPAw==}
    engines: {node: '>= 0.4'}

  typed-array-length@1.0.7:
    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
    engines: {node: '>= 0.4'}

  typescript-eslint@8.16.0:
    resolution: {integrity: sha512-wDkVmlY6O2do4V+lZd0GtRfbtXbeD0q9WygwXXSJnC1xorE8eqyC2L1tJimqpSeFrOzRlYtWnUp/uzgHQOgfBQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  typescript@5.7.2:
    resolution: {integrity: sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==}
    engines: {node: '>=14.17'}
    hasBin: true

  uglify-js@2.8.29:
    resolution: {integrity: sha512-qLq/4y2pjcU3vhlhseXGGJ7VbFO4pBANu0kwl8VCa9KEI0V8VfZIx2Fy3w01iSTA/pGwKZSmu/+I4etLNDdt5w==}
    engines: {node: '>=0.8.0'}
    hasBin: true

  uglify-to-browserify@1.0.2:
    resolution: {integrity: sha512-vb2s1lYx2xBtUgy+ta+b2J/GLVUR+wmpINwHePmPRhOsIVCG2wDzKJ0n14GslH1BifsqVzSOwQhRaCAsZ/nI4Q==}

  unbox-primitive@1.0.2:
    resolution: {integrity: sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  unified@11.0.5:
    resolution: {integrity: sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==}

  unique-filename@1.1.1:
    resolution: {integrity: sha512-Vmp0jIp2ln35UTXuryvjzkjGdRyf9b2lTXuSYUiPmzRcl3FDtYqAwOnTJkAngD9SWhnoJzDbTKwaOrZ+STtxNQ==}

  unique-slug@2.0.2:
    resolution: {integrity: sha512-zoWr9ObaxALD3DOPfjPSqxt4fnZiWblxHIgeWqW8x7UqDzEtHEQLzji2cuJYQFCU6KmoJikOYAZlrTHHebjx2w==}

  unist-util-is@6.0.0:
    resolution: {integrity: sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==}

  unist-util-position@5.0.0:
    resolution: {integrity: sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==}

  unist-util-stringify-position@4.0.0:
    resolution: {integrity: sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==}

  unist-util-visit-parents@6.0.1:
    resolution: {integrity: sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==}

  unist-util-visit@5.0.0:
    resolution: {integrity: sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==}

  update-browserslist-db@1.1.1:
    resolution: {integrity: sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  use-callback-ref@1.3.2:
    resolution: {integrity: sha512-elOQwe6Q8gqZgDA8mrh44qRTQqpIHDcZ3hXTLjBe1i4ph8XpNJnO+aQf3NaG+lriLopI4HMx9VjQLfPQ6vhnoA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.2:
    resolution: {integrity: sha512-epTbsLuzZ7lPClpz2TyryBfztm7m+28DlEv2ZCQ3MDr5ssiwyOwGH/e5F9CkfWjJ1t4clvI58yF822/GUkjjhw==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.9.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sync-external-store@1.2.2:
    resolution: {integrity: sha512-PElTlVMwpblvbNqQ82d2n6RjStvdSoNe9FG28kNfz3WiXilJm4DdNkEzRhCZuIDwY8U08WVihhGR5iRqAwfDiw==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  utrie@1.0.2:
    resolution: {integrity: sha512-1MLa5ouZiOmQzUbjbu9VmjLzn1QLXBhwpUa7kdLUQK+KQ5KA9I1vk5U4YHe/X2Ch7PYnJfWuWT+VbuxbGwljhw==}

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  vfile-message@4.0.2:
    resolution: {integrity: sha512-jRDZ1IMLttGj41KcZvlrYAaI3CfqpLpfpf+Mfig13viT6NKvRzWZ+lXz0Y5D60w6uJIBAOGq9mSHf0gktF0duw==}

  vfile@6.0.3:
    resolution: {integrity: sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==}

  watchpack@2.4.2:
    resolution: {integrity: sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==}
    engines: {node: '>=10.13.0'}

  web-streams-polyfill@4.0.0-beta.3:
    resolution: {integrity: sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==}
    engines: {node: '>= 14'}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webpack-sources@3.2.3:
    resolution: {integrity: sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==}
    engines: {node: '>=10.13.0'}

  webpack@5.97.1:
    resolution: {integrity: sha512-EksG6gFY3L1eFMROS/7Wzgrii5mBAFe4rIr3r2BTfo7bcc+DWwFZ4OJ/miOuHJO/A85HwyI4eQ0F6IKXesO7Fg==}
    engines: {node: '>=10.13.0'}
    hasBin: true
    peerDependencies:
      webpack-cli: '*'
    peerDependenciesMeta:
      webpack-cli:
        optional: true

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  which-boxed-primitive@1.0.2:
    resolution: {integrity: sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==}

  which-builtin-type@1.2.0:
    resolution: {integrity: sha512-I+qLGQ/vucCby4tf5HsLmGueEla4ZhwTBSqaooS+Y0BuxN4Cp+okmGuV+8mXZ84KDI9BA+oklo+RzKg0ONdSUA==}
    engines: {node: '>= 0.4'}

  which-collection@1.0.2:
    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
    engines: {node: '>= 0.4'}

  which-typed-array@1.1.16:
    resolution: {integrity: sha512-g+N+GAWiRj66DngFwHvISJd+ITsyphZvD1vChfVg6cEdnzy53GzB3oy0fUNlvhz7H7+MiqhYr26qxQShCpKTTQ==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  wide-align@1.1.5:
    resolution: {integrity: sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==}

  window-size@0.1.0:
    resolution: {integrity: sha512-1pTPQDKTdd61ozlKGNCjhNRd+KPmgLSGa3mZTHoOliaGcESD8G1PXhh7c1fgiPjVbNVfgy2Faw4BI8/m0cC8Mg==}
    engines: {node: '>= 0.8.0'}

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wordwrap@0.0.2:
    resolution: {integrity: sha512-xSBsCeh+g+dinoBv3GAOWM4LcVVO68wLXRanibtBSdUvkGWQRGeE9P7IwU9EmDDi4jA6L44lz15CGMwdw9N5+Q==}
    engines: {node: '>=0.4.0'}

  workerize-loader@2.0.2:
    resolution: {integrity: sha512-HoZ6XY4sHWxA2w0WpzgBwUiR3dv1oo7bS+oCwIpb6n54MclQ/7KXdXsVIChTCygyuHtVuGBO1+i3HzTt699UJQ==}
    peerDependencies:
      webpack: '*'

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  ws@8.18.0:
    resolution: {integrity: sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml@2.6.1:
    resolution: {integrity: sha512-7r0XPzioN/Q9kXBro/XPnA6kznR73DHq+GXh5ON7ZozRO6aMjbmiBuKste2wslTFkC5d1dw0GooOCepZXJ2SAg==}
    engines: {node: '>= 14'}
    hasBin: true

  yargs@3.10.0:
    resolution: {integrity: sha512-QFzUah88GAGy9lyDKGBqZdkYApt63rCXYBGYnEP4xDJPXNqXXnBDACnbrXnViV6jRSqAePwrATi2i8mfYm4L1A==}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zod-to-json-schema@3.24.1:
    resolution: {integrity: sha512-3h08nf3Vw3Wl3PK+q3ow/lIil81IT2Oa7YpQyUUDsEWbXveMesdfK1xBd2RhCkynwZndAxixji/7SYJJowr62w==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.23.8:
    resolution: {integrity: sha512-XBx9AXhXktjUqnepgTiE5flcKIYWi/rme0Eaj+5Y0lftuGBq+jyRu/md4WnuxqgP1ubdpNCsYEYPxrzVHD8d6g==}

  zrender@5.6.0:
    resolution: {integrity: sha512-uzgraf4njmmHAbEUxMJ8Oxg+P3fT04O+9p7gY+wJRVxo8Ge+KmYv0WJev945EH4wFuc4OY2NLXz46FZrWS9xJg==}

  zustand@5.0.1:
    resolution: {integrity: sha512-pRET7Lao2z+n5R/HduXMio35TncTlSW68WsYBq2Lg1ASspsNGjpwLAsij3RpouyV6+kHMwwwzP0bZPD70/Jx/w==}
    engines: {node: '>=12.20.0'}
    peerDependencies:
      '@types/react': '>=18.0.0'
      immer: '>=9.0.6'
      react: '>=18.0.0'
      use-sync-external-store: '>=1.2.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      immer:
        optional: true
      react:
        optional: true
      use-sync-external-store:
        optional: true

  zwitch@2.0.4:
    resolution: {integrity: sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==}

snapshots:

  '@ai-sdk/anthropic@1.0.5(zod@3.23.8)':
    dependencies:
      '@ai-sdk/provider': 1.0.2
      '@ai-sdk/provider-utils': 2.0.4(zod@3.23.8)
      zod: 3.23.8

  '@ai-sdk/openai@1.0.8(zod@3.23.8)':
    dependencies:
      '@ai-sdk/provider': 1.0.2
      '@ai-sdk/provider-utils': 2.0.4(zod@3.23.8)
      zod: 3.23.8

  '@ai-sdk/provider-utils@2.0.4(zod@3.23.8)':
    dependencies:
      '@ai-sdk/provider': 1.0.2
      eventsource-parser: 3.0.0
      nanoid: 3.3.8
      secure-json-parse: 2.7.0
    optionalDependencies:
      zod: 3.23.8

  '@ai-sdk/provider@1.0.2':
    dependencies:
      json-schema: 0.4.0

  '@ai-sdk/react@1.0.6(react@19.0.0-rc-66855b96-20241106)(zod@3.23.8)':
    dependencies:
      '@ai-sdk/provider-utils': 2.0.4(zod@3.23.8)
      '@ai-sdk/ui-utils': 1.0.5(zod@3.23.8)
      swr: 2.2.5(react@19.0.0-rc-66855b96-20241106)
      throttleit: 2.1.0
    optionalDependencies:
      react: 19.0.0-rc-66855b96-20241106
      zod: 3.23.8

  '@ai-sdk/ui-utils@1.0.5(zod@3.23.8)':
    dependencies:
      '@ai-sdk/provider': 1.0.2
      '@ai-sdk/provider-utils': 2.0.4(zod@3.23.8)
      zod-to-json-schema: 3.24.1(zod@3.23.8)
    optionalDependencies:
      zod: 3.23.8

  '@alloc/quick-lru@5.2.0': {}

  '@ant-design/charts-util@0.0.1-alpha.7(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      lodash: 4.17.21
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@ant-design/charts@2.2.6(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      '@ant-design/graphs': 2.0.4(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      '@ant-design/plots': 2.3.3(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      lodash: 4.17.21
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    transitivePeerDependencies:
      - workerize-loader

  '@ant-design/graphs@2.0.4(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      '@ant-design/charts-util': 0.0.1-alpha.7(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@antv/g6': 5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      '@antv/g6-extension-react': 0.1.17(@antv/g6@5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12))))(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@antv/graphin': 3.0.4(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      lodash: 4.17.21
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      styled-components: 6.1.14(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
    transitivePeerDependencies:
      - workerize-loader

  '@ant-design/plots@2.3.3(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@ant-design/charts-util': 0.0.1-alpha.7(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@antv/event-emitter': 0.1.3
      '@antv/g': 6.1.20
      '@antv/g2': 5.2.10
      '@antv/g2-extension-plot': 0.2.1
      lodash: 4.17.21
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@anthropic-ai/sdk@0.32.1(encoding@0.1.13)':
    dependencies:
      '@types/node': 18.19.68
      '@types/node-fetch': 2.6.12
      abort-controller: 3.0.0
      agentkeepalive: 4.5.0
      form-data-encoder: 1.7.2
      formdata-node: 4.4.1
      node-fetch: 2.7.0(encoding@0.1.13)
    transitivePeerDependencies:
      - encoding

  '@antv/algorithm@0.1.26':
    dependencies:
      '@antv/util': 2.0.17
      tslib: 2.8.1

  '@antv/component@2.1.2':
    dependencies:
      '@antv/g': 6.1.20
      '@antv/scale': 0.4.16
      '@antv/util': 3.3.10
      svg-path-parser: 1.1.0

  '@antv/coord@0.4.7':
    dependencies:
      '@antv/scale': 0.4.16
      '@antv/util': 2.0.17
      gl-matrix: 3.4.3

  '@antv/event-emitter@0.1.3': {}

  '@antv/g-camera-api@2.0.34':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-canvas@2.0.38':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-plugin-canvas-path-generator': 2.1.15
      '@antv/g-plugin-canvas-picker': 2.1.17
      '@antv/g-plugin-canvas-renderer': 2.2.17
      '@antv/g-plugin-dom-interaction': 2.1.20
      '@antv/g-plugin-html-renderer': 2.1.20
      '@antv/g-plugin-image-loader': 2.1.17
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-dom-mutation-observer-api@2.0.31':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@babel/runtime': 7.26.0

  '@antv/g-lite@2.2.15':
    dependencies:
      '@antv/g-math': 3.0.0
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      d3-color: 3.1.0
      eventemitter3: 5.0.1
      gl-matrix: 3.4.3
      rbush: 3.0.1
      tslib: 2.8.1

  '@antv/g-math@3.0.0':
    dependencies:
      '@antv/util': 3.3.10
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-plugin-canvas-path-generator@2.1.15':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-math': 3.0.0
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-plugin-canvas-picker@2.1.17':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-math': 3.0.0
      '@antv/g-plugin-canvas-path-generator': 2.1.15
      '@antv/g-plugin-canvas-renderer': 2.2.17
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-plugin-canvas-renderer@2.2.17':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-math': 3.0.0
      '@antv/g-plugin-canvas-path-generator': 2.1.15
      '@antv/g-plugin-image-loader': 2.1.17
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-plugin-dom-interaction@2.1.20':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-plugin-dragndrop@2.0.31':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-plugin-html-renderer@2.1.20':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-plugin-image-loader@2.1.17':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-plugin-svg-picker@2.0.33':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-plugin-svg-renderer': 2.2.15
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-plugin-svg-renderer@2.2.15':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@antv/g-svg@2.0.33':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/g-plugin-dom-interaction': 2.1.20
      '@antv/g-plugin-svg-picker': 2.0.33
      '@antv/g-plugin-svg-renderer': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g-web-animations-api@2.1.20':
    dependencies:
      '@antv/g-lite': 2.2.15
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      tslib: 2.8.1

  '@antv/g2-extension-plot@0.2.1':
    dependencies:
      '@antv/g2': 5.2.10
      '@antv/util': 3.3.10
      d3-array: 3.2.4
      d3-hierarchy: 3.1.2

  '@antv/g2@5.2.10':
    dependencies:
      '@antv/component': 2.1.2
      '@antv/coord': 0.4.7
      '@antv/event-emitter': 0.1.3
      '@antv/g': 6.1.20
      '@antv/g-canvas': 2.0.38
      '@antv/g-plugin-dragndrop': 2.0.31
      '@antv/scale': 0.4.16
      '@antv/util': 3.3.10
      d3-array: 3.2.4
      d3-dsv: 3.0.1
      d3-force: 3.0.0
      d3-format: 3.1.0
      d3-geo: 3.1.1
      d3-hierarchy: 3.1.2
      d3-path: 3.1.0
      d3-scale-chromatic: 3.1.0
      d3-shape: 3.2.0
      flru: 1.0.2
      fmin: 0.0.2
      pdfast: 0.2.0

  '@antv/g6-extension-react@0.1.17(@antv/g6@5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12))))(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@antv/g': 6.1.20
      '@antv/g-svg': 2.0.33
      '@antv/g6': 5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      '@antv/react-g': 2.0.36(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@antv/g6@5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      '@antv/algorithm': 0.1.26
      '@antv/component': 2.1.2
      '@antv/event-emitter': 0.1.3
      '@antv/g': 6.1.20
      '@antv/g-canvas': 2.0.38
      '@antv/g-plugin-dragndrop': 2.0.31
      '@antv/graphlib': 2.0.4
      '@antv/hierarchy': 0.6.14
      '@antv/layout': 1.2.14-beta.9(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      '@antv/util': 3.3.10
      bubblesets-js: 2.3.4
      hull.js: 1.0.6
    transitivePeerDependencies:
      - workerize-loader

  '@antv/g@6.1.20':
    dependencies:
      '@antv/g-camera-api': 2.0.34
      '@antv/g-dom-mutation-observer-api': 2.0.31
      '@antv/g-lite': 2.2.15
      '@antv/g-web-animations-api': 2.1.20
      '@babel/runtime': 7.26.0

  '@antv/graphin@3.0.4(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      '@antv/g6': 5.0.42(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    transitivePeerDependencies:
      - workerize-loader

  '@antv/graphlib@2.0.4':
    dependencies:
      '@antv/event-emitter': 0.1.3

  '@antv/hierarchy@0.6.14': {}

  '@antv/layout@1.2.14-beta.9(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      '@antv/event-emitter': 0.1.3
      '@antv/graphlib': 2.0.4
      '@antv/util': 3.3.10
      '@naoak/workerize-transferable': 0.1.0(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))
      comlink: 4.4.2
      d3-force: 3.0.0
      d3-force-3d: 3.0.5
      d3-octree: 1.1.0
      d3-quadtree: 3.0.1
      dagre: 0.8.5
      ml-matrix: 6.12.0
      tslib: 2.8.1
    transitivePeerDependencies:
      - workerize-loader

  '@antv/react-g@2.0.36(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@antv/g': 6.1.20
      '@antv/util': 3.3.10
      '@babel/runtime': 7.26.0
      gl-matrix: 3.4.3
      react: 19.0.0-rc-66855b96-20241106
      react-reconciler: 0.26.2(react@19.0.0-rc-66855b96-20241106)
      scheduler: 0.20.2
      tslib: 2.8.1

  '@antv/scale@0.4.16':
    dependencies:
      '@antv/util': 3.3.10
      color-string: 1.9.1
      fecha: 4.2.3

  '@antv/util@2.0.17':
    dependencies:
      csstype: 3.1.3
      tslib: 2.8.1

  '@antv/util@3.3.10':
    dependencies:
      fast-deep-equal: 3.1.3
      gl-matrix: 3.4.3
      tslib: 2.8.1

  '@auth/core@0.37.4':
    dependencies:
      '@panva/hkdf': 1.2.1
      jose: 5.9.6
      oauth4webapi: 3.1.3
      preact: 10.24.3
      preact-render-to-string: 6.5.11(preact@10.24.3)

  '@auth/drizzle-adapter@1.7.4':
    dependencies:
      '@auth/core': 0.37.4
    transitivePeerDependencies:
      - '@simplewebauthn/browser'
      - '@simplewebauthn/server'
      - nodemailer

  '@babel/runtime@7.26.0':
    dependencies:
      regenerator-runtime: 0.14.1

  '@clerk/backend@1.18.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@clerk/shared': 2.17.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@clerk/types': 4.35.0
      cookie: 0.7.0
      snakecase-keys: 5.4.4
      tslib: 2.4.1
    transitivePeerDependencies:
      - react
      - react-dom

  '@clerk/clerk-react@5.17.1(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@clerk/shared': 2.17.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@clerk/types': 4.35.0
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      tslib: 2.4.1

  '@clerk/nextjs@6.5.1(next@15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106))(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@clerk/backend': 1.18.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@clerk/clerk-react': 5.17.1(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@clerk/shared': 2.17.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@clerk/types': 4.35.0
      crypto-js: 4.2.0
      ezheaders: 0.1.0(next@15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106))
      next: 15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      server-only: 0.0.1
      tslib: 2.4.1

  '@clerk/shared@2.17.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@clerk/types': 4.35.0
      dequal: 2.0.3
      glob-to-regexp: 0.4.1
      js-cookie: 3.0.5
      std-env: 3.8.0
      swr: 2.2.5(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@clerk/types@4.35.0':
    dependencies:
      csstype: 3.1.1

  '@drizzle-team/brocli@0.10.2': {}

  '@emnapi/runtime@1.3.1':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emotion/is-prop-valid@1.2.2':
    dependencies:
      '@emotion/memoize': 0.8.1

  '@emotion/memoize@0.8.1': {}

  '@emotion/unitless@0.8.1': {}

  '@esbuild-kit/core-utils@3.3.2':
    dependencies:
      esbuild: 0.18.20
      source-map-support: 0.5.21

  '@esbuild-kit/esm-loader@2.6.5':
    dependencies:
      '@esbuild-kit/core-utils': 3.3.2
      get-tsconfig: 4.8.1

  '@esbuild/aix-ppc64@0.19.12':
    optional: true

  '@esbuild/aix-ppc64@0.23.1':
    optional: true

  '@esbuild/android-arm64@0.18.20':
    optional: true

  '@esbuild/android-arm64@0.19.12':
    optional: true

  '@esbuild/android-arm64@0.23.1':
    optional: true

  '@esbuild/android-arm@0.18.20':
    optional: true

  '@esbuild/android-arm@0.19.12':
    optional: true

  '@esbuild/android-arm@0.23.1':
    optional: true

  '@esbuild/android-x64@0.18.20':
    optional: true

  '@esbuild/android-x64@0.19.12':
    optional: true

  '@esbuild/android-x64@0.23.1':
    optional: true

  '@esbuild/darwin-arm64@0.18.20':
    optional: true

  '@esbuild/darwin-arm64@0.19.12':
    optional: true

  '@esbuild/darwin-arm64@0.23.1':
    optional: true

  '@esbuild/darwin-x64@0.18.20':
    optional: true

  '@esbuild/darwin-x64@0.19.12':
    optional: true

  '@esbuild/darwin-x64@0.23.1':
    optional: true

  '@esbuild/freebsd-arm64@0.18.20':
    optional: true

  '@esbuild/freebsd-arm64@0.19.12':
    optional: true

  '@esbuild/freebsd-arm64@0.23.1':
    optional: true

  '@esbuild/freebsd-x64@0.18.20':
    optional: true

  '@esbuild/freebsd-x64@0.19.12':
    optional: true

  '@esbuild/freebsd-x64@0.23.1':
    optional: true

  '@esbuild/linux-arm64@0.18.20':
    optional: true

  '@esbuild/linux-arm64@0.19.12':
    optional: true

  '@esbuild/linux-arm64@0.23.1':
    optional: true

  '@esbuild/linux-arm@0.18.20':
    optional: true

  '@esbuild/linux-arm@0.19.12':
    optional: true

  '@esbuild/linux-arm@0.23.1':
    optional: true

  '@esbuild/linux-ia32@0.18.20':
    optional: true

  '@esbuild/linux-ia32@0.19.12':
    optional: true

  '@esbuild/linux-ia32@0.23.1':
    optional: true

  '@esbuild/linux-loong64@0.18.20':
    optional: true

  '@esbuild/linux-loong64@0.19.12':
    optional: true

  '@esbuild/linux-loong64@0.23.1':
    optional: true

  '@esbuild/linux-mips64el@0.18.20':
    optional: true

  '@esbuild/linux-mips64el@0.19.12':
    optional: true

  '@esbuild/linux-mips64el@0.23.1':
    optional: true

  '@esbuild/linux-ppc64@0.18.20':
    optional: true

  '@esbuild/linux-ppc64@0.19.12':
    optional: true

  '@esbuild/linux-ppc64@0.23.1':
    optional: true

  '@esbuild/linux-riscv64@0.18.20':
    optional: true

  '@esbuild/linux-riscv64@0.19.12':
    optional: true

  '@esbuild/linux-riscv64@0.23.1':
    optional: true

  '@esbuild/linux-s390x@0.18.20':
    optional: true

  '@esbuild/linux-s390x@0.19.12':
    optional: true

  '@esbuild/linux-s390x@0.23.1':
    optional: true

  '@esbuild/linux-x64@0.18.20':
    optional: true

  '@esbuild/linux-x64@0.19.12':
    optional: true

  '@esbuild/linux-x64@0.23.1':
    optional: true

  '@esbuild/netbsd-x64@0.18.20':
    optional: true

  '@esbuild/netbsd-x64@0.19.12':
    optional: true

  '@esbuild/netbsd-x64@0.23.1':
    optional: true

  '@esbuild/openbsd-arm64@0.23.1':
    optional: true

  '@esbuild/openbsd-x64@0.18.20':
    optional: true

  '@esbuild/openbsd-x64@0.19.12':
    optional: true

  '@esbuild/openbsd-x64@0.23.1':
    optional: true

  '@esbuild/sunos-x64@0.18.20':
    optional: true

  '@esbuild/sunos-x64@0.19.12':
    optional: true

  '@esbuild/sunos-x64@0.23.1':
    optional: true

  '@esbuild/win32-arm64@0.18.20':
    optional: true

  '@esbuild/win32-arm64@0.19.12':
    optional: true

  '@esbuild/win32-arm64@0.23.1':
    optional: true

  '@esbuild/win32-ia32@0.18.20':
    optional: true

  '@esbuild/win32-ia32@0.19.12':
    optional: true

  '@esbuild/win32-ia32@0.23.1':
    optional: true

  '@esbuild/win32-x64@0.18.20':
    optional: true

  '@esbuild/win32-x64@0.19.12':
    optional: true

  '@esbuild/win32-x64@0.23.1':
    optional: true

  '@eslint-community/eslint-utils@4.4.1(eslint@8.57.1)':
    dependencies:
      eslint: 8.57.1
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.7
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.2
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.1': {}

  '@floating-ui/core@1.6.8':
    dependencies:
      '@floating-ui/utils': 0.2.8

  '@floating-ui/dom@1.6.12':
    dependencies:
      '@floating-ui/core': 1.6.8
      '@floating-ui/utils': 0.2.8

  '@floating-ui/react-dom@2.1.2(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@floating-ui/dom': 1.6.12
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@floating-ui/utils@0.2.8': {}

  '@gar/promisify@1.1.3':
    optional: true

  '@hookform/resolvers@3.9.1(react-hook-form@7.53.2(react@19.0.0-rc-66855b96-20241106))':
    dependencies:
      react-hook-form: 7.53.2(react@19.0.0-rc-66855b96-20241106)

  '@humanwhocodes/config-array@0.13.0':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.3.7
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@img/sharp-darwin-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.0.4
    optional: true

  '@img/sharp-darwin-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.0.4
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-arm@1.0.5':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.0.4':
    optional: true

  '@img/sharp-libvips-linux-x64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.0.4':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.0.4':
    optional: true

  '@img/sharp-linux-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.0.4
    optional: true

  '@img/sharp-linux-arm@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.0.5
    optional: true

  '@img/sharp-linux-s390x@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.0.4
    optional: true

  '@img/sharp-linux-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-arm64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
    optional: true

  '@img/sharp-linuxmusl-x64@0.33.5':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
    optional: true

  '@img/sharp-wasm32@0.33.5':
    dependencies:
      '@emnapi/runtime': 1.3.1
    optional: true

  '@img/sharp-win32-ia32@0.33.5':
    optional: true

  '@img/sharp-win32-x64@0.33.5':
    optional: true

  '@ioredis/commands@1.2.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/source-map@0.3.6':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@ljharb/resumer@0.0.1':
    dependencies:
      '@ljharb/through': 2.3.13

  '@ljharb/through@2.3.13':
    dependencies:
      call-bind: 1.0.7

  '@monaco-editor/loader@1.4.0(monaco-editor@0.52.0)':
    dependencies:
      monaco-editor: 0.52.0
      state-local: 1.0.7

  '@monaco-editor/react@4.6.0(monaco-editor@0.52.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@monaco-editor/loader': 1.4.0(monaco-editor@0.52.0)
      monaco-editor: 0.52.0
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  '@msgpackr-extract/msgpackr-extract-darwin-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-darwin-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-arm@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3':
    optional: true

  '@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3':
    optional: true

  '@naoak/workerize-transferable@0.1.0(workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)))':
    dependencies:
      workerize-loader: 2.0.2(webpack@5.97.1(esbuild@0.19.12))

  '@next/env@15.0.3': {}

  '@next/eslint-plugin-next@15.0.3':
    dependencies:
      fast-glob: 3.3.1

  '@next/swc-darwin-arm64@15.0.3':
    optional: true

  '@next/swc-darwin-x64@15.0.3':
    optional: true

  '@next/swc-linux-arm64-gnu@15.0.3':
    optional: true

  '@next/swc-linux-arm64-musl@15.0.3':
    optional: true

  '@next/swc-linux-x64-gnu@15.0.3':
    optional: true

  '@next/swc-linux-x64-musl@15.0.3':
    optional: true

  '@next/swc-win32-arm64-msvc@15.0.3':
    optional: true

  '@next/swc-win32-x64-msvc@15.0.3':
    optional: true

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@nolyfill/is-core-module@1.0.39': {}

  '@npmcli/fs@1.1.1':
    dependencies:
      '@gar/promisify': 1.1.3
      semver: 7.6.3
    optional: true

  '@npmcli/move-file@1.1.2':
    dependencies:
      mkdirp: 1.0.4
      rimraf: 3.0.2
    optional: true

  '@opentelemetry/api@1.9.0': {}

  '@panva/hkdf@1.2.1': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@prisma/debug@6.0.0': {}

  '@prisma/engines-version@5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e': {}

  '@prisma/engines@6.0.0':
    dependencies:
      '@prisma/debug': 6.0.0
      '@prisma/engines-version': 5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e
      '@prisma/fetch-engine': 6.0.0
      '@prisma/get-platform': 6.0.0

  '@prisma/fetch-engine@6.0.0':
    dependencies:
      '@prisma/debug': 6.0.0
      '@prisma/engines-version': 5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e
      '@prisma/get-platform': 6.0.0

  '@prisma/get-platform@6.0.0':
    dependencies:
      '@prisma/debug': 6.0.0

  '@radix-ui/number@1.1.0': {}

  '@radix-ui/primitive@1.1.0': {}

  '@radix-ui/react-alert-dialog@1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-dialog': 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-slot': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-arrow@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-checkbox@1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-size': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-collection@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-slot': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-compose-refs@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-context@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-context@1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-dialog@1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-dismissable-layer': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-focus-scope': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-id': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-portal': 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-slot': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      aria-hidden: 1.2.4
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-remove-scroll: 2.6.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-direction@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-dismissable-layer@1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-escape-keydown': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-focus-guards@1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-focus-scope@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-hover-card@1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-dismissable-layer': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-popper': 1.2.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-portal': 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-id@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-label@2.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-popper@1.2.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@floating-ui/react-dom': 2.1.2(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-arrow': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-rect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-size': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/rect': 1.1.0
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-portal@1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-presence@1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-primitive@2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-slot': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-radio-group@1.2.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-direction': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-roving-focus': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-size': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-roving-focus@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-collection': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-direction': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-id': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-scroll-area@1.2.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-direction': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-select@2.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/number': 1.1.0
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-collection': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-direction': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-dismissable-layer': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-focus-guards': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-focus-scope': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-id': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-popper': 1.2.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-portal': 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-slot': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-visually-hidden': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      aria-hidden: 1.2.4
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-remove-scroll: 2.6.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-separator@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-slot@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-switch@1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-compose-refs': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-previous': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-size': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-tabs@1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/primitive': 1.1.0
      '@radix-ui/react-context': 1.1.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-direction': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-id': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-presence': 1.1.1(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-roving-focus': 1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-use-controllable-state': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/react-use-callback-ref@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-controllable-state@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-escape-keydown@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-use-callback-ref': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-layout-effect@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-previous@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-rect@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/rect': 1.1.0
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-use-size@1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-use-layout-effect': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
    optionalDependencies:
      '@types/react': 18.3.12

  '@radix-ui/react-visually-hidden@1.1.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)':
    dependencies:
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12
      '@types/react-dom': 18.3.1

  '@radix-ui/rect@1.1.0': {}

  '@redux-devtools/extension@3.3.0(redux@5.0.1)':
    dependencies:
      '@babel/runtime': 7.26.0
      immutable: 4.3.7
      redux: 5.0.1

  '@remix-run/router@1.21.0': {}

  '@rtsao/scc@1.1.0': {}

  '@rushstack/eslint-patch@1.10.4': {}

  '@supabase/auth-js@2.65.1':
    dependencies:
      '@supabase/node-fetch': 2.6.15

  '@supabase/functions-js@2.4.3':
    dependencies:
      '@supabase/node-fetch': 2.6.15

  '@supabase/node-fetch@2.6.15':
    dependencies:
      whatwg-url: 5.0.0

  '@supabase/postgrest-js@1.16.3':
    dependencies:
      '@supabase/node-fetch': 2.6.15

  '@supabase/realtime-js@2.10.9':
    dependencies:
      '@supabase/node-fetch': 2.6.15
      '@types/phoenix': 1.6.6
      '@types/ws': 8.5.13
      ws: 8.18.0
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@supabase/storage-js@2.7.1':
    dependencies:
      '@supabase/node-fetch': 2.6.15

  '@supabase/supabase-js@2.46.2':
    dependencies:
      '@supabase/auth-js': 2.65.1
      '@supabase/functions-js': 2.4.3
      '@supabase/node-fetch': 2.6.15
      '@supabase/postgrest-js': 1.16.3
      '@supabase/realtime-js': 2.10.9
      '@supabase/storage-js': 2.7.1
    transitivePeerDependencies:
      - bufferutil
      - utf-8-validate

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.13':
    dependencies:
      tslib: 2.8.1

  '@tootallnate/once@1.1.2':
    optional: true

  '@types/debug@4.1.12':
    dependencies:
      '@types/ms': 0.7.34

  '@types/diff-match-patch@1.0.36': {}

  '@types/eslint-scope@3.7.7':
    dependencies:
      '@types/eslint': 9.6.1
      '@types/estree': 1.0.6

  '@types/eslint@9.6.1':
    dependencies:
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15

  '@types/estree-jsx@1.0.5':
    dependencies:
      '@types/estree': 1.0.6

  '@types/estree@1.0.6': {}

  '@types/hast@3.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/js-cookie@2.2.7': {}

  '@types/json-schema@7.0.15': {}

  '@types/json5@0.0.29': {}

  '@types/lodash@4.17.13': {}

  '@types/mdast@4.0.4':
    dependencies:
      '@types/unist': 3.0.3

  '@types/ms@0.7.34': {}

  '@types/node-fetch@2.6.12':
    dependencies:
      '@types/node': 20.17.9
      form-data: 4.0.1

  '@types/node@18.19.68':
    dependencies:
      undici-types: 5.26.5

  '@types/node@20.17.9':
    dependencies:
      undici-types: 6.19.8

  '@types/pg@8.11.10':
    dependencies:
      '@types/node': 20.17.9
      pg-protocol: 1.7.0
      pg-types: 4.0.2

  '@types/phoenix@1.6.6': {}

  '@types/prop-types@15.7.13': {}

  '@types/react-dom@18.3.1':
    dependencies:
      '@types/react': 18.3.12

  '@types/react-grid-layout@1.3.5':
    dependencies:
      '@types/react': 18.3.12

  '@types/react@18.3.12':
    dependencies:
      '@types/prop-types': 15.7.13
      csstype: 3.1.3

  '@types/stylis@4.2.5': {}

  '@types/unist@2.0.11': {}

  '@types/unist@3.0.3': {}

  '@types/ws@8.5.13':
    dependencies:
      '@types/node': 20.17.9

  '@typescript-eslint/eslint-plugin@8.16.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/scope-manager': 8.16.0
      '@typescript-eslint/type-utils': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/utils': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/visitor-keys': 8.16.0
      eslint: 8.57.1
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 1.4.2(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.16.0
      '@typescript-eslint/types': 8.16.0
      '@typescript-eslint/typescript-estree': 8.16.0(typescript@5.7.2)
      '@typescript-eslint/visitor-keys': 8.16.0
      debug: 4.3.7
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.16.0':
    dependencies:
      '@typescript-eslint/types': 8.16.0
      '@typescript-eslint/visitor-keys': 8.16.0

  '@typescript-eslint/type-utils@8.16.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.16.0(typescript@5.7.2)
      '@typescript-eslint/utils': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      debug: 4.3.7
      eslint: 8.57.1
      ts-api-utils: 1.4.2(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.16.0': {}

  '@typescript-eslint/typescript-estree@8.16.0(typescript@5.7.2)':
    dependencies:
      '@typescript-eslint/types': 8.16.0
      '@typescript-eslint/visitor-keys': 8.16.0
      debug: 4.3.7
      fast-glob: 3.3.2
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.3
      ts-api-utils: 1.4.2(typescript@5.7.2)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.16.0(eslint@8.57.1)(typescript@5.7.2)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@typescript-eslint/scope-manager': 8.16.0
      '@typescript-eslint/types': 8.16.0
      '@typescript-eslint/typescript-estree': 8.16.0(typescript@5.7.2)
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.16.0':
    dependencies:
      '@typescript-eslint/types': 8.16.0
      eslint-visitor-keys: 4.2.0

  '@ungap/structured-clone@1.2.0': {}

  '@webassemblyjs/ast@1.14.1':
    dependencies:
      '@webassemblyjs/helper-numbers': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2

  '@webassemblyjs/floating-point-hex-parser@1.13.2': {}

  '@webassemblyjs/helper-api-error@1.13.2': {}

  '@webassemblyjs/helper-buffer@1.14.1': {}

  '@webassemblyjs/helper-numbers@1.13.2':
    dependencies:
      '@webassemblyjs/floating-point-hex-parser': 1.13.2
      '@webassemblyjs/helper-api-error': 1.13.2
      '@xtuc/long': 4.2.2

  '@webassemblyjs/helper-wasm-bytecode@1.13.2': {}

  '@webassemblyjs/helper-wasm-section@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/wasm-gen': 1.14.1

  '@webassemblyjs/ieee754@1.13.2':
    dependencies:
      '@xtuc/ieee754': 1.2.0

  '@webassemblyjs/leb128@1.13.2':
    dependencies:
      '@xtuc/long': 4.2.2

  '@webassemblyjs/utf8@1.13.2': {}

  '@webassemblyjs/wasm-edit@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/helper-wasm-section': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-opt': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      '@webassemblyjs/wast-printer': 1.14.1

  '@webassemblyjs/wasm-gen@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wasm-opt@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-buffer': 1.14.1
      '@webassemblyjs/wasm-gen': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1

  '@webassemblyjs/wasm-parser@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/helper-api-error': 1.13.2
      '@webassemblyjs/helper-wasm-bytecode': 1.13.2
      '@webassemblyjs/ieee754': 1.13.2
      '@webassemblyjs/leb128': 1.13.2
      '@webassemblyjs/utf8': 1.13.2

  '@webassemblyjs/wast-printer@1.14.1':
    dependencies:
      '@webassemblyjs/ast': 1.14.1
      '@xtuc/long': 4.2.2

  '@xobotyi/scrollbar-width@1.9.5': {}

  '@xtuc/ieee754@1.2.0': {}

  '@xtuc/long@4.2.2': {}

  abbrev@1.1.1:
    optional: true

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  acorn-jsx@5.3.2(acorn@8.14.0):
    dependencies:
      acorn: 8.14.0

  acorn@8.14.0: {}

  agent-base@6.0.2:
    dependencies:
      debug: 4.3.7
    transitivePeerDependencies:
      - supports-color
    optional: true

  agentkeepalive@4.5.0:
    dependencies:
      humanize-ms: 1.2.1

  aggregate-error@3.1.0:
    dependencies:
      clean-stack: 2.2.0
      indent-string: 4.0.0
    optional: true

  ai@4.0.18(react@19.0.0-rc-66855b96-20241106)(zod@3.23.8):
    dependencies:
      '@ai-sdk/provider': 1.0.2
      '@ai-sdk/provider-utils': 2.0.4(zod@3.23.8)
      '@ai-sdk/react': 1.0.6(react@19.0.0-rc-66855b96-20241106)(zod@3.23.8)
      '@ai-sdk/ui-utils': 1.0.5(zod@3.23.8)
      '@opentelemetry/api': 1.9.0
      jsondiffpatch: 0.6.0
      zod-to-json-schema: 3.24.1(zod@3.23.8)
    optionalDependencies:
      react: 19.0.0-rc-66855b96-20241106
      zod: 3.23.8

  ajv-formats@2.1.1(ajv@8.17.1):
    optionalDependencies:
      ajv: 8.17.1

  ajv-keywords@3.5.2(ajv@6.12.6):
    dependencies:
      ajv: 6.12.6

  ajv-keywords@5.1.0(ajv@8.17.1):
    dependencies:
      ajv: 8.17.1
      fast-deep-equal: 3.1.3

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ajv@8.17.1:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-uri: 3.0.5
      json-schema-traverse: 1.0.0
      require-from-string: 2.0.2

  align-text@0.1.4:
    dependencies:
      kind-of: 3.2.2
      longest: 1.0.1
      repeat-string: 1.6.1

  amdefine@1.0.1: {}

  ansi-regex@2.1.1: {}

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@2.2.1: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  aproba@2.0.0:
    optional: true

  are-we-there-yet@3.0.1:
    dependencies:
      delegates: 1.0.0
      readable-stream: 3.6.2
    optional: true

  arg@5.0.2: {}

  argparse@2.0.1: {}

  aria-hidden@1.2.4:
    dependencies:
      tslib: 2.8.1

  aria-query@5.3.2: {}

  array-buffer-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      is-array-buffer: 3.0.4

  array-includes@3.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      is-string: 1.0.7

  array.prototype.findlast@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.findlastindex@1.2.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-shim-unscopables: 1.0.2

  array.prototype.flat@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-shim-unscopables: 1.0.2

  array.prototype.flatmap@1.3.2:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-shim-unscopables: 1.0.2

  array.prototype.tosorted@1.1.4:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      es-shim-unscopables: 1.0.2

  arraybuffer.prototype.slice@1.0.3:
    dependencies:
      array-buffer-byte-length: 1.0.1
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      is-array-buffer: 3.0.4
      is-shared-array-buffer: 1.0.3

  ast-types-flow@0.0.8: {}

  asynckit@0.4.0: {}

  attr-accept@2.2.5: {}

  autoprefixer@10.4.20(postcss@8.4.49):
    dependencies:
      browserslist: 4.24.2
      caniuse-lite: 1.0.30001684
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.1.1
      postcss: 8.4.49
      postcss-value-parser: 4.2.0

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.0.0

  aws-ssl-profiles@1.1.2: {}

  axe-core@4.10.2: {}

  axios@1.7.8:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  axobject-query@4.1.0: {}

  bail@2.0.2: {}

  balanced-match@1.0.2: {}

  base64-arraybuffer@1.0.2: {}

  base64-js@1.5.1: {}

  big.js@5.2.2: {}

  binary-extensions@2.3.0: {}

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.24.2:
    dependencies:
      caniuse-lite: 1.0.30001684
      electron-to-chromium: 1.5.67
      node-releases: 2.0.18
      update-browserslist-db: 1.1.1(browserslist@4.24.2)

  bubblesets-js@2.3.4: {}

  buffer-from@1.1.2: {}

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  bullmq@5.30.0:
    dependencies:
      cron-parser: 4.9.0
      ioredis: 5.4.1
      msgpackr: 1.11.2
      node-abort-controller: 3.1.1
      semver: 7.6.3
      tslib: 2.8.1
      uuid: 9.0.1
    transitivePeerDependencies:
      - supports-color

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  cacache@15.3.0:
    dependencies:
      '@npmcli/fs': 1.1.1
      '@npmcli/move-file': 1.1.2
      chownr: 2.0.0
      fs-minipass: 2.1.0
      glob: 7.2.3
      infer-owner: 1.0.4
      lru-cache: 6.0.0
      minipass: 3.3.6
      minipass-collect: 1.0.2
      minipass-flush: 1.0.5
      minipass-pipeline: 1.2.4
      mkdirp: 1.0.4
      p-map: 4.0.0
      promise-inflight: 1.0.1
      rimraf: 3.0.2
      ssri: 8.0.1
      tar: 6.2.1
      unique-filename: 1.1.1
    transitivePeerDependencies:
      - bluebird
    optional: true

  call-bind-apply-helpers@1.0.1:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.7:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      set-function-length: 1.2.2

  call-bound@1.0.3:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      get-intrinsic: 1.2.7

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  camelcase@1.2.1: {}

  camelize@1.0.1: {}

  caniuse-lite@1.0.30001684: {}

  ccount@2.0.1: {}

  center-align@0.1.3:
    dependencies:
      align-text: 0.1.4
      lazy-cache: 1.0.4

  chalk@1.1.3:
    dependencies:
      ansi-styles: 2.2.1
      escape-string-regexp: 1.0.5
      has-ansi: 2.0.0
      strip-ansi: 3.0.1
      supports-color: 2.0.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.3.0: {}

  character-entities-html4@2.1.0: {}

  character-entities-legacy@3.0.0: {}

  character-entities@2.0.2: {}

  character-reference-invalid@2.0.1: {}

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  chownr@1.1.4: {}

  chownr@2.0.0: {}

  chrome-trace-event@1.0.4: {}

  class-variance-authority@0.7.1:
    dependencies:
      clsx: 2.1.1

  clean-stack@2.2.0:
    optional: true

  client-only@0.0.1: {}

  cliui@2.1.0:
    dependencies:
      center-align: 0.1.3
      right-align: 0.1.3
      wordwrap: 0.0.2

  clsx@1.2.1: {}

  clsx@2.1.1: {}

  cluster-key-slot@1.1.2: {}

  cmdk@1.0.4(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@radix-ui/react-dialog': 1.1.2(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-id': 1.1.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      '@radix-ui/react-primitive': 2.0.0(@types/react-dom@18.3.1)(@types/react@18.3.12)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      use-sync-external-store: 1.2.2(react@19.0.0-rc-66855b96-20241106)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2

  color-support@1.1.3:
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  comlink@4.4.2: {}

  comma-separated-tokens@2.0.3: {}

  commander@2.20.3: {}

  commander@4.1.1: {}

  commander@7.2.0: {}

  concat-map@0.0.1: {}

  console-control-strings@1.1.0:
    optional: true

  contour_plot@0.0.1: {}

  cookie@0.7.0: {}

  copy-to-clipboard@3.3.3:
    dependencies:
      toggle-selection: 1.0.6

  cron-parser@4.9.0:
    dependencies:
      luxon: 3.5.0

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  crypto-js@4.2.0: {}

  css-color-keywords@1.0.0: {}

  css-in-js-utils@3.1.0:
    dependencies:
      hyphenate-style-name: 1.1.0

  css-line-break@2.1.0:
    dependencies:
      utrie: 1.0.2

  css-to-react-native@3.2.0:
    dependencies:
      camelize: 1.0.1
      css-color-keywords: 1.0.0
      postcss-value-parser: 4.2.0

  css-tree@1.1.3:
    dependencies:
      mdn-data: 2.0.14
      source-map: 0.6.1

  cssesc@3.0.0: {}

  csstype@3.1.1: {}

  csstype@3.1.3: {}

  d3-array@3.2.4:
    dependencies:
      internmap: 2.0.3

  d3-binarytree@1.0.2: {}

  d3-color@3.1.0: {}

  d3-dispatch@3.0.1: {}

  d3-dsv@3.0.1:
    dependencies:
      commander: 7.2.0
      iconv-lite: 0.6.3
      rw: 1.3.3

  d3-force-3d@3.0.5:
    dependencies:
      d3-binarytree: 1.0.2
      d3-dispatch: 3.0.1
      d3-octree: 1.1.0
      d3-quadtree: 3.0.1
      d3-timer: 3.0.1

  d3-force@3.0.0:
    dependencies:
      d3-dispatch: 3.0.1
      d3-quadtree: 3.0.1
      d3-timer: 3.0.1

  d3-format@3.1.0: {}

  d3-geo@3.1.1:
    dependencies:
      d3-array: 3.2.4

  d3-hierarchy@3.1.2: {}

  d3-interpolate@3.0.1:
    dependencies:
      d3-color: 3.1.0

  d3-octree@1.1.0: {}

  d3-path@3.1.0: {}

  d3-quadtree@3.0.1: {}

  d3-scale-chromatic@3.1.0:
    dependencies:
      d3-color: 3.1.0
      d3-interpolate: 3.0.1

  d3-shape@3.2.0:
    dependencies:
      d3-path: 3.1.0

  d3-timer@3.0.1: {}

  dagre@0.8.5:
    dependencies:
      graphlib: 2.1.8
      lodash: 4.17.21

  damerau-levenshtein@1.0.8: {}

  data-view-buffer@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  data-view-byte-offset@1.0.0:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-data-view: 1.0.1

  debug@3.2.7:
    dependencies:
      ms: 2.1.3

  debug@4.3.7:
    dependencies:
      ms: 2.1.3

  decamelize@1.2.0: {}

  decode-named-character-reference@1.0.2:
    dependencies:
      character-entities: 2.0.2

  decompress-response@6.0.0:
    dependencies:
      mimic-response: 3.1.0

  deep-equal@1.1.2:
    dependencies:
      is-arguments: 1.2.0
      is-date-object: 1.0.5
      is-regex: 1.1.4
      object-is: 1.1.6
      object-keys: 1.1.1
      regexp.prototype.flags: 1.5.3

  deep-extend@0.6.0: {}

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.0
      es-errors: 1.3.0
      gopd: 1.0.1

  define-properties@1.2.1:
    dependencies:
      define-data-property: 1.1.4
      has-property-descriptors: 1.0.2
      object-keys: 1.1.1

  defined@1.0.1: {}

  delayed-stream@1.0.0: {}

  delegates@1.0.0:
    optional: true

  denque@2.1.0: {}

  dequal@2.0.3: {}

  detect-libc@2.0.3: {}

  detect-node-es@1.1.0: {}

  devlop@1.1.0:
    dependencies:
      dequal: 2.0.3

  didyoumean@1.2.2: {}

  diff-match-patch@1.0.5: {}

  discontinuous-range@1.0.0: {}

  dlv@1.1.3: {}

  doctrine@2.1.0:
    dependencies:
      esutils: 2.0.3

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  dot-case@3.0.4:
    dependencies:
      no-case: 3.0.4
      tslib: 2.8.1

  dotenv@16.4.7: {}

  dotignore@0.1.2:
    dependencies:
      minimatch: 3.1.2

  drizzle-kit@0.29.1:
    dependencies:
      '@drizzle-team/brocli': 0.10.2
      '@esbuild-kit/esm-loader': 2.6.5
      esbuild: 0.19.12
      esbuild-register: 3.6.0(esbuild@0.19.12)
    transitivePeerDependencies:
      - supports-color

  drizzle-orm@0.37.0(@opentelemetry/api@1.9.0)(@types/pg@8.11.10)(@types/react@18.3.12)(mysql2@3.11.5)(pg@8.13.1)(postgres@3.4.5)(prisma@6.0.0)(react@19.0.0-rc-66855b96-20241106)(sqlite3@5.1.7):
    optionalDependencies:
      '@opentelemetry/api': 1.9.0
      '@types/pg': 8.11.10
      '@types/react': 18.3.12
      mysql2: 3.11.5
      pg: 8.13.1
      postgres: 3.4.5
      prisma: 6.0.0
      react: 19.0.0-rc-66855b96-20241106
      sqlite3: 5.1.7

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  echarts-for-react@3.0.2(echarts@5.5.1)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      echarts: 5.5.1
      fast-deep-equal: 3.1.3
      react: 19.0.0-rc-66855b96-20241106
      size-sensor: 1.0.2

  echarts@5.5.1:
    dependencies:
      tslib: 2.3.0
      zrender: 5.6.0

  electron-to-chromium@1.5.67: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  emojis-list@3.0.0: {}

  encoding@0.1.13:
    dependencies:
      iconv-lite: 0.6.3
    optional: true

  end-of-stream@1.4.4:
    dependencies:
      once: 1.4.0

  enhanced-resolve@5.17.1:
    dependencies:
      graceful-fs: 4.2.11
      tapable: 2.2.1

  env-paths@2.2.1:
    optional: true

  err-code@2.0.3:
    optional: true

  error-stack-parser@2.1.4:
    dependencies:
      stackframe: 1.3.4

  es-abstract@1.23.5:
    dependencies:
      array-buffer-byte-length: 1.0.1
      arraybuffer.prototype.slice: 1.0.3
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      data-view-buffer: 1.0.1
      data-view-byte-length: 1.0.1
      data-view-byte-offset: 1.0.0
      es-define-property: 1.0.0
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      es-set-tostringtag: 2.0.3
      es-to-primitive: 1.3.0
      function.prototype.name: 1.1.6
      get-intrinsic: 1.2.4
      get-symbol-description: 1.0.2
      globalthis: 1.0.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2
      internal-slot: 1.0.7
      is-array-buffer: 3.0.4
      is-callable: 1.2.7
      is-data-view: 1.0.1
      is-negative-zero: 2.0.3
      is-regex: 1.1.4
      is-shared-array-buffer: 1.0.3
      is-string: 1.0.7
      is-typed-array: 1.1.13
      is-weakref: 1.0.2
      object-inspect: 1.13.3
      object-keys: 1.1.1
      object.assign: 4.1.5
      regexp.prototype.flags: 1.5.3
      safe-array-concat: 1.1.2
      safe-regex-test: 1.0.3
      string.prototype.trim: 1.2.9
      string.prototype.trimend: 1.0.8
      string.prototype.trimstart: 1.0.8
      typed-array-buffer: 1.0.2
      typed-array-byte-length: 1.0.1
      typed-array-byte-offset: 1.0.3
      typed-array-length: 1.0.7
      unbox-primitive: 1.0.2
      which-typed-array: 1.1.16

  es-define-property@1.0.0:
    dependencies:
      get-intrinsic: 1.2.4

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-iterator-helpers@1.2.0:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      es-set-tostringtag: 2.0.3
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      globalthis: 1.0.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      iterator.prototype: 1.1.3
      safe-array-concat: 1.1.2

  es-module-lexer@1.6.0: {}

  es-object-atoms@1.0.0:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.0.3:
    dependencies:
      get-intrinsic: 1.2.4
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  es-shim-unscopables@1.0.2:
    dependencies:
      hasown: 2.0.2

  es-to-primitive@1.3.0:
    dependencies:
      is-callable: 1.2.7
      is-date-object: 1.0.5
      is-symbol: 1.0.4

  es-toolkit@1.29.0: {}

  esbuild-register@3.6.0(esbuild@0.19.12):
    dependencies:
      debug: 4.3.7
      esbuild: 0.19.12
    transitivePeerDependencies:
      - supports-color

  esbuild@0.18.20:
    optionalDependencies:
      '@esbuild/android-arm': 0.18.20
      '@esbuild/android-arm64': 0.18.20
      '@esbuild/android-x64': 0.18.20
      '@esbuild/darwin-arm64': 0.18.20
      '@esbuild/darwin-x64': 0.18.20
      '@esbuild/freebsd-arm64': 0.18.20
      '@esbuild/freebsd-x64': 0.18.20
      '@esbuild/linux-arm': 0.18.20
      '@esbuild/linux-arm64': 0.18.20
      '@esbuild/linux-ia32': 0.18.20
      '@esbuild/linux-loong64': 0.18.20
      '@esbuild/linux-mips64el': 0.18.20
      '@esbuild/linux-ppc64': 0.18.20
      '@esbuild/linux-riscv64': 0.18.20
      '@esbuild/linux-s390x': 0.18.20
      '@esbuild/linux-x64': 0.18.20
      '@esbuild/netbsd-x64': 0.18.20
      '@esbuild/openbsd-x64': 0.18.20
      '@esbuild/sunos-x64': 0.18.20
      '@esbuild/win32-arm64': 0.18.20
      '@esbuild/win32-ia32': 0.18.20
      '@esbuild/win32-x64': 0.18.20

  esbuild@0.19.12:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.19.12
      '@esbuild/android-arm': 0.19.12
      '@esbuild/android-arm64': 0.19.12
      '@esbuild/android-x64': 0.19.12
      '@esbuild/darwin-arm64': 0.19.12
      '@esbuild/darwin-x64': 0.19.12
      '@esbuild/freebsd-arm64': 0.19.12
      '@esbuild/freebsd-x64': 0.19.12
      '@esbuild/linux-arm': 0.19.12
      '@esbuild/linux-arm64': 0.19.12
      '@esbuild/linux-ia32': 0.19.12
      '@esbuild/linux-loong64': 0.19.12
      '@esbuild/linux-mips64el': 0.19.12
      '@esbuild/linux-ppc64': 0.19.12
      '@esbuild/linux-riscv64': 0.19.12
      '@esbuild/linux-s390x': 0.19.12
      '@esbuild/linux-x64': 0.19.12
      '@esbuild/netbsd-x64': 0.19.12
      '@esbuild/openbsd-x64': 0.19.12
      '@esbuild/sunos-x64': 0.19.12
      '@esbuild/win32-arm64': 0.19.12
      '@esbuild/win32-ia32': 0.19.12
      '@esbuild/win32-x64': 0.19.12

  esbuild@0.23.1:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.23.1
      '@esbuild/android-arm': 0.23.1
      '@esbuild/android-arm64': 0.23.1
      '@esbuild/android-x64': 0.23.1
      '@esbuild/darwin-arm64': 0.23.1
      '@esbuild/darwin-x64': 0.23.1
      '@esbuild/freebsd-arm64': 0.23.1
      '@esbuild/freebsd-x64': 0.23.1
      '@esbuild/linux-arm': 0.23.1
      '@esbuild/linux-arm64': 0.23.1
      '@esbuild/linux-ia32': 0.23.1
      '@esbuild/linux-loong64': 0.23.1
      '@esbuild/linux-mips64el': 0.23.1
      '@esbuild/linux-ppc64': 0.23.1
      '@esbuild/linux-riscv64': 0.23.1
      '@esbuild/linux-s390x': 0.23.1
      '@esbuild/linux-x64': 0.23.1
      '@esbuild/netbsd-x64': 0.23.1
      '@esbuild/openbsd-arm64': 0.23.1
      '@esbuild/openbsd-x64': 0.23.1
      '@esbuild/sunos-x64': 0.23.1
      '@esbuild/win32-arm64': 0.23.1
      '@esbuild/win32-ia32': 0.23.1
      '@esbuild/win32-x64': 0.23.1

  escalade@3.2.0: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-next@15.0.3(eslint@8.57.1)(typescript@5.7.2):
    dependencies:
      '@next/eslint-plugin-next': 15.0.3
      '@rushstack/eslint-patch': 1.10.4
      '@typescript-eslint/eslint-plugin': 8.16.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/parser': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1)
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
      eslint-plugin-jsx-a11y: 6.10.2(eslint@8.57.1)
      eslint-plugin-react: 7.37.2(eslint@8.57.1)
      eslint-plugin-react-hooks: 5.0.0(eslint@8.57.1)
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - eslint-import-resolver-webpack
      - eslint-plugin-import-x
      - supports-color

  eslint-import-resolver-node@0.3.9:
    dependencies:
      debug: 3.2.7
      is-core-module: 2.15.1
      resolve: 1.22.8
    transitivePeerDependencies:
      - supports-color

  eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1):
    dependencies:
      '@nolyfill/is-core-module': 1.0.39
      debug: 4.3.7
      enhanced-resolve: 5.17.1
      eslint: 8.57.1
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
      fast-glob: 3.3.2
      get-tsconfig: 4.8.1
      is-bun-module: 1.3.0
      is-glob: 4.0.3
    optionalDependencies:
      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
    transitivePeerDependencies:
      - '@typescript-eslint/parser'
      - eslint-import-resolver-node
      - eslint-import-resolver-webpack
      - supports-color

  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1):
    dependencies:
      debug: 3.2.7
    optionalDependencies:
      '@typescript-eslint/parser': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1)
    transitivePeerDependencies:
      - supports-color

  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1):
    dependencies:
      '@rtsao/scc': 1.1.0
      array-includes: 3.1.8
      array.prototype.findlastindex: 1.2.5
      array.prototype.flat: 1.3.2
      array.prototype.flatmap: 1.3.2
      debug: 3.2.7
      doctrine: 2.1.0
      eslint: 8.57.1
      eslint-import-resolver-node: 0.3.9
      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1))(eslint@8.57.1))(eslint@8.57.1)
      hasown: 2.0.2
      is-core-module: 2.15.1
      is-glob: 4.0.3
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      object.groupby: 1.0.3
      object.values: 1.2.0
      semver: 6.3.1
      string.prototype.trimend: 1.0.8
      tsconfig-paths: 3.15.0
    optionalDependencies:
      '@typescript-eslint/parser': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
    transitivePeerDependencies:
      - eslint-import-resolver-typescript
      - eslint-import-resolver-webpack
      - supports-color

  eslint-plugin-jsx-a11y@6.10.2(eslint@8.57.1):
    dependencies:
      aria-query: 5.3.2
      array-includes: 3.1.8
      array.prototype.flatmap: 1.3.2
      ast-types-flow: 0.0.8
      axe-core: 4.10.2
      axobject-query: 4.1.0
      damerau-levenshtein: 1.0.8
      emoji-regex: 9.2.2
      eslint: 8.57.1
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      language-tags: 1.0.9
      minimatch: 3.1.2
      object.fromentries: 2.0.8
      safe-regex-test: 1.0.3
      string.prototype.includes: 2.0.1

  eslint-plugin-react-hooks@5.0.0(eslint@8.57.1):
    dependencies:
      eslint: 8.57.1

  eslint-plugin-react@7.37.2(eslint@8.57.1):
    dependencies:
      array-includes: 3.1.8
      array.prototype.findlast: 1.2.5
      array.prototype.flatmap: 1.3.2
      array.prototype.tosorted: 1.1.4
      doctrine: 2.1.0
      es-iterator-helpers: 1.2.0
      eslint: 8.57.1
      estraverse: 5.3.0
      hasown: 2.0.2
      jsx-ast-utils: 3.3.5
      minimatch: 3.1.2
      object.entries: 1.1.8
      object.fromentries: 2.0.8
      object.values: 1.2.0
      prop-types: 15.8.1
      resolve: 2.0.0-next.5
      semver: 6.3.1
      string.prototype.matchall: 4.0.11
      string.prototype.repeat: 1.0.0

  eslint-scope@5.1.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 4.3.0

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.0: {}

  eslint@8.57.1:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@8.57.1)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.1
      '@humanwhocodes/config-array': 0.13.0
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.3.7
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      eslint-visitor-keys: 3.4.3

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@4.3.0: {}

  estraverse@5.3.0: {}

  estree-util-is-identifier-name@3.0.0: {}

  esutils@2.0.3: {}

  event-target-shim@5.0.1: {}

  eventemitter3@5.0.1: {}

  events@3.3.0: {}

  eventsource-parser@3.0.0: {}

  expand-template@2.0.3: {}

  extend@3.0.2: {}

  ezheaders@0.1.0(next@15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)):
    dependencies:
      next: 15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)

  fast-deep-equal@3.1.3: {}

  fast-equals@4.0.3: {}

  fast-glob@3.3.1:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fast-shallow-equal@1.0.0: {}

  fast-uri@3.0.5: {}

  fastest-stable-stringify@2.0.2: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fecha@4.2.3: {}

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  file-selector@2.1.2:
    dependencies:
      tslib: 2.8.1

  file-uri-to-path@1.0.0: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.2
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.2: {}

  flru@1.0.2: {}

  fmin@0.0.2:
    dependencies:
      contour_plot: 0.0.1
      json2module: 0.0.3
      rollup: 0.25.8
      tape: 4.17.0
      uglify-js: 2.8.29

  follow-redirects@1.15.9: {}

  for-each@0.3.3:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data-encoder@1.7.2: {}

  form-data@4.0.1:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  formdata-node@4.4.1:
    dependencies:
      node-domexception: 1.0.0
      web-streams-polyfill: 4.0.0-beta.3

  fraction.js@4.3.7: {}

  framer-motion@11.12.0(@emotion/is-prop-valid@1.2.2)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      tslib: 2.8.1
    optionalDependencies:
      '@emotion/is-prop-valid': 1.2.2
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  fs-constants@1.0.0: {}

  fs-minipass@2.1.0:
    dependencies:
      minipass: 3.3.6

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  function.prototype.name@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      functions-have-names: 1.2.3

  functions-have-names@1.2.3: {}

  gauge@4.0.4:
    dependencies:
      aproba: 2.0.0
      color-support: 1.1.3
      console-control-strings: 1.1.0
      has-unicode: 2.0.1
      signal-exit: 3.0.7
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wide-align: 1.1.5
    optional: true

  generate-function@2.3.1:
    dependencies:
      is-property: 1.0.2

  get-intrinsic@1.2.4:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2
      has-proto: 1.0.3
      has-symbols: 1.0.3
      hasown: 2.0.2

  get-intrinsic@1.2.7:
    dependencies:
      call-bind-apply-helpers: 1.0.1
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-nonce@1.0.1: {}

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.0.0

  get-stdin@8.0.0: {}

  get-symbol-description@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4

  get-tsconfig@4.8.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  github-from-package@0.0.0: {}

  gl-matrix@3.4.3: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob-to-regexp@0.4.1: {}

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globals@15.12.0: {}

  globalthis@1.0.4:
    dependencies:
      define-properties: 1.2.1
      gopd: 1.0.1

  gopd@1.0.1:
    dependencies:
      get-intrinsic: 1.2.4

  gopd@1.2.0: {}

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  graphlib@2.1.8:
    dependencies:
      lodash: 4.17.21

  has-ansi@2.0.0:
    dependencies:
      ansi-regex: 2.1.1

  has-bigints@1.0.2: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.0

  has-proto@1.0.3: {}

  has-symbols@1.0.3: {}

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.0.3

  has-unicode@2.0.1:
    optional: true

  has@1.0.4: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hast-util-to-jsx-runtime@2.3.2:
    dependencies:
      '@types/estree': 1.0.6
      '@types/hast': 3.0.4
      '@types/unist': 3.0.3
      comma-separated-tokens: 2.0.3
      devlop: 1.1.0
      estree-util-is-identifier-name: 3.0.0
      hast-util-whitespace: 3.0.0
      mdast-util-mdx-expression: 2.0.1
      mdast-util-mdx-jsx: 3.1.3
      mdast-util-mdxjs-esm: 2.0.1
      property-information: 6.5.0
      space-separated-tokens: 2.0.2
      style-to-object: 1.0.8
      unist-util-position: 5.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  hast-util-whitespace@3.0.0:
    dependencies:
      '@types/hast': 3.0.4

  html-url-attributes@3.0.1: {}

  html2canvas@1.4.1:
    dependencies:
      css-line-break: 2.1.0
      text-segmentation: 1.0.3

  http-cache-semantics@4.1.1:
    optional: true

  http-proxy-agent@4.0.1:
    dependencies:
      '@tootallnate/once': 1.1.2
      agent-base: 6.0.2
      debug: 4.3.7
    transitivePeerDependencies:
      - supports-color
    optional: true

  https-proxy-agent@5.0.1:
    dependencies:
      agent-base: 6.0.2
      debug: 4.3.7
    transitivePeerDependencies:
      - supports-color
    optional: true

  hull.js@1.0.6: {}

  humanize-ms@1.2.1:
    dependencies:
      ms: 2.1.3

  hyphenate-style-name@1.1.0: {}

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  immutable@4.3.7: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  indent-string@4.0.0:
    optional: true

  infer-owner@1.0.4:
    optional: true

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  ini@1.3.8: {}

  inline-style-parser@0.2.4: {}

  inline-style-prefixer@7.0.1:
    dependencies:
      css-in-js-utils: 3.1.0

  internal-slot@1.0.7:
    dependencies:
      es-errors: 1.3.0
      hasown: 2.0.2
      side-channel: 1.0.6

  internmap@2.0.3: {}

  invariant@2.2.4:
    dependencies:
      loose-envify: 1.4.0

  ioredis@5.4.1:
    dependencies:
      '@ioredis/commands': 1.2.0
      cluster-key-slot: 1.1.2
      debug: 4.3.7
      denque: 2.1.0
      lodash.defaults: 4.2.0
      lodash.isarguments: 3.1.0
      redis-errors: 1.2.0
      redis-parser: 3.0.0
      standard-as-callback: 2.1.0
    transitivePeerDependencies:
      - supports-color

  ip-address@9.0.5:
    dependencies:
      jsbn: 1.1.0
      sprintf-js: 1.1.3
    optional: true

  is-alphabetical@2.0.1: {}

  is-alphanumerical@2.0.1:
    dependencies:
      is-alphabetical: 2.0.1
      is-decimal: 2.0.1

  is-any-array@2.0.1: {}

  is-arguments@1.2.0:
    dependencies:
      call-bound: 1.0.3
      has-tostringtag: 1.0.2

  is-array-buffer@3.0.4:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  is-arrayish@0.3.2: {}

  is-async-function@2.0.0:
    dependencies:
      has-tostringtag: 1.0.2

  is-bigint@1.0.4:
    dependencies:
      has-bigints: 1.0.2

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-boolean-object@1.1.2:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-buffer@1.1.6: {}

  is-bun-module@1.3.0:
    dependencies:
      semver: 7.6.3

  is-callable@1.2.7: {}

  is-core-module@2.15.1:
    dependencies:
      hasown: 2.0.2

  is-data-view@1.0.1:
    dependencies:
      is-typed-array: 1.1.13

  is-date-object@1.0.5:
    dependencies:
      has-tostringtag: 1.0.2

  is-decimal@2.0.1: {}

  is-extglob@2.1.1: {}

  is-finalizationregistry@1.1.0:
    dependencies:
      call-bind: 1.0.7

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.0.10:
    dependencies:
      has-tostringtag: 1.0.2

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-hexadecimal@2.0.1: {}

  is-lambda@1.0.1:
    optional: true

  is-map@2.0.3: {}

  is-negative-zero@2.0.3: {}

  is-number-object@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-plain-obj@4.1.0: {}

  is-property@1.0.2: {}

  is-regex@1.1.4:
    dependencies:
      call-bind: 1.0.7
      has-tostringtag: 1.0.2

  is-set@2.0.3: {}

  is-shared-array-buffer@1.0.3:
    dependencies:
      call-bind: 1.0.7

  is-string@1.0.7:
    dependencies:
      has-tostringtag: 1.0.2

  is-symbol@1.0.4:
    dependencies:
      has-symbols: 1.0.3

  is-typed-array@1.1.13:
    dependencies:
      which-typed-array: 1.1.16

  is-weakmap@2.0.2: {}

  is-weakref@1.0.2:
    dependencies:
      call-bind: 1.0.7

  is-weakset@2.0.3:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4

  isarray@2.0.5: {}

  isexe@2.0.0: {}

  iterator.prototype@1.1.3:
    dependencies:
      define-properties: 1.2.1
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      reflect.getprototypeof: 1.0.7
      set-function-name: 2.0.2

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jest-worker@27.5.1:
    dependencies:
      '@types/node': 20.17.9
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jiti@1.21.6: {}

  jose@5.9.6: {}

  js-cookie@2.2.1: {}

  js-cookie@3.0.5: {}

  js-tokens@4.0.0: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsbn@1.1.0:
    optional: true

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-schema-traverse@1.0.0: {}

  json-schema@0.4.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json2module@0.0.3:
    dependencies:
      rw: 1.3.3

  json5@1.0.2:
    dependencies:
      minimist: 1.2.8

  json5@2.2.3: {}

  jsondiffpatch@0.6.0:
    dependencies:
      '@types/diff-match-patch': 1.0.36
      chalk: 5.3.0
      diff-match-patch: 1.0.5

  jsx-ast-utils@3.3.5:
    dependencies:
      array-includes: 3.1.8
      array.prototype.flat: 1.3.2
      object.assign: 4.1.5
      object.values: 1.2.0

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kind-of@3.2.2:
    dependencies:
      is-buffer: 1.1.6

  language-subtag-registry@0.3.23: {}

  language-tags@1.0.9:
    dependencies:
      language-subtag-registry: 0.3.23

  lazy-cache@1.0.4: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@2.1.0: {}

  lilconfig@3.1.2: {}

  lines-and-columns@1.2.4: {}

  loader-runner@4.3.0: {}

  loader-utils@2.0.4:
    dependencies:
      big.js: 5.2.2
      emojis-list: 3.0.0
      json5: 2.2.3

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.defaults@4.2.0: {}

  lodash.isarguments@3.1.0: {}

  lodash.merge@4.6.2: {}

  lodash@4.17.21: {}

  long@5.2.3: {}

  longest-streak@3.1.0: {}

  longest@1.0.1: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lower-case@2.0.2:
    dependencies:
      tslib: 2.8.1

  lru-cache@10.4.3: {}

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0
    optional: true

  lru-cache@7.18.3: {}

  lru.min@1.1.1: {}

  lucide-react@0.462.0(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106

  luxon@3.5.0: {}

  make-fetch-happen@9.1.0:
    dependencies:
      agentkeepalive: 4.5.0
      cacache: 15.3.0
      http-cache-semantics: 4.1.1
      http-proxy-agent: 4.0.1
      https-proxy-agent: 5.0.1
      is-lambda: 1.0.1
      lru-cache: 6.0.0
      minipass: 3.3.6
      minipass-collect: 1.0.2
      minipass-fetch: 1.4.1
      minipass-flush: 1.0.5
      minipass-pipeline: 1.2.4
      negotiator: 0.6.4
      promise-retry: 2.0.1
      socks-proxy-agent: 6.2.1
      ssri: 8.0.1
    transitivePeerDependencies:
      - bluebird
      - supports-color
    optional: true

  map-obj@4.3.0: {}

  math-intrinsics@1.1.0: {}

  mdast-util-from-markdown@2.0.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      mdast-util-to-string: 4.0.0
      micromark: 4.0.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-decode-string: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
      unist-util-stringify-position: 4.0.0
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-expression@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdx-jsx@3.1.3:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      ccount: 2.0.1
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
      parse-entities: 4.0.1
      stringify-entities: 4.0.4
      unist-util-stringify-position: 4.0.0
      vfile-message: 4.0.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-mdxjs-esm@2.0.1:
    dependencies:
      '@types/estree-jsx': 1.0.5
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      devlop: 1.1.0
      mdast-util-from-markdown: 2.0.2
      mdast-util-to-markdown: 2.1.2
    transitivePeerDependencies:
      - supports-color

  mdast-util-phrasing@4.1.0:
    dependencies:
      '@types/mdast': 4.0.4
      unist-util-is: 6.0.0

  mdast-util-to-hast@13.2.0:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      '@ungap/structured-clone': 1.2.0
      devlop: 1.1.0
      micromark-util-sanitize-uri: 2.0.1
      trim-lines: 3.0.1
      unist-util-position: 5.0.0
      unist-util-visit: 5.0.0
      vfile: 6.0.3

  mdast-util-to-markdown@2.1.2:
    dependencies:
      '@types/mdast': 4.0.4
      '@types/unist': 3.0.3
      longest-streak: 3.1.0
      mdast-util-phrasing: 4.1.0
      mdast-util-to-string: 4.0.0
      micromark-util-classify-character: 2.0.1
      micromark-util-decode-string: 2.0.1
      unist-util-visit: 5.0.0
      zwitch: 2.0.4

  mdast-util-to-string@4.0.0:
    dependencies:
      '@types/mdast': 4.0.4

  mdn-data@2.0.14: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  micromark-core-commonmark@2.0.2:
    dependencies:
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-factory-destination: 2.0.1
      micromark-factory-label: 2.0.1
      micromark-factory-space: 2.0.1
      micromark-factory-title: 2.0.1
      micromark-factory-whitespace: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-classify-character: 2.0.1
      micromark-util-html-tag-name: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-subtokenize: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-destination@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-label@2.0.1:
    dependencies:
      devlop: 1.1.0
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-space@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-types: 2.0.1

  micromark-factory-title@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-factory-whitespace@2.0.1:
    dependencies:
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-character@2.1.1:
    dependencies:
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-chunked@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-classify-character@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-combine-extensions@2.0.1:
    dependencies:
      micromark-util-chunked: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-decode-numeric-character-reference@2.0.2:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-decode-string@2.0.1:
    dependencies:
      decode-named-character-reference: 1.0.2
      micromark-util-character: 2.1.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-symbol: 2.0.1

  micromark-util-encode@2.0.1: {}

  micromark-util-html-tag-name@2.0.1: {}

  micromark-util-normalize-identifier@2.0.1:
    dependencies:
      micromark-util-symbol: 2.0.1

  micromark-util-resolve-all@2.0.1:
    dependencies:
      micromark-util-types: 2.0.1

  micromark-util-sanitize-uri@2.0.1:
    dependencies:
      micromark-util-character: 2.1.1
      micromark-util-encode: 2.0.1
      micromark-util-symbol: 2.0.1

  micromark-util-subtokenize@2.0.3:
    dependencies:
      devlop: 1.1.0
      micromark-util-chunked: 2.0.1
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1

  micromark-util-symbol@2.0.1: {}

  micromark-util-types@2.0.1: {}

  micromark@4.0.1:
    dependencies:
      '@types/debug': 4.1.12
      debug: 4.3.7
      decode-named-character-reference: 1.0.2
      devlop: 1.1.0
      micromark-core-commonmark: 2.0.2
      micromark-factory-space: 2.0.1
      micromark-util-character: 2.1.1
      micromark-util-chunked: 2.0.1
      micromark-util-combine-extensions: 2.0.1
      micromark-util-decode-numeric-character-reference: 2.0.2
      micromark-util-encode: 2.0.1
      micromark-util-normalize-identifier: 2.0.1
      micromark-util-resolve-all: 2.0.1
      micromark-util-sanitize-uri: 2.0.1
      micromark-util-subtokenize: 2.0.3
      micromark-util-symbol: 2.0.1
      micromark-util-types: 2.0.1
    transitivePeerDependencies:
      - supports-color

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mimic-response@3.1.0: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minimist@1.2.8: {}

  minipass-collect@1.0.2:
    dependencies:
      minipass: 3.3.6
    optional: true

  minipass-fetch@1.4.1:
    dependencies:
      minipass: 3.3.6
      minipass-sized: 1.0.3
      minizlib: 2.1.2
    optionalDependencies:
      encoding: 0.1.13
    optional: true

  minipass-flush@1.0.5:
    dependencies:
      minipass: 3.3.6
    optional: true

  minipass-pipeline@1.2.4:
    dependencies:
      minipass: 3.3.6
    optional: true

  minipass-sized@1.0.3:
    dependencies:
      minipass: 3.3.6
    optional: true

  minipass@3.3.6:
    dependencies:
      yallist: 4.0.0

  minipass@5.0.0: {}

  minipass@7.1.2: {}

  minizlib@2.1.2:
    dependencies:
      minipass: 3.3.6
      yallist: 4.0.0

  mkdirp-classic@0.5.3: {}

  mkdirp@1.0.4: {}

  ml-array-max@1.2.4:
    dependencies:
      is-any-array: 2.0.1

  ml-array-min@1.2.3:
    dependencies:
      is-any-array: 2.0.1

  ml-array-rescale@1.3.7:
    dependencies:
      is-any-array: 2.0.1
      ml-array-max: 1.2.4
      ml-array-min: 1.2.3

  ml-matrix@6.12.0:
    dependencies:
      is-any-array: 2.0.1
      ml-array-rescale: 1.3.7

  mock-property@1.0.3:
    dependencies:
      define-data-property: 1.1.4
      functions-have-names: 1.2.3
      gopd: 1.0.1
      has-property-descriptors: 1.0.2
      hasown: 2.0.2
      isarray: 2.0.5

  monaco-editor@0.52.0: {}

  moo@0.5.2: {}

  ms@2.1.3: {}

  msgpackr-extract@3.0.3:
    dependencies:
      node-gyp-build-optional-packages: 5.2.2
    optionalDependencies:
      '@msgpackr-extract/msgpackr-extract-darwin-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-darwin-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-arm64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-linux-x64': 3.0.3
      '@msgpackr-extract/msgpackr-extract-win32-x64': 3.0.3
    optional: true

  msgpackr@1.11.2:
    optionalDependencies:
      msgpackr-extract: 3.0.3

  mysql2@3.11.5:
    dependencies:
      aws-ssl-profiles: 1.1.2
      denque: 2.1.0
      generate-function: 2.3.1
      iconv-lite: 0.6.3
      long: 5.2.3
      lru.min: 1.1.1
      named-placeholders: 1.1.3
      seq-queue: 0.0.5
      sqlstring: 2.3.3

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  named-placeholders@1.1.3:
    dependencies:
      lru-cache: 7.18.3

  nano-css@5.6.2(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0
      css-tree: 1.1.3
      csstype: 3.1.3
      fastest-stable-stringify: 2.0.2
      inline-style-prefixer: 7.0.1
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      rtl-css-js: 1.16.1
      stacktrace-js: 2.0.2
      stylis: 4.3.4

  nanoid@3.3.8: {}

  napi-build-utils@1.0.2: {}

  natural-compare@1.4.0: {}

  nearley@2.20.1:
    dependencies:
      commander: 2.20.3
      moo: 0.5.2
      railroad-diagrams: 1.0.0
      randexp: 0.4.6

  negotiator@0.6.4:
    optional: true

  neo-async@2.6.2: {}

  next@15.0.3(@opentelemetry/api@1.9.0)(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@next/env': 15.0.3
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.13
      busboy: 1.6.0
      caniuse-lite: 1.0.30001684
      postcss: 8.4.31
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      styled-jsx: 5.1.6(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.0.3
      '@next/swc-darwin-x64': 15.0.3
      '@next/swc-linux-arm64-gnu': 15.0.3
      '@next/swc-linux-arm64-musl': 15.0.3
      '@next/swc-linux-x64-gnu': 15.0.3
      '@next/swc-linux-x64-musl': 15.0.3
      '@next/swc-win32-arm64-msvc': 15.0.3
      '@next/swc-win32-x64-msvc': 15.0.3
      '@opentelemetry/api': 1.9.0
      sharp: 0.33.5
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  no-case@3.0.4:
    dependencies:
      lower-case: 2.0.2
      tslib: 2.8.1

  node-abi@3.71.0:
    dependencies:
      semver: 7.6.3

  node-abort-controller@3.1.1: {}

  node-addon-api@7.1.1: {}

  node-domexception@1.0.0: {}

  node-fetch@2.7.0(encoding@0.1.13):
    dependencies:
      whatwg-url: 5.0.0
    optionalDependencies:
      encoding: 0.1.13

  node-gyp-build-optional-packages@5.2.2:
    dependencies:
      detect-libc: 2.0.3
    optional: true

  node-gyp@8.4.1:
    dependencies:
      env-paths: 2.2.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      make-fetch-happen: 9.1.0
      nopt: 5.0.0
      npmlog: 6.0.2
      rimraf: 3.0.2
      semver: 7.6.3
      tar: 6.2.1
      which: 2.0.2
    transitivePeerDependencies:
      - bluebird
      - supports-color
    optional: true

  node-releases@2.0.18: {}

  nopt@5.0.0:
    dependencies:
      abbrev: 1.1.1
    optional: true

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  npmlog@6.0.2:
    dependencies:
      are-we-there-yet: 3.0.1
      console-control-strings: 1.1.0
      gauge: 4.0.4
      set-blocking: 2.0.0
    optional: true

  oauth4webapi@3.1.3: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  object-inspect@1.12.3: {}

  object-inspect@1.13.3: {}

  object-is@1.1.6:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1

  object-keys@1.1.1: {}

  object.assign@4.1.5:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      has-symbols: 1.0.3
      object-keys: 1.1.1

  object.entries@1.1.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  object.fromentries@2.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-object-atoms: 1.0.0

  object.groupby@1.0.3:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5

  object.values@1.2.0:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  obuf@1.1.2: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  openai@4.76.3(encoding@0.1.13)(zod@3.23.8):
    dependencies:
      '@types/node': 18.19.68
      '@types/node-fetch': 2.6.12
      abort-controller: 3.0.0
      agentkeepalive: 4.5.0
      form-data-encoder: 1.7.2
      formdata-node: 4.4.1
      node-fetch: 2.7.0(encoding@0.1.13)
    optionalDependencies:
      zod: 3.23.8
    transitivePeerDependencies:
      - encoding

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-map@4.0.0:
    dependencies:
      aggregate-error: 3.1.0
    optional: true

  package-json-from-dist@1.0.1: {}

  papaparse@5.4.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-entities@4.0.1:
    dependencies:
      '@types/unist': 2.0.11
      character-entities: 2.0.2
      character-entities-legacy: 3.0.0
      character-reference-invalid: 2.0.1
      decode-named-character-reference: 1.0.2
      is-alphanumerical: 2.0.1
      is-decimal: 2.0.1
      is-hexadecimal: 2.0.1

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  pdfast@0.2.0: {}

  pg-cloudflare@1.1.1:
    optional: true

  pg-connection-string@2.7.0: {}

  pg-int8@1.0.1: {}

  pg-numeric@1.0.2: {}

  pg-pool@3.7.0(pg@8.13.1):
    dependencies:
      pg: 8.13.1

  pg-protocol@1.7.0: {}

  pg-types@2.2.0:
    dependencies:
      pg-int8: 1.0.1
      postgres-array: 2.0.0
      postgres-bytea: 1.0.0
      postgres-date: 1.0.7
      postgres-interval: 1.2.0

  pg-types@4.0.2:
    dependencies:
      pg-int8: 1.0.1
      pg-numeric: 1.0.2
      postgres-array: 3.0.2
      postgres-bytea: 3.0.0
      postgres-date: 2.1.0
      postgres-interval: 3.0.0
      postgres-range: 1.1.4

  pg@8.13.1:
    dependencies:
      pg-connection-string: 2.7.0
      pg-pool: 3.7.0(pg@8.13.1)
      pg-protocol: 1.7.0
      pg-types: 2.2.0
      pgpass: 1.0.5
    optionalDependencies:
      pg-cloudflare: 1.1.1

  pgpass@1.0.5:
    dependencies:
      split2: 4.2.0

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  pify@2.3.0: {}

  pirates@4.0.6: {}

  possible-typed-array-names@1.0.0: {}

  postcss-import@15.1.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.8

  postcss-js@4.0.1(postcss@8.4.49):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.49

  postcss-load-config@4.0.2(postcss@8.4.49):
    dependencies:
      lilconfig: 3.1.2
      yaml: 2.6.1
    optionalDependencies:
      postcss: 8.4.49

  postcss-nested@6.2.0(postcss@8.4.49):
    dependencies:
      postcss: 8.4.49
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.4.38:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postcss@8.4.49:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postgres-array@2.0.0: {}

  postgres-array@3.0.2: {}

  postgres-bytea@1.0.0: {}

  postgres-bytea@3.0.0:
    dependencies:
      obuf: 1.1.2

  postgres-date@1.0.7: {}

  postgres-date@2.1.0: {}

  postgres-interval@1.2.0:
    dependencies:
      xtend: 4.0.2

  postgres-interval@3.0.0: {}

  postgres-range@1.1.4: {}

  postgres@3.4.5: {}

  preact-render-to-string@6.5.11(preact@10.24.3):
    dependencies:
      preact: 10.24.3

  preact@10.24.3: {}

  prebuild-install@7.1.2:
    dependencies:
      detect-libc: 2.0.3
      expand-template: 2.0.3
      github-from-package: 0.0.0
      minimist: 1.2.8
      mkdirp-classic: 0.5.3
      napi-build-utils: 1.0.2
      node-abi: 3.71.0
      pump: 3.0.2
      rc: 1.2.8
      simple-get: 4.0.1
      tar-fs: 2.1.1
      tunnel-agent: 0.6.0

  prelude-ls@1.2.1: {}

  prisma@6.0.0:
    dependencies:
      '@prisma/engines': 6.0.0
    optionalDependencies:
      fsevents: 2.3.3

  promise-inflight@1.0.1:
    optional: true

  promise-retry@2.0.1:
    dependencies:
      err-code: 2.0.3
      retry: 0.12.0
    optional: true

  prop-types@15.8.1:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1

  property-information@6.5.0: {}

  proxy-from-env@1.1.0: {}

  pump@3.0.2:
    dependencies:
      end-of-stream: 1.4.4
      once: 1.4.0

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  quickselect@2.0.0: {}

  railroad-diagrams@1.0.0: {}

  randexp@0.4.6:
    dependencies:
      discontinuous-range: 1.0.0
      ret: 0.1.15

  randombytes@2.1.0:
    dependencies:
      safe-buffer: 5.2.1

  rbush@3.0.1:
    dependencies:
      quickselect: 2.0.0

  rc@1.2.8:
    dependencies:
      deep-extend: 0.6.0
      ini: 1.3.8
      minimist: 1.2.8
      strip-json-comments: 2.0.1

  react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
      scheduler: 0.25.0-rc-66855b96-20241106

  react-draggable@4.4.6(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      clsx: 1.2.1
      prop-types: 15.8.1
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)

  react-dropzone@14.3.5(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      attr-accept: 2.2.5
      file-selector: 2.1.2
      prop-types: 15.8.1
      react: 19.0.0-rc-66855b96-20241106

  react-grid-layout@1.5.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      clsx: 2.1.1
      fast-equals: 4.0.3
      prop-types: 15.8.1
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-draggable: 4.4.6(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react-resizable: 3.0.5(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      resize-observer-polyfill: 1.5.1

  react-hook-form@7.53.2(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106

  react-is@16.13.1: {}

  react-markdown@9.0.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@types/hast': 3.0.4
      '@types/react': 18.3.12
      devlop: 1.1.0
      hast-util-to-jsx-runtime: 2.3.2
      html-url-attributes: 3.0.1
      mdast-util-to-hast: 13.2.0
      react: 19.0.0-rc-66855b96-20241106
      remark-parse: 11.0.0
      remark-rehype: 11.1.1
      unified: 11.0.5
      unist-util-visit: 5.0.0
      vfile: 6.0.3
    transitivePeerDependencies:
      - supports-color

  react-reconciler@0.26.2(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react: 19.0.0-rc-66855b96-20241106
      scheduler: 0.20.2

  react-remove-scroll-bar@2.3.6(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
      react-style-singleton: 2.2.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 18.3.12

  react-remove-scroll@2.6.0(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
      react-remove-scroll-bar: 2.3.6(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      react-style-singleton: 2.2.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      tslib: 2.8.1
      use-callback-ref: 1.3.2(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
      use-sidecar: 1.1.2(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)
    optionalDependencies:
      '@types/react': 18.3.12

  react-resizable@3.0.5(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      prop-types: 15.8.1
      react: 19.0.0-rc-66855b96-20241106
      react-draggable: 4.4.6(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
    transitivePeerDependencies:
      - react-dom

  react-router-dom@6.28.0(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@remix-run/router': 1.21.0
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-router: 6.28.0(react@19.0.0-rc-66855b96-20241106)

  react-router@6.28.0(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@remix-run/router': 1.21.0
      react: 19.0.0-rc-66855b96-20241106

  react-style-singleton@2.2.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      get-nonce: 1.0.1
      invariant: 2.2.4
      react: 19.0.0-rc-66855b96-20241106
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 18.3.12

  react-universal-interface@0.6.2(react@19.0.0-rc-66855b96-20241106)(tslib@2.8.1):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
      tslib: 2.8.1

  react-use@17.5.1(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@types/js-cookie': 2.2.7
      '@xobotyi/scrollbar-width': 1.9.5
      copy-to-clipboard: 3.3.3
      fast-deep-equal: 3.1.3
      fast-shallow-equal: 1.0.0
      js-cookie: 2.2.1
      nano-css: 5.6.2(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106)
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      react-universal-interface: 0.6.2(react@19.0.0-rc-66855b96-20241106)(tslib@2.8.1)
      resize-observer-polyfill: 1.5.1
      screenfull: 5.2.0
      set-harmonic-interval: 1.0.1
      throttle-debounce: 3.0.1
      ts-easing: 0.2.0
      tslib: 2.8.1

  react@19.0.0-rc-66855b96-20241106: {}

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  redis-errors@1.2.0: {}

  redis-parser@3.0.0:
    dependencies:
      redis-errors: 1.2.0

  redux@5.0.1: {}

  reflect.getprototypeof@1.0.7:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      which-builtin-type: 1.2.0

  regenerator-runtime@0.14.1: {}

  regexp.prototype.flags@1.5.3:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-errors: 1.3.0
      set-function-name: 2.0.2

  remark-parse@11.0.0:
    dependencies:
      '@types/mdast': 4.0.4
      mdast-util-from-markdown: 2.0.2
      micromark-util-types: 2.0.1
      unified: 11.0.5
    transitivePeerDependencies:
      - supports-color

  remark-rehype@11.1.1:
    dependencies:
      '@types/hast': 3.0.4
      '@types/mdast': 4.0.4
      mdast-util-to-hast: 13.2.0
      unified: 11.0.5
      vfile: 6.0.3

  repeat-string@1.6.1: {}

  require-from-string@2.0.2: {}

  resize-observer-polyfill@1.5.1: {}

  resolve-from@4.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.15.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  resolve@2.0.0-next.5:
    dependencies:
      is-core-module: 2.15.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  ret@0.1.15: {}

  retry@0.12.0:
    optional: true

  reusify@1.0.4: {}

  right-align@0.1.3:
    dependencies:
      align-text: 0.1.4

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  rollup@0.25.8:
    dependencies:
      chalk: 1.1.3
      minimist: 1.2.8
      source-map-support: 0.3.3

  rtl-css-js@1.16.1:
    dependencies:
      '@babel/runtime': 7.26.0

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rw@1.3.3: {}

  safe-array-concat@1.1.2:
    dependencies:
      call-bind: 1.0.7
      get-intrinsic: 1.2.4
      has-symbols: 1.0.3
      isarray: 2.0.5

  safe-buffer@5.2.1: {}

  safe-regex-test@1.0.3:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-regex: 1.1.4

  safer-buffer@2.1.2: {}

  scheduler@0.20.2:
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1

  scheduler@0.25.0-rc-66855b96-20241106: {}

  schema-utils@3.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      ajv-keywords: 3.5.2(ajv@6.12.6)

  schema-utils@4.3.0:
    dependencies:
      '@types/json-schema': 7.0.15
      ajv: 8.17.1
      ajv-formats: 2.1.1(ajv@8.17.1)
      ajv-keywords: 5.1.0(ajv@8.17.1)

  screenfull@5.2.0: {}

  secure-json-parse@2.7.0: {}

  semver@6.3.1: {}

  semver@7.6.3: {}

  seq-queue@0.0.5: {}

  serialize-javascript@6.0.2:
    dependencies:
      randombytes: 2.1.0

  server-only@0.0.1: {}

  set-blocking@2.0.0:
    optional: true

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-property-descriptors: 1.0.2

  set-function-name@2.0.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      functions-have-names: 1.2.3
      has-property-descriptors: 1.0.2

  set-harmonic-interval@1.0.1: {}

  shallowequal@1.1.0: {}

  sharp@0.33.5:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.3
      semver: 7.6.3
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.33.5
      '@img/sharp-darwin-x64': 0.33.5
      '@img/sharp-libvips-darwin-arm64': 1.0.4
      '@img/sharp-libvips-darwin-x64': 1.0.4
      '@img/sharp-libvips-linux-arm': 1.0.5
      '@img/sharp-libvips-linux-arm64': 1.0.4
      '@img/sharp-libvips-linux-s390x': 1.0.4
      '@img/sharp-libvips-linux-x64': 1.0.4
      '@img/sharp-libvips-linuxmusl-arm64': 1.0.4
      '@img/sharp-libvips-linuxmusl-x64': 1.0.4
      '@img/sharp-linux-arm': 0.33.5
      '@img/sharp-linux-arm64': 0.33.5
      '@img/sharp-linux-s390x': 0.33.5
      '@img/sharp-linux-x64': 0.33.5
      '@img/sharp-linuxmusl-arm64': 0.33.5
      '@img/sharp-linuxmusl-x64': 0.33.5
      '@img/sharp-wasm32': 0.33.5
      '@img/sharp-win32-ia32': 0.33.5
      '@img/sharp-win32-x64': 0.33.5
    optional: true

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel@1.0.6:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      get-intrinsic: 1.2.4
      object-inspect: 1.13.3

  signal-exit@3.0.7:
    optional: true

  signal-exit@4.1.0: {}

  simple-concat@1.0.1: {}

  simple-get@4.0.1:
    dependencies:
      decompress-response: 6.0.0
      once: 1.4.0
      simple-concat: 1.0.1

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2

  size-sensor@1.0.2: {}

  smart-buffer@4.2.0:
    optional: true

  snake-case@3.0.4:
    dependencies:
      dot-case: 3.0.4
      tslib: 2.8.1

  snakecase-keys@5.4.4:
    dependencies:
      map-obj: 4.3.0
      snake-case: 3.0.4
      type-fest: 2.19.0

  socks-proxy-agent@6.2.1:
    dependencies:
      agent-base: 6.0.2
      debug: 4.3.7
      socks: 2.8.3
    transitivePeerDependencies:
      - supports-color
    optional: true

  socks@2.8.3:
    dependencies:
      ip-address: 9.0.5
      smart-buffer: 4.2.0
    optional: true

  source-map-js@1.2.1: {}

  source-map-support@0.3.3:
    dependencies:
      source-map: 0.1.32

  source-map-support@0.5.21:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.1.32:
    dependencies:
      amdefine: 1.0.1

  source-map@0.5.6: {}

  source-map@0.6.1: {}

  space-separated-tokens@2.0.2: {}

  split2@4.2.0: {}

  sprintf-js@1.1.3:
    optional: true

  sql-formatter@15.4.6:
    dependencies:
      argparse: 2.0.1
      get-stdin: 8.0.0
      nearley: 2.20.1

  sqlite3@5.1.7:
    dependencies:
      bindings: 1.5.0
      node-addon-api: 7.1.1
      prebuild-install: 7.1.2
      tar: 6.2.1
    optionalDependencies:
      node-gyp: 8.4.1
    transitivePeerDependencies:
      - bluebird
      - supports-color

  sqlstring@2.3.3: {}

  ssri@8.0.1:
    dependencies:
      minipass: 3.3.6
    optional: true

  stack-generator@2.0.10:
    dependencies:
      stackframe: 1.3.4

  stackframe@1.3.4: {}

  stacktrace-gps@3.1.2:
    dependencies:
      source-map: 0.5.6
      stackframe: 1.3.4

  stacktrace-js@2.0.2:
    dependencies:
      error-stack-parser: 2.1.4
      stack-generator: 2.0.10
      stacktrace-gps: 3.1.2

  standard-as-callback@2.1.0: {}

  state-local@1.0.7: {}

  std-env@3.8.0: {}

  streamsearch@1.1.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string.prototype.includes@2.0.1:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5

  string.prototype.matchall@4.0.11:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-errors: 1.3.0
      es-object-atoms: 1.0.0
      get-intrinsic: 1.2.4
      gopd: 1.0.1
      has-symbols: 1.0.3
      internal-slot: 1.0.7
      regexp.prototype.flags: 1.5.3
      set-function-name: 2.0.2
      side-channel: 1.0.6

  string.prototype.repeat@1.0.0:
    dependencies:
      define-properties: 1.2.1
      es-abstract: 1.23.5

  string.prototype.trim@1.2.9:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-abstract: 1.23.5
      es-object-atoms: 1.0.0

  string.prototype.trimend@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string.prototype.trimstart@1.0.8:
    dependencies:
      call-bind: 1.0.7
      define-properties: 1.2.1
      es-object-atoms: 1.0.0

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  stringify-entities@4.0.4:
    dependencies:
      character-entities-html4: 2.1.0
      character-entities-legacy: 3.0.0

  strip-ansi@3.0.1:
    dependencies:
      ansi-regex: 2.1.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-bom@3.0.0: {}

  strip-json-comments@2.0.1: {}

  strip-json-comments@3.1.1: {}

  style-to-object@1.0.8:
    dependencies:
      inline-style-parser: 0.2.4

  styled-components@6.1.14(react-dom@19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106))(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      '@emotion/is-prop-valid': 1.2.2
      '@emotion/unitless': 0.8.1
      '@types/stylis': 4.2.5
      css-to-react-native: 3.2.0
      csstype: 3.1.3
      postcss: 8.4.38
      react: 19.0.0-rc-66855b96-20241106
      react-dom: 19.0.0-rc-66855b96-20241106(react@19.0.0-rc-66855b96-20241106)
      shallowequal: 1.1.0
      stylis: 4.3.2
      tslib: 2.6.2

  styled-jsx@5.1.6(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      client-only: 0.0.1
      react: 19.0.0-rc-66855b96-20241106

  stylis@4.3.2: {}

  stylis@4.3.4: {}

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@2.0.0: {}

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  svg-path-parser@1.1.0: {}

  swr@2.2.5(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      client-only: 0.0.1
      react: 19.0.0-rc-66855b96-20241106
      use-sync-external-store: 1.2.2(react@19.0.0-rc-66855b96-20241106)

  tailwind-merge@2.5.5: {}

  tailwindcss-animate@1.0.7(tailwindcss@3.4.15):
    dependencies:
      tailwindcss: 3.4.15

  tailwindcss@3.4.15:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.6
      lilconfig: 2.1.0
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.1.1
      postcss: 8.4.49
      postcss-import: 15.1.0(postcss@8.4.49)
      postcss-js: 4.0.1(postcss@8.4.49)
      postcss-load-config: 4.0.2(postcss@8.4.49)
      postcss-nested: 6.2.0(postcss@8.4.49)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.8
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  tapable@2.2.1: {}

  tape@4.17.0:
    dependencies:
      '@ljharb/resumer': 0.0.1
      '@ljharb/through': 2.3.13
      call-bind: 1.0.7
      deep-equal: 1.1.2
      defined: 1.0.1
      dotignore: 0.1.2
      for-each: 0.3.3
      glob: 7.2.3
      has: 1.0.4
      inherits: 2.0.4
      is-regex: 1.1.4
      minimist: 1.2.8
      mock-property: 1.0.3
      object-inspect: 1.12.3
      resolve: 1.22.8
      string.prototype.trim: 1.2.9

  tar-fs@2.1.1:
    dependencies:
      chownr: 1.1.4
      mkdirp-classic: 0.5.3
      pump: 3.0.2
      tar-stream: 2.2.0

  tar-stream@2.2.0:
    dependencies:
      bl: 4.1.0
      end-of-stream: 1.4.4
      fs-constants: 1.0.0
      inherits: 2.0.4
      readable-stream: 3.6.2

  tar@6.2.1:
    dependencies:
      chownr: 2.0.0
      fs-minipass: 2.1.0
      minipass: 5.0.0
      minizlib: 2.1.2
      mkdirp: 1.0.4
      yallist: 4.0.0

  terser-webpack-plugin@5.3.11(esbuild@0.19.12)(webpack@5.97.1(esbuild@0.19.12)):
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      jest-worker: 27.5.1
      schema-utils: 4.3.0
      serialize-javascript: 6.0.2
      terser: 5.37.0
      webpack: 5.97.1(esbuild@0.19.12)
    optionalDependencies:
      esbuild: 0.19.12

  terser@5.37.0:
    dependencies:
      '@jridgewell/source-map': 0.3.6
      acorn: 8.14.0
      commander: 2.20.3
      source-map-support: 0.5.21

  text-segmentation@1.0.3:
    dependencies:
      utrie: 1.0.2

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  throttle-debounce@3.0.1: {}

  throttleit@2.1.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toggle-selection@1.0.6: {}

  tr46@0.0.3: {}

  trim-lines@3.0.1: {}

  trough@2.2.0: {}

  ts-api-utils@1.4.2(typescript@5.7.2):
    dependencies:
      typescript: 5.7.2

  ts-easing@0.2.0: {}

  ts-interface-checker@0.1.13: {}

  tsconfig-paths@3.15.0:
    dependencies:
      '@types/json5': 0.0.29
      json5: 1.0.2
      minimist: 1.2.8
      strip-bom: 3.0.0

  tslib@2.3.0: {}

  tslib@2.4.1: {}

  tslib@2.6.2: {}

  tslib@2.8.1: {}

  tsx@4.19.2:
    dependencies:
      esbuild: 0.23.1
      get-tsconfig: 4.8.1
    optionalDependencies:
      fsevents: 2.3.3

  tunnel-agent@0.6.0:
    dependencies:
      safe-buffer: 5.2.1

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@0.20.2: {}

  type-fest@2.19.0: {}

  typed-array-buffer@1.0.2:
    dependencies:
      call-bind: 1.0.7
      es-errors: 1.3.0
      is-typed-array: 1.1.13

  typed-array-byte-length@1.0.1:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13

  typed-array-byte-offset@1.0.3:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-proto: 1.0.3
      is-typed-array: 1.1.13
      reflect.getprototypeof: 1.0.7

  typed-array-length@1.0.7:
    dependencies:
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      is-typed-array: 1.1.13
      possible-typed-array-names: 1.0.0
      reflect.getprototypeof: 1.0.7

  typescript-eslint@8.16.0(eslint@8.57.1)(typescript@5.7.2):
    dependencies:
      '@typescript-eslint/eslint-plugin': 8.16.0(@typescript-eslint/parser@8.16.0(eslint@8.57.1)(typescript@5.7.2))(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/parser': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      '@typescript-eslint/utils': 8.16.0(eslint@8.57.1)(typescript@5.7.2)
      eslint: 8.57.1
    optionalDependencies:
      typescript: 5.7.2
    transitivePeerDependencies:
      - supports-color

  typescript@5.7.2: {}

  uglify-js@2.8.29:
    dependencies:
      source-map: 0.5.6
      yargs: 3.10.0
    optionalDependencies:
      uglify-to-browserify: 1.0.2

  uglify-to-browserify@1.0.2:
    optional: true

  unbox-primitive@1.0.2:
    dependencies:
      call-bind: 1.0.7
      has-bigints: 1.0.2
      has-symbols: 1.0.3
      which-boxed-primitive: 1.0.2

  undici-types@5.26.5: {}

  undici-types@6.19.8: {}

  unified@11.0.5:
    dependencies:
      '@types/unist': 3.0.3
      bail: 2.0.2
      devlop: 1.1.0
      extend: 3.0.2
      is-plain-obj: 4.1.0
      trough: 2.2.0
      vfile: 6.0.3

  unique-filename@1.1.1:
    dependencies:
      unique-slug: 2.0.2
    optional: true

  unique-slug@2.0.2:
    dependencies:
      imurmurhash: 0.1.4
    optional: true

  unist-util-is@6.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-position@5.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-stringify-position@4.0.0:
    dependencies:
      '@types/unist': 3.0.3

  unist-util-visit-parents@6.0.1:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0

  unist-util-visit@5.0.0:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-is: 6.0.0
      unist-util-visit-parents: 6.0.1

  update-browserslist-db@1.1.1(browserslist@4.24.2):
    dependencies:
      browserslist: 4.24.2
      escalade: 3.2.0
      picocolors: 1.1.1

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  use-callback-ref@1.3.2(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 18.3.12

  use-sidecar@1.1.2(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      detect-node-es: 1.1.0
      react: 19.0.0-rc-66855b96-20241106
      tslib: 2.8.1
    optionalDependencies:
      '@types/react': 18.3.12

  use-sync-external-store@1.2.2(react@19.0.0-rc-66855b96-20241106):
    dependencies:
      react: 19.0.0-rc-66855b96-20241106

  util-deprecate@1.0.2: {}

  utrie@1.0.2:
    dependencies:
      base64-arraybuffer: 1.0.2

  uuid@9.0.1: {}

  vfile-message@4.0.2:
    dependencies:
      '@types/unist': 3.0.3
      unist-util-stringify-position: 4.0.0

  vfile@6.0.3:
    dependencies:
      '@types/unist': 3.0.3
      vfile-message: 4.0.2

  watchpack@2.4.2:
    dependencies:
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11

  web-streams-polyfill@4.0.0-beta.3: {}

  webidl-conversions@3.0.1: {}

  webpack-sources@3.2.3: {}

  webpack@5.97.1(esbuild@0.19.12):
    dependencies:
      '@types/eslint-scope': 3.7.7
      '@types/estree': 1.0.6
      '@webassemblyjs/ast': 1.14.1
      '@webassemblyjs/wasm-edit': 1.14.1
      '@webassemblyjs/wasm-parser': 1.14.1
      acorn: 8.14.0
      browserslist: 4.24.2
      chrome-trace-event: 1.0.4
      enhanced-resolve: 5.17.1
      es-module-lexer: 1.6.0
      eslint-scope: 5.1.1
      events: 3.3.0
      glob-to-regexp: 0.4.1
      graceful-fs: 4.2.11
      json-parse-even-better-errors: 2.3.1
      loader-runner: 4.3.0
      mime-types: 2.1.35
      neo-async: 2.6.2
      schema-utils: 3.3.0
      tapable: 2.2.1
      terser-webpack-plugin: 5.3.11(esbuild@0.19.12)(webpack@5.97.1(esbuild@0.19.12))
      watchpack: 2.4.2
      webpack-sources: 3.2.3
    transitivePeerDependencies:
      - '@swc/core'
      - esbuild
      - uglify-js

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  which-boxed-primitive@1.0.2:
    dependencies:
      is-bigint: 1.0.4
      is-boolean-object: 1.1.2
      is-number-object: 1.0.7
      is-string: 1.0.7
      is-symbol: 1.0.4

  which-builtin-type@1.2.0:
    dependencies:
      call-bind: 1.0.7
      function.prototype.name: 1.1.6
      has-tostringtag: 1.0.2
      is-async-function: 2.0.0
      is-date-object: 1.0.5
      is-finalizationregistry: 1.1.0
      is-generator-function: 1.0.10
      is-regex: 1.1.4
      is-weakref: 1.0.2
      isarray: 2.0.5
      which-boxed-primitive: 1.0.2
      which-collection: 1.0.2
      which-typed-array: 1.1.16

  which-collection@1.0.2:
    dependencies:
      is-map: 2.0.3
      is-set: 2.0.3
      is-weakmap: 2.0.2
      is-weakset: 2.0.3

  which-typed-array@1.1.16:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.7
      for-each: 0.3.3
      gopd: 1.0.1
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  wide-align@1.1.5:
    dependencies:
      string-width: 4.2.3
    optional: true

  window-size@0.1.0: {}

  word-wrap@1.2.5: {}

  wordwrap@0.0.2: {}

  workerize-loader@2.0.2(webpack@5.97.1(esbuild@0.19.12)):
    dependencies:
      loader-utils: 2.0.4
      webpack: 5.97.1(esbuild@0.19.12)

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  ws@8.18.0: {}

  xtend@4.0.2: {}

  yallist@4.0.0: {}

  yaml@2.6.1: {}

  yargs@3.10.0:
    dependencies:
      camelcase: 1.2.1
      cliui: 2.1.0
      decamelize: 1.2.0
      window-size: 0.1.0

  yocto-queue@0.1.0: {}

  zod-to-json-schema@3.24.1(zod@3.23.8):
    dependencies:
      zod: 3.23.8

  zod@3.23.8: {}

  zrender@5.6.0:
    dependencies:
      tslib: 2.3.0

  zustand@5.0.1(@types/react@18.3.12)(react@19.0.0-rc-66855b96-20241106)(use-sync-external-store@1.2.2(react@19.0.0-rc-66855b96-20241106)):
    optionalDependencies:
      '@types/react': 18.3.12
      react: 19.0.0-rc-66855b96-20241106
      use-sync-external-store: 1.2.2(react@19.0.0-rc-66855b96-20241106)

  zwitch@2.0.4: {}



================================================
File: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: .eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "off"
  }
}



================================================
File: app/layout.tsx
================================================
import type { Metadata } from "next";
import localFont from "next/font/local";
import {
  ClerkProvider,
} from '@clerk/nextjs'
import "./ui/globals.css";

const geistSans = localFont({
  src: "./ui/fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./ui/fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "BeakDash",
  description: "Super charged insingts for your business - www.beakinsights.com",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {children}
        </body>
      </html>
    </ClerkProvider>
  );
}



================================================
File: app/page.tsx
================================================
'use client';
import { useAuth } from '@clerk/nextjs';
import { redirect } from 'next/navigation';

export default function Home() {
  const { userId } = useAuth()
  if (!userId) {
    redirect("/sign-in");
  } else {
    redirect("/dashboard");
  }
}



================================================
File: app/api/connections/route.ts
================================================
import { NextResponse } from 'next/server';
import 'dotenv/config';
import { eq } from 'drizzle-orm';
import { z } from 'zod';
import { connectionsTable, connectionSchema } from '@/app/lib/drizzle/schemas';
import { db } from '@/app/lib/drizzle';

export async function GET(request: Request) {
    try {
        const { searchParams } = new URL(request.url);
        const userId = searchParams.get("userId");
    
        if (!userId) {
          return NextResponse.json(
            { error: "userId is required" },
            { status: 400 }
          );
        }
        const data = await db.select().from(connectionsTable)
        .where(eq(connectionsTable.userId, userId)); 
        return NextResponse.json(data);
    } catch (error) {
        console.error('Database error:', error);
        return NextResponse.json({ error: error }, { status: 500 });
    }
}

export async function POST(request: Request) {
    try {
      const body = await request.json();
      const validated = connectionSchema.parse(body);
      
      if (validated.id) {
        return NextResponse.json({ error: 'A new connection cannot have an id' }, { status: 500 });
      }
  
      const data = await db.insert(connectionsTable)
        .values({ ...validated, createdAt: new Date(), updatedAt: new Date() })
        .returning();
        
      return NextResponse.json(data[0]);
    } catch (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        { error: error instanceof z.ZodError ? error.errors : 'Operation failed' },
        { status: 400 }
      );
    }
  }


================================================
File: app/api/connections/[id]/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import 'dotenv/config';
import { eq } from 'drizzle-orm';
import { connectionsTable, connectionSchema } from '@/app/lib/drizzle/schemas';
import { db } from '@/app/lib/drizzle';


export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const id = (await params).id;
    const body = await request.json();
    const validated = connectionSchema.parse(body);

    const data = await db.update(connectionsTable)
    .set({ ...validated, updatedAt: new Date() })
    .where(eq(connectionsTable.id, id))
    .returning();
  
    if (!data.length) {
      return NextResponse.json({ error: 'Connection not found' }, { status: 404 });
    }
    return NextResponse.json(data[0]);

  } catch (error) {
    console.error("[CONNECTION_PATCH]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const id = (await params).id;

    await db.delete(connectionsTable)
    .where(eq(connectionsTable.id, id))

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("[CONNECTION_DELETE]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


================================================
File: app/api/connections/schemas/route.ts
================================================
import { NextResponse } from 'next/server';
import { ClientConfig, Client as PgClient } from 'pg';
import * as mysql from 'mysql2/promise';
import * as sqlite3 from 'sqlite3';
import { promisify } from 'util';
import { SchemaInfo, SQLConnectionConfig } from '@/app/types/datasource';

export async function POST(request: Request) {
  try {
    const config: SQLConnectionConfig = await request.json();
    const schemaInfo = await getSchemaInfo(config);
    return NextResponse.json(schemaInfo);
  } catch (error) {
    return NextResponse.json({ error: error instanceof Error ? error.message : 'An error occurred' }, { status: 500 });
  }
}

async function getSchemaInfo(config: SQLConnectionConfig): Promise<SchemaInfo> {
  switch(config.driver) {
    case 'postgresql':
      return getPgSchema(config as ClientConfig);
    case 'mysql':
      return getMysqlSchema(config);
    case 'sqlite':
      if (!config?.filePath) throw new Error('File path is required for SQLite connections');
      return getSqliteSchema(config.filePath);
    default:
      throw new Error('Unsupported database type');
  }
}

async function getPgSchema(config: ClientConfig): Promise<SchemaInfo> {
  const client = new PgClient({
    ...config,
    statement_timeout: 5000,
    connectionTimeoutMillis: 5000,
  });
  try {
    const query = `
      SELECT 
          c.table_schema AS schema,
          c.table_name,
          c.column_name,
          c.data_type AS type
      FROM information_schema.columns c
      LEFT JOIN (
          SELECT tc.table_schema, tc.table_name, kcu.column_name
          FROM information_schema.table_constraints tc
          JOIN information_schema.key_column_usage kcu
          ON tc.constraint_name = kcu.constraint_name
          WHERE tc.constraint_type = 'PRIMARY KEY'
      ) pk
      ON c.table_schema = pk.table_schema
      AND c.table_name = pk.table_name
      AND c.column_name = pk.column_name
      WHERE c.table_schema NOT IN ('information_schema', 'pg_catalog')
      ORDER BY c.table_schema, c.table_name, c.ordinal_position;
    `;

    await client.connect();
    const result = await client.query(query);
    return formatResults(result.rows, 'postgres');
  } finally {
    await client.end();
  }
}

async function getMysqlSchema(config: SQLConnectionConfig): Promise<SchemaInfo> {
  const conUrl = `mysql://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;
  const connection = await mysql.createConnection(conUrl);
  try {
    const query = `
      SELECT 
        TABLE_SCHEMA as schema,
        TABLE_NAME as table_name,
        COLUMN_NAME as column_name,
        DATA_TYPE as type,
      FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys')
      ORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION;
    `;
    const [rows] = await connection.execute(query);
    return formatResults(rows as any[], 'mysql');
  } finally {
    await connection.end();
  }
}

async function getSqliteSchema(url: string): Promise<SchemaInfo> {
  const db = new sqlite3.Database(url);
  const getAllTables = promisify(db.all.bind(db));
  
  try {
    const tables: any = await getAllTables(`
      SELECT name as table_name FROM sqlite_master 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
    `);
    
    let results: any[] = [];
    for (const table of tables) {
      const tableInfo: any = await getAllTables(`PRAGMA table_info('${table.table_name}')`);
      results = results.concat(tableInfo.map((info: any) => ({
        table_name: table.table_name,
        name: info.name,
        type: info.type,
        notnull: info.notnull,
        pk: info.pk
      })));
    }
    return formatResults(results, 'sqlite');
  } finally {
    db.close();
  }
}

function formatResults(results: any[], dbType: string): SchemaInfo {
  const schemaMap: SchemaInfo = {};

  results.forEach(row => {
    const schema = dbType === 'sqlite' ? 'main' : row.schema;
    const tableName = dbType === 'sqlite' ? row.table_name : row.table_name;
    const columnName = dbType === 'sqlite' ? row.name : row.column_name;
    const type = dbType === 'sqlite' ? row.type : row.type;

    if (!schemaMap[schema]) {
      schemaMap[schema] = {};
    }
    if (!schemaMap[schema][tableName]) {
      schemaMap[schema][tableName] = [];
    }

    schemaMap[schema][tableName].push({
      column: columnName,
      type
    });
  });

  return schemaMap;
}


================================================
File: app/api/connections/test/route.ts
================================================
import { Client } from 'pg';

export async function POST(request: Request) {
    const payload = await request.json();
    return Response.json(await testConnection(payload));
}

async function testConnection(config: {
    driver: string;
    host: string;
    port: number;
    database: string;
    user: string;
    password: string;
}) {
    switch (config.driver) {
        case 'postgresql':
            return await testPgCon(config);
        default:
            return { success: false, message: 'Invalid driver' };
    }
}

//postgres test
async function testPgCon(config: {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}) {
  const client = new Client({
    ...config,
    statement_timeout: 5000,
    connectionTimeoutMillis: 5000,
  });

  try {
    await client.connect();
    await client.query('SELECT 1');
    return { success: true, message: 'Connection successful' };
  } catch (error) {
    return { 
      success: false, 
      message: error instanceof Error ? error.message : String(error)
    };
  } finally {
    await client.end();
  }
}



================================================
File: app/api/copilot/generator/route.ts
================================================
import { NextResponse } from 'next/server';
import { generateObject } from 'ai';
import { openai } from '@ai-sdk/openai';
import { ChartAssistantPayload, ChartAssistantResponse } from '@/app/types/copilot';
import { schemas } from '@/app/schemas/transformSchema';
import { z } from 'zod';
import { IDataset, IWidget } from '@/app/lib/drizzle/schemas';
import { newWidgetPosition } from '@/app/lib/utils';
import 'dotenv/config';
import { db } from '@/app/lib/drizzle';
import { eq } from 'drizzle-orm';
import { widgetsTable, widgetSchema } from '@/app/lib/drizzle/schemas';

const responseSchema = z.object({
  transformation: schemas.transformConfSQL,
  chartTitle: z.string().describe('Title of the chart'),
  chartSubtitle: z.string().optional().describe('Subtitle of the chart'),
  explanation: z.string().describe('Explanation of the configuration'),
  chartQuery: z.string().describe('A query that can be used to generate the chart to be executed on the dataset (Must be schema aware)'),
});

type IResponseSchema = z.infer<typeof responseSchema>;

export async function POST(req: Request) {
    try {
      const payload: ChartAssistantPayload = await req.json();

      const systemPrompt = getSystemPrompt(payload.mode, payload.dataset, payload.widget);

      const result = await generateObject({
        model: openai('gpt-4-turbo'),
        schema: z.object({
          configs: z.array(responseSchema).describe('Chart Widget Configurations'),
          message: z.string().optional().describe('Assistant message, explain what you did in simple terms without getting technical'),
          suggestions: z.string().optional().describe('Suggestions if necessary'),
        }),
        mode: 'json',
        prompt: payload.prompt,
        system: systemPrompt,
      });
  
      try {
        const outputs = result.object;

        const widgets = await saveChartConfigs(outputs.configs, payload);
        
        const finalResponse: ChartAssistantResponse = {
          message: outputs.message ?? 'Generated chart configurations',
          suggestions: outputs.suggestions,
          widgets,
        };
  
        return NextResponse.json(finalResponse);
      } catch (error) {
        const errMessage = error instanceof Error ? error.message : 'Failed to create cgarts from configurations';
        console.error(errMessage);
        return NextResponse.json(
          { error: errMessage },
          { status: 422 }
        );
      }
    } catch (error) {
      console.error('Chart Assistant Error:', error);
      return NextResponse.json(
        { error: 'Error in chart configuration generation' },
        { status: 500 }
      );
    }
  }
  
function getSystemPrompt(mode: 'create' | 'edit', dataset: IDataset, widget?: IWidget): string {
  return `You are an expert data visualization assistant that generates chart configurations.  
  ${mode === 'edit' 
    ? 'Modify the existing configuration while preserving its useful aspects. Explain your changes clearly.'
    : 'Generate new configurations that best represent the data and answer the user\'s needs.'
  }

  ## Guidelines:
  1. Supported chart types: bar, line, pie.
  2. Use appropriate aggregations for large datasets.
  3. Configure meaningful series.
  4. Add useful filters and sorting.
  5. Ensure all property names and types match exactly as specified in the dataset.
  6. Each configuration should have a title, subtitle, and explanation.
  7. Generate an appropriate schema aware chart query (e.g., ... from public.xxx ...),.
  8. Provide suggestions for follow-up prompts or other relevant information.
  9. If the dataset is incomplete, suggest exploratory steps or clarification prompts.
  10. Note that each transformation belongs to a specific chart type and will generate only a single chart.
  
  ## Dataset Details:
  ${JSON.stringify(dataset)}
  
  ${widget ? `## Existing Configuration: \n${JSON.stringify(widget.transformConfig)}` : ''}
  `;
}

const saveChartConfigs = async (configs: IResponseSchema[], extras: ChartAssistantPayload): Promise<IWidget[]> => {
    // Save the generated chart configurations to the database
    // post to /api/widgets with type widgetSchema
    const resunResults: IWidget[] = [];
    if(extras.mode === 'create') {
      const widgets = await db.select().from(widgetsTable).where(eq(widgetsTable.pageId, extras.pageId!));

      for(const config of configs) {
        const nextLayout = newWidgetPosition(widgets as IWidget[], config.transformation.type);
        const payload = {
            pageId: extras.pageId,
            userId: extras.userId,
            type: config.transformation.type,
            title: config.chartTitle,
            subtitle: config.chartSubtitle,
            layout: nextLayout,
            datasetId: extras.dataset.id,
            query: config.chartQuery,    
            transformConfig: (() => {
              /* eslint-disable @typescript-eslint/no-unused-vars */
              const { type, ...rest } = config.transformation; // Exclude 'type'
              return rest;
            })(),
        }
        const validated = widgetSchema.parse(payload);
        const widgetResponse = await db.insert(widgetsTable)
        .values({ ...validated, createdAt: new Date(), updatedAt: new Date() })
        .returning();

        resunResults.push(widgetResponse[0] as IWidget);
      }
    } else {
      // Edit mode
      for(const config of configs) {
        const payload = {
          ...extras.widget!,
          title: config.chartTitle ?? extras.widget!.title,
          subtitle: config.chartSubtitle ?? extras.widget!.subtitle,
          type: config.transformation.type ?? extras.widget!.type,
          query: config.chartQuery ?? extras.widget!.query,
          transformConfig: (() => {
            /* eslint-disable @typescript-eslint/no-unused-vars */
            const { type, ...rest } = config.transformation; // Exclude 'type'
            return rest;
          })() ?? extras.widget!.transformConfig,
        }
        const validated = widgetSchema.parse(payload);
        const widgetResponse = await db.update(widgetsTable)
        .set({ ...validated, updatedAt: new Date() })
        .where(eq(widgetsTable.id, extras!.widget!.id!))
        .returning();

        resunResults.push(widgetResponse[0] as IWidget);
      }
    }

    console.log('Saved widgets:', JSON.stringify(resunResults, null, 2));
    return resunResults;
  };



================================================
File: app/api/data-sources/route.ts
================================================
import { NextRequest } from 'next/server';
import { Client, ClientConfig } from 'pg';

interface DataBaseRequest {
  config: ClientConfig;
  query: string;
}

export async function POST(request: NextRequest) {
  try {
    const { config, query } = await request.json() as DataBaseRequest;

    // Validate connection parameters
    if (!config || !query) {
      return Response.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      );
    }

    // Create a new pool for this specific request
    const client = new Client({
      ...config,
      statement_timeout: 5000,
      connectionTimeoutMillis: 5000,
    });
     
    try {
      // Execute query
      await client.connect();
      const result = await client.query(query);
      
      // Important: Close the pool after use
      await client.end();
      
      return Response.json(result.rows);
    } catch (dbError) {
      // Make sure to close the pool even if query fails
      await client.end();
      throw dbError;
    }
  } catch (error) {
    return Response.json(
      { 
        error: 'Failed to execute query', 
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}


================================================
File: app/api/datasets/route.ts
================================================
import { NextResponse } from 'next/server';
import 'dotenv/config';
import { eq } from 'drizzle-orm';
import { z } from 'zod';
import { datasetsTable, datasetsSchema } from '@/app/lib/drizzle/schemas';
import { db } from '@/app/lib/drizzle';

export async function GET(request: Request) {
    try {    
        const { searchParams } = new URL(request.url);
        const userId = searchParams.get("userId");

        if (!userId) {
          return NextResponse.json(
            { error: "userId is required" },
            { status: 400 }
          );
        }
        const data = await db.select().from(datasetsTable)
        .where(eq(datasetsTable.userId, userId)); 
        return NextResponse.json(data);
    } catch (error) {
        console.error('Database error:', error);
        return NextResponse.json({ error: error }, { status: 500 });
    }
}

export async function POST(request: Request) {
    try {
      const body = await request.json();
      const validated = datasetsSchema.parse(body);
      
      if (validated.id) {
        const data = await db.update(datasetsTable)
          .set({ ...validated, updatedAt: new Date() })
          .where(eq(datasetsTable.id, validated.id))
          .returning();
        
        if (!data.length) {
          return NextResponse.json({ error: 'Connection not found' }, { status: 404 });
        }
        return NextResponse.json(data[0]);
      }
  
      const data = await db.insert(datasetsTable)
        .values({ ...validated, createdAt: new Date(), updatedAt: new Date() })
        .returning();
        
      return NextResponse.json(data[0]);
    } catch (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        { error: error instanceof z.ZodError ? error.errors : 'Operation failed' },
        { status: 400 }
      );
    }
  }


================================================
File: app/api/keys/routeX.ts
================================================
// // app/api/keys/route.ts
// import { NextRequest } from 'next/server';
// import { ApiKeyModel } from '@/app/lib/models/apiKey.model';
// import { WebhookModel } from '@/app/lib/models/webhook.model';
// import { WebhookManager } from '@/app/lib/webhook/webhook';

// const webhook = new WebhookManager();

// export async function POST(request: NextRequest) {
//   try {
//     const { name, permissions, rateLimit, expiresAt } = await request.json();
    
//     // Get userId from auth (adjust based on your auth setup)
//     const userId = request.user.id;

//     const apiKey = await ApiKeyModel.create({
//       name,
//       userId,
//       permissions,
//       rateLimit,
//       expiresAt: expiresAt ? new Date(expiresAt) : undefined,
//     });

//     // Fetch relevant webhooks
//     const userWebhooks = await WebhookModel.getByUserId(userId);
//     const relevantWebhooks = userWebhooks.filter(
//       hook => hook.isEnabled && hook.events.includes('api_key.created')
//     );

//     // Dispatch webhook events
//     await Promise.all(
//       relevantWebhooks.map(userWebhook =>
//         webhook.dispatch(userWebhook, 'api_key.created', {
//           keyId: apiKey.id,
//           name: apiKey.name,
//           createdAt: apiKey.createdAt
//         })
//       )
//     );

//     return Response.json(apiKey, { status: 201 });
//   } catch (error) {
//     console.log(error);
//     return Response.json(
//       { error: 'Failed to create API key' },
//       { status: 500 }
//     );
//   }
// }

// export async function GET(request: NextRequest) {
//   try {
//     const userId = request.user.id;
    
//     const keys = await prisma.apiKey.findMany({
//       where: { userId },
//       select: {
//         id: true,
//         name: true,
//         createdAt: true,
//         lastUsed: true,
//         expiresAt: true,
//         permissions: true,
//         rateLimit: true,
//       },
//     });

//     return Response.json(keys);
//   } catch (error) {
//     console.log(error);
//     return Response.json(
//       { error: 'Failed to fetch API keys' },
//       { status: 500 }
//     );
//   }
// }


================================================
File: app/api/pages/route.ts
================================================
import { NextResponse } from 'next/server';
import { db } from '@/app/lib/drizzle';
import { eq } from 'drizzle-orm';
import { pagesTable, pageSchema } from '@/app/lib/drizzle/schemas';
import { z } from 'zod';

export async function GET(request: Request) {
    try {
      const { searchParams } = new URL(request.url);
      const userId = searchParams.get("userId");
  
      if (!userId) {
        return NextResponse.json(
          { error: "userId is required" },
          { status: 400 }
        );
      }
      const data = await db.select().from(pagesTable)
      .where(eq(pagesTable.userId, userId)); 
        return NextResponse.json(data);
    } catch (error) {
        console.error('Database error:', error);
        return NextResponse.json({ error: error }, { status: 500 });
    }
}

export async function POST(request: Request) {
    try {
      const body = await request.json();
      const validated = pageSchema.parse(body);
      
      if (validated.id) {
        const data = await db.update(pagesTable)
          .set({ ...validated, updatedAt: new Date() })
          .where(eq(pagesTable.id, validated.id))
          .returning();
        
        if (!data.length) {
          return NextResponse.json({ error: 'Page not found' }, { status: 404 });
        }
        return NextResponse.json(data[0]);
      }
  
      const data = await db.insert(pagesTable)
        .values({ ...validated, createdAt: new Date(), updatedAt: new Date() })
        .returning();
        
      return NextResponse.json(data[0]);
    } catch (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        { error: error instanceof z.ZodError ? error.errors : 'Operation failed' },
        { status: 400 }
      );
    }
  }


================================================
File: app/api/webhooks/routeX.ts
================================================
// // app/api/webhooks/route.ts
// import { NextRequest } from 'next/server';
// import { WebhookModel } from '@/app/lib/models/webhook.model';

// export async function POST(request: NextRequest) {
//  try {
//    const { url, events } = await request.json();
//    const userId = request.user.id; // From auth middleware

//    const webhook = await WebhookModel.create({
//      userId,
//      url, 
//      events,
//    });

//    return Response.json(webhook, { status: 201 });
//  } catch (error) {
//     console.log(error);
//    return Response.json(
//      { error: 'Failed to create webhook' },
//      { status: 500 }
//    );
//  }
// }

// export async function GET(request: NextRequest) {
//  try {
//    const userId = request.user.id;
//    const webhooks = await WebhookModel.getByUserId(userId);
   
//    return Response.json(webhooks);
//  } catch (error) {
//     console.log(error);
//    return Response.json(
//      { error: 'Failed to fetch webhooks' },
//      { status: 500 }
//    );
//  }
// }


================================================
File: app/api/widgets/route.ts
================================================
import { NextResponse } from 'next/server';
import 'dotenv/config';
import { eq } from 'drizzle-orm';
import { z } from 'zod';
import { widgetsTable, widgetSchema } from '@/app/lib/drizzle/schemas';
import { db } from '@/app/lib/drizzle';

export async function GET() {
    try {
        const data = await db.select().from(widgetsTable); 
        return NextResponse.json(data);
    } catch (error) {
        console.error('Database error:', error);
        return NextResponse.json({ error: error }, { status: 500 });
    }
}

export async function POST(request: Request) {
    try {
      const body = await request.json();
      const validated = widgetSchema.parse(body);
      
      if (validated.id) {
        const data = await db.update(widgetsTable)
          .set({ ...validated, updatedAt: new Date() })
          .where(eq(widgetsTable.id, validated.id))
          .returning();
        
        if (!data.length) {
          return NextResponse.json({ error: 'Widget not found' }, { status: 404 });
        }
        return NextResponse.json(data[0]);
      }
  
      const data = await db.insert(widgetsTable)
        .values({ ...validated, createdAt: new Date(), updatedAt: new Date() })
        .returning();
        
      return NextResponse.json(data[0]);
    } catch (error) {
      console.error('Database error:', error);
      return NextResponse.json(
        { error: error instanceof z.ZodError ? error.errors : 'Operation failed' },
        { status: 400 }
      );
    }
  }


================================================
File: app/api/widgets/[id]/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import 'dotenv/config';
import { eq } from 'drizzle-orm';
import { widgetsTable, widgetSchema } from '@/app/lib/drizzle/schemas';
import { db } from '@/app/lib/drizzle';


export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const id = (await params).id;
    const body = await request.json();
    const validated = widgetSchema.parse(body);

    const data = await db.update(widgetsTable)
    .set({ ...validated, updatedAt: new Date() })
    .where(eq(widgetsTable.id, id))
    .returning();
  
    if (!data.length) {
      return NextResponse.json({ error: 'Connection not found' }, { status: 404 });
    }
    return NextResponse.json(data[0]);

  } catch (error) {
    console.error("[WIDGET_PATCH]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const id = (await params).id;

    await db.delete(widgetsTable)
    .where(eq(widgetsTable.id, id))

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("[WIDGET_DELETE]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}


================================================
File: app/dashboard/layout.tsx
================================================
'use client';

import React, { useState } from 'react';
import Sidebar from '@/app/dashboard/(navigation)/Sidebar';
import Header from '@/app/dashboard/(navigation)/Header';

const DashboardLayout = ({ children }: { children: React.ReactNode }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  return (
      <div className="flex h-screen bg-gray-100">
        <div className="p-4 h-full">
          <Sidebar isOpen={isSidebarOpen} />
        </div>
        <div className="flex-1 flex flex-col overflow-hidden p-4">
          <Header 
            onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} 
          />
          {children}
        </div>
      </div>
  );
};

export default DashboardLayout;


================================================
File: app/dashboard/page.tsx
================================================
'use client';

import WidgetGrid from '@/app/dashboard/components/widgets/WidgetGrid';
import { usePageStore } from '@/app/store/pageStore'
import { useEffect, useState } from 'react';
import { IPage } from '../lib/drizzle/schemas';
import { useDatasetStore } from '../store/datasets';
import { useConnectionStore } from '../store/connections';
import { useAuth } from '@clerk/nextjs';

export default function Dashboard() {
  const { userId } = useAuth()
  const { pages, activateDashboard } = usePageStore()
  const { fetchDatasets } = useDatasetStore();
  const { fetchConnections } = useConnectionStore();
  const [activePage, setActivePage] = useState({} as IPage);

  useEffect(() => {
    pages.forEach(item => {
      if(item.active) {
        setActivePage(item);
      } else {
        if(item.subpages) {
          item.subpages?.forEach(sp => {
            setActivePage(sp);
          })
        }
      }
    });
  }, [pages]);

  useEffect(() => {
    if(!userId) return;
    fetchDatasets(userId);
    fetchConnections(userId);
  },[userId, fetchDatasets, fetchConnections]);

  return (
    <div className="flex-1 overflow-auto">
      {/* max-w-7xl  */}
      <div className="mx-auto">
        <WidgetGrid page={activePage} initDashboard={activateDashboard} />
      </div>
    </div>
  );
}



================================================
File: app/dashboard/(navigation)/AddPageModal.tsx
================================================
'use client';

import React, { useState } from 'react';
import { X } from 'lucide-react';
import IconSelector from '@/app/ui/components/icons/IconSelector';
import { ErrorBoundary } from '@/app/ui/components/ErrorBoundary';
import { IPage } from '@/app/lib/drizzle/schemas';
import { useAuth } from '@clerk/nextjs'

interface AddPageModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAdd: (menuItem: IPage) => void;
}

const AddPageModal: React.FC<AddPageModalProps> = ({ isOpen, onClose, onAdd }) => {
  const { userId } = useAuth()
  const [form, setForm] = useState<IPage>({
    icon: '', label: '', route: '', active: false, userId: ''
  } as IPage);
  
  const updateForm = (update: Partial<IPage>) => {
    setForm(({...form, ...update} as IPage));
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if(!userId) {
      console.log('You must be logged in to add a Page');
      return;
    };
    onAdd({...form, userId: userId} as IPage);
    // Reset form
    setForm({icon: '', label: '', route: '', active: false, userId: ''});
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-6 w-full max-w-2xl">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">Add Page</h2>
          <button aria-label="close add page modal" onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg">
            <X size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Label</label>
            <input
              type="text"
              value={form.label}
              onChange={(e) => updateForm({ label: e.target.value })}
              className="w-full p-2 border rounded-lg"
              placeholder="Page Label"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Route</label>
            <input
              type="text"
              value={form.route}
              onChange={(e) => updateForm({ route: e.target.value })}
              className="w-full p-2 border rounded-lg"
              placeholder="Page Route"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Page Icon</label>
            <ErrorBoundary>
              <IconSelector
                selectedIcon={form.icon}
                onSelectIcon={(icon) => updateForm({ icon })}
              />
            </ErrorBoundary>
          </div>

          <div className="flex justify-end gap-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
            >
              Add Page
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddPageModal;


================================================
File: app/dashboard/(navigation)/Header.tsx
================================================
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Search, Menu, LogOut, User, Plus } from 'lucide-react';
import AddPageModal from '@/app/dashboard/(navigation)/AddPageModal'
import { usePageStore } from '@/app/store/pageStore'
import { SignedIn, UserButton, useUser, useClerk } from '@clerk/nextjs'

interface HeaderProps {
  onToggleSidebar: () => void;
}

const Header = ({ onToggleSidebar }: HeaderProps) => {
  const { user } = useUser()
  const { signOut } = useClerk()
  const { addPage } = usePageStore()
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [isAddPageOpen, setIsAddPageOpen] = useState(false);

  const profileRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (profileRef.current && !profileRef.current.contains(event.target as Node)) {
        setIsProfileOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);


  return (
    <div className="bg-white rounded-xl mb-4 sticky top-0 z-10">
      <div className="h-16 flex items-center justify-between px-6">
        <div className="flex items-center justify-start gap-x-4">
          <button 
            className="p-2 hover:bg-gray-100 rounded-lg"
            onClick={onToggleSidebar}
          >
            <Menu size={20} />
          </button>
          <button
            onClick={() => setIsAddPageOpen(true)}
            className="flex items-center gap-2 px-2 py-1 text-blue-400 rounded-lg hover:text-blue-600 border border-blue-400"
          >
            <Plus size={20} />
            Page
          </button>
        </div>

        <div className="flex-1 max-w-2xl ml-8">
          {/* <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Try to searching..."
              className="w-full pl-10 pr-4 py-2 bg-gray-50 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div> */}
        </div>

        <div className="flex items-center gap-4">
          {/* <button aria-label="Toggle dark mode" className="p-2 hover:bg-gray-100 rounded-full">
            <Moon size={20} />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-full">
            <Image src="https://flagcdn.com/w20/gb.png" alt="English" width={20} height={20} /> 
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-full relative">
            <ShoppingBag size={20} />
            <span className="absolute top-0 right-0 bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
              8
            </span>
          </button>
          <button aria-label="Notification" className="p-2 hover:bg-gray-100 rounded-full relative">
            <Bell size={20} />
            <span className="absolute top-0 right-0 bg-red-500 w-2 h-2 rounded-full"></span>
          </button> */}
          
          <div className="relative" ref={profileRef}>
            <button
              className="flex items-center gap-2 ml-2 p-2 hover:bg-gray-100 rounded-lg"
              onClick={() => setIsProfileOpen(!isProfileOpen)}
            >

              <SignedIn>
                <UserButton />
                <div className="font-medium">{user?.fullName}</div>
              </SignedIn>
            </button>

            {isProfileOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2">
                <button className="w-full px-4 py-2 text-left flex items-center gap-2 hover:bg-gray-50">
                  <User size={16} />
                  <span>Profile</span>
                </button>
                <button 
                  onClick={() => signOut({ redirectUrl: '/' })}
                  className="w-full px-4 py-2 text-left flex items-center gap-2 hover:bg-gray-50 text-red-600"
                >
                  <LogOut size={16} />
                  <span>Logout</span>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      <AddPageModal
        isOpen={isAddPageOpen}
        onClose={() => setIsAddPageOpen(false)}
        onAdd={(item) => {
          addPage(item);
          setIsAddPageOpen(false);
        }}
      />

    </div>
  );
};

export default Header;


================================================
File: app/dashboard/(navigation)/Sidebar.tsx
================================================
'use client';

import React, { useEffect, useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { 
  ChevronDown,
  ChevronRight,
} from 'lucide-react';
import { usePageStore } from '@/app/store/pageStore'
import { IPage } from '@/app/lib/drizzle/schemas';
import { renderIcon } from '@/app/ui/components/icons/Icon';
import { useAuth, SignedIn, UserButton, useUser } from '@clerk/nextjs'

interface SidebarProps {
  isOpen: boolean;
}

const Sidebar = ({ isOpen }: SidebarProps) => {  
  const { userId } = useAuth()
  const { user } = useUser()
  const router = useRouter();
  const pathname = usePathname();
  const { setActive, pages, bottomPages, fetchPages, seedDashboard } = usePageStore()
  const [expandedMenus, setExpandedMenus] = useState<string[]>([]);

  useEffect(() => {
    if(!userId) {
      console.log('You must be logged in to fetch pages');
      return;
    }
    fetchPages(userId).then( async (data) => {
      if(data.length == 0) {
        await seedDashboard(userId);
      } else {
        const dashboardPage = data.find((item: IPage) => item.label == 'Dashboard');
        if(!dashboardPage) {
          await seedDashboard(userId);
        }
      }
    });
  }, [fetchPages, seedDashboard, userId]);

  const toggleSubmenu = (menu: IPage) => {
    if (menu.subpages) {
      setExpandedMenus(prev => 
        prev.includes(menu.label) 
          ? prev.filter(item => item !== menu.label)
          : [...prev, menu.label]
      );
    } else {
      setActive(menu)
    }
  };

  const handleMenuClick = (item: IPage, isBottomMenu: boolean = true) => {
    if (isBottomMenu) {
      // Handle bottom menu items (settings, connections, etc.)
      if (item.route && pathname !== item.route) {
        setActive(item)
        router.push(item.route);
      }
    } else {
      // Handle top menu items (dashboard items)
      toggleSubmenu(item);
      // Only navigate if we're not already on dashboard
      if (pathname !== '/dashboard') {
        router.push('/dashboard');
      }
    }
  };

   // Logo click handler
   const handleLogoClick = () => {
    if (pathname !== '/dashboard') {
      router.push('/dashboard');
    }
  };

  return (
    <div className={`bg-white rounded-xl h-full transition-all duration-300 ${
      isOpen ? 'w-64' : 'w-20'
    } flex flex-col overflow-hidden`}>
      <div className={`flex items-center gap-2 p-4 ${!isOpen && 'justify-center'}`}
        onClick={handleLogoClick}>
        <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center flex-shrink-0">
          <span className="text-white text-xl">B</span>
        </div>
        {isOpen && <h1 className="text-xl font-semibold">BeakDash</h1>}
      </div>

      {/* {isOpen && <div className="text-gray-500 text-sm px-4 mb-2">HOME</div>} */}

      <nav className="flex-1 overflow-y-auto">
        {pages.length == 0 && <div className="flex items-center justify-center h-full">Loading Pages...</div>}
        {pages.length > 0 && <div className="px-2">
          {pages.map((item, index) => (
            <div key={index}>
              <div
                className={`flex items-center gap-3 p-3 rounded-lg cursor-pointer mb-1 ${
                  item.active ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
                }`}
                onClick={() => handleMenuClick(item, false)}
              >
                {renderIcon(item.icon, 'flex-shrink-0')}
                {isOpen && (
                  <>
                    <span className="truncate">{item.label}</span>
                    {item.subpages && (
                      <span className="ml-auto">
                        {expandedMenus.includes(item.label) ? (
                          <ChevronDown size={16} />
                        ) : (
                          <ChevronRight size={16} />
                        )}
                      </span>
                    )}
                  </>
                )}
              </div>
              {isOpen && item.subpages && expandedMenus.includes(item.label) && (
                <div className="ml-9 mb-2">
                  {item.subpages.map((subItem, subIndex) => (
                    <div
                      key={subIndex}
                      className={`py-2 px-3 text-sm hover:text-blue-600 cursor-pointer ${
                        item.active ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
                      }`}
                      onClick={() => setActive(item, subItem)}
                    >
                      {subItem.label}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>}
      </nav>
      <nav className="border-t pt-1">
        <div className="px-2">
          {bottomPages.map((item, index) => (
            <div key={index}>
              <div
                className={`flex items-center gap-3 p-3 rounded-lg cursor-pointer mb-1 ${
                  item.active ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
                }`}
                onClick={() => handleMenuClick(item, true)}
              >
                {renderIcon(item.icon, 'flex-shrink-0')}
                {isOpen && (<span className="truncate">{item.label}</span>)}
              </div>
            </div>
          ))}
        </div>
      </nav>
      <div className="border-t p-4">
        <div className={`flex items-center gap-3 ${!isOpen && 'justify-center'}`}>
          {/* <Image
            src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=48&h=48&q=80"
            alt="Profile"
            className="w-10 h-10 rounded-full flex-shrink-0"
            width={40}
            height={40}
          /> */}
          {isOpen && (
            <SignedIn>
              <UserButton />
              <div className="font-medium">{user?.fullName}</div>
            </SignedIn>
          )}
        </div>
      </div>
    </div>
  );
};

export default Sidebar;


================================================
File: app/dashboard/components/DataExplorer.tsx
================================================
import React, { useMemo } from 'react';
import {
  Card,
  CardContent
} from "@/app/ui/components/card";
import {
  Table,
  TableHeader,
  TableBody,
  TableHead,
  TableRow,
  TableCell
} from "@/app/ui/components/table";

interface DataPoint {
  [key: string]: any;
}

interface DataExplorerProps {
  data: DataPoint[];
}

const DataExplorer = ({ data }: DataExplorerProps) => {
  const columns = useMemo(() => {
    try {
      if (!Array.isArray(data) || data.length === 0 || !data[0]) return [];
      const firstRow = data[0];
      if (typeof firstRow !== 'object' || firstRow === null) return [];
      return Object.keys(firstRow);
    } catch (error) {
      console.error('Error getting columns:', error);
      return [];
    }
  }, [data]);

  return (
    <Card className="w-full">
      <CardContent className="p-6">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                {columns.map(column => (
                  <TableHead key={column} className="font-medium">
                    <div className="flex items-center gap-2">
                      <span>{column}</span>
                    </div>
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {data.slice(0, 5).map((row, i) => (
                <TableRow key={i}>
                  {columns.map(column => (
                    <TableCell key={column}>
                      {String(row[column])}
                    </TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </Table>
          {data.length > 5 && (
            <div className="text-sm text-muted-foreground mt-2">
              Showing 5 of {data.length} rows
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default DataExplorer;


================================================
File: app/dashboard/components/AICopilot/AICopilotButton.tsx
================================================
import React from 'react';
import { Bot } from 'lucide-react';
import { useAICopilotStore } from '@/app/store/copilotStore';
import { IWidget } from '@/app/lib/drizzle/schemas';
import { useDatasetStore } from '@/app/store/datasets';

interface AICopilotButtonProps {
  widget?: IWidget;
  variant?: 'button' | 'icon';
  userId: string;
  pageId: string;
}

const AICopilotButton: React.FC<AICopilotButtonProps> = ({ widget, variant = 'icon', userId, pageId }) => {
  const { toggleChat, setContext } = useAICopilotStore();
  const { datasets } = useDatasetStore();

  const handleClick = () => {
    if(widget) {
      const dataset = datasets.find(d => d.id === widget.datasetId);
      setContext({ type: 'widget', widget, dataset, userId, pageId });
    } else {
      setContext({ type: 'new', userId, pageId });
    }
    toggleChat();
  };

  return (
    variant === 'button' ? (
      <button
        onClick={handleClick}
        className="flex items-center gap-2 px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg"
      >
        <Bot size={20} />
        AI Copilot
      </button>
    ) :
    <button
      onClick={handleClick}
      className="p-1 hover:bg-gray-100 rounded-full text-gray-600 hover:text-blue-600 transition-colors"
      title="AI Copilot"
    >
      <Bot size={16} />
    </button>
  );
};

export default AICopilotButton;


================================================
File: app/dashboard/components/AICopilot/AICopilotChat.tsx
================================================
// components/AICopilotChat.tsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Send, Minimize2, Maximize2, Loader, Database } from 'lucide-react';
import { useAICopilotStore } from '@/app/store/copilotStore';

import ReactMarkdown from 'react-markdown';
import { useDatasetStore } from '@/app/store/datasets';
import { useAuth } from '@clerk/nextjs';
import { ChartContext } from '@/app/types/copilot';

const AICopilotChat: React.FC = () => {
  const {
    isOpen,
    isLoading,
    messages,
    context,
    setContext,
    toggleChat,
    addMessage,
    clearAll,
    invokeCopilot,
  } = useAICopilotStore();
  const { userId } = useAuth()
  const [input, setInput] = useState('');
  const [isMinimized, setIsMinimized] = useState(false);
  const { datasets , fetchDatasets } = useDatasetStore();
  
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Fetch available datasets
  useEffect(() => {
    fetchDatasets(userId!);
  }, [fetchDatasets, userId]);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const onChangeDataset = (datasetId: string) => {
    setContext({
      ...(context || {}),
      dataset: datasets.find(d => d.id === datasetId)
    }as ChartContext);
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || !context) return;

    const userMessage = input;
    setInput('');
    
    addMessage({
      role: 'user',
      content: userMessage
    });

    try {
      await invokeCopilot()
    } catch (error) {
      console.log('Chat error:', error);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className={`fixed right-4 bottom-4 bg-white rounded-lg shadow-xl ${
            isMinimized ? 'w-64 h-12' : 'w-96 h-[600px]'
          } flex flex-col overflow-hidden z-50`}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b bg-gray-50">
            <h3 className="font-semibold text-gray-700">
              AI Copilot {context?.type === 'widget' ? '- Edit Mode' : '- Create Mode'}
            </h3>
            <div className="flex items-center gap-2">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className="p-1 hover:bg-gray-200 rounded"
              >
                {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
              </button>
              <button
                onClick={() => {
                  toggleChat();
                  clearAll();
                }}
                className="p-1 hover:bg-gray-200 rounded"
              >
                <X size={16} />
              </button>
            </div>
          </div>

          {!isMinimized && (
            <>
              {/* Dataset Selection */}
              <div className="p-4 border-b">
                <div className="flex items-center gap-2">
                  <Database size={16} className="text-gray-500" />
                  <select
                    value={context?.dataset?.id || ''}
                    onChange={(e) => onChangeDataset(e.target.value)}
                    className="flex-1 p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select a dataset</option>
                    {datasets.map((dataset) => (
                      <option key={dataset.id} value={dataset.id}>
                        {dataset.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message, index) => (
                  <div
                    key={index}
                    className={`flex ${
                      message.role === 'user' ? 'justify-end' : 'justify-start'
                    }`}
                  >
                    <div
                      className={`max-w-[80%] rounded-lg p-3 ${
                        message.role === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      <ReactMarkdown>{message.content}</ReactMarkdown>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>

              {/* Input Form */}
              <form onSubmit={handleSubmit} className="p-4 border-t">
                <div className="relative">
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder={
                      !context?.dataset?.id
                        ? "Select a dataset first..."
                        : context?.type === 'widget'
                        ? "Ask how to modify this chart..."
                        : "Describe the chart you'd like to create..."
                    }
                    disabled={isLoading || !context?.dataset?.id}
                    className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100"
                  />
                  <button
                    type="submit"
                    disabled={isLoading || !input.trim() || !context?.dataset?.id}
                    className="absolute right-2 top-1/2 -translate-y-1/2 p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400"
                  >
                    {isLoading ? <Loader className="animate-spin" size={20} /> : <Send size={20} />}
                  </button>
                </div>
              </form>
            </>
          )}
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AICopilotChat;


================================================
File: app/dashboard/components/widgets/ChartWrapper.tsx
================================================
import React, { useRef, useEffect, useState } from 'react';
import {
  Line,
  Column,
  Bar,
  Pie,
  Area,
  DualAxes,
  Scatter,
} from '@ant-design/charts';
import { IChart } from '@/app/lib/drizzle/schemas';

const ChartComponents = {
  line: Line,
  column: Column,
  bar: Bar,
  pie: Pie,
  area: Area,
  'dual-axes': DualAxes,
  scatter: Scatter,
} as const;

interface ChartWrapperProps {
  type: IChart;
  config: any;
  style?: React.CSSProperties;
  layout?: {
    w: number;
    h: number;
  };
}

const ChartWrapper: React.FC<ChartWrapperProps> = ({ type, config, style, layout }) => {
  const ChartComponent = ChartComponents[type];
  const containerRef = useRef<HTMLDivElement>(null);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

  useEffect(() => {
    if (!containerRef.current) return;

    const updateDimensions = () => {
      const container = containerRef.current;
      if (!container) return;

      // Get the parent element's dimensions
      const parentElement = container.parentElement;
      if (!parentElement) return;

      // Calculate height based on layout or parent height
      const height = layout?.h 
        ? layout.h * 100 - 40 // Subtract padding/margins
        : parentElement.clientHeight - 40;

      setDimensions({
        width: parentElement.clientWidth - 32, // Subtract horizontal padding
        height: Math.max(height, 200), // Ensure minimum height
      });
    };

    // Initial update
    updateDimensions();

    const resizeObserver = new ResizeObserver(() => {
      window.requestAnimationFrame(updateDimensions);
    });

    // Observe both container and its parent
    resizeObserver.observe(containerRef.current);
    if (containerRef.current.parentElement) {
      resizeObserver.observe(containerRef.current.parentElement);
    }

    return () => {
      resizeObserver.disconnect();
    };
  }, [layout]);

  return (
    <div 
      ref={containerRef}
      className="w-full h-full"
      style={{
        minHeight: '200px',
        ...style,
      }}
    >
      {dimensions.width > 0 && dimensions.height > 0 && (
        <ChartComponent
          {...config}
          width={dimensions.width}
          height={dimensions.height}
          autoFit={true}
        />
      )}
    </div>
  );
};

export default ChartWrapper;


================================================
File: app/dashboard/components/widgets/WidgetGrid.tsx
================================================
'use client';

import React, { useEffect, useState } from 'react';
import { Responsive, WidthProvider } from 'react-grid-layout';
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';
import { Plus } from 'lucide-react';
import WidgetVisual from '@/app/dashboard/components/widgets/WidgetVisual';
import WidgetEditorModal from '@/app/dashboard/components/widgets/widget-editor/WidgetEditorModal';
import AICopilotButton from '@/app/dashboard/components/AICopilot/AICopilotButton';
import AICopilotChat from '@/app/dashboard/components/AICopilot/AICopilotChat';
import { useWidgetStore } from '@/app/store/widgetStore';
import { IPage, IWidget } from '@/app/lib/drizzle/schemas';
import { useWidget } from '../../hooks/useWidget';
import { useAuth } from '@clerk/nextjs';

const ResponsiveGridLayout = WidthProvider(Responsive);

const WidgetGrid = ({ page, initDashboard }: { page: IPage, initDashboard: () => void }) => {
  const { userId } = useAuth()
  const { widgets, updateWidget, fetchWidgets } = useWidgetStore();
  const [menuWidgets, setMenuWidgets] = useState<IWidget[]>([]);
  const [layouts, setLayouts] = useState({});
  const {isOpen, setIsOpen, isEditingWidget,form, setForm, handlers} = useWidget()

  useEffect(() => {
    if(page === null || page === undefined || (typeof page === 'object' && Object.keys(page).length === 0)) {
      initDashboard();
    }
  }, [page, initDashboard]);

  useEffect(() => {
    if(page.id) fetchWidgets(page.id);
  }, [page, fetchWidgets]);

  useEffect(() => {
    // Filter widgets belonging to the current menu item
    const wgts: IWidget[] = widgets.filter((w) => w.pageId === page.id);
    setMenuWidgets(wgts);
    const llll = { lg: wgts?.map(w => ({...w.layout, i: w.id})) }
    setLayouts(llll)
  }, [page, widgets]);

  const handleLayoutChange = (layout: any, updated: any) => {
    setLayouts(updated);
    if(updated?.lg) {
      for(const lay of updated.lg){
        const widget = menuWidgets.find(w => w.id === lay.i)
        if(widget) {
          const areEqual = compareObjectKeys(widget.layout, lay, ['x', 'y', 'w', 'h'])
          if (!areEqual) updateWidget(widget.id!, {...widget, layout: lay});
        }
      }
    };
  };

  const compareObjectKeys = (obj1: Record<string, string | number>, obj2: Record<string, string | number>, keysToCompare: string[]) => {
      // Check if all specified keys exist in both objects
      const hasAllKeys = keysToCompare.every(key => 
          obj1.hasOwnProperty(key) && obj2.hasOwnProperty(key)
      );
      if (!hasAllKeys) return false;
      // Compare the values for each specified key
      return keysToCompare.every(key => obj1[key] === obj2[key]);
  }

  return (
    <div className="p-4">
      <div className="flex justify-between mb-6">
        <h2 className="text-2xl font-bold">{page?.label} Widgets</h2>
        <div className="flex gap-2">
          <AICopilotButton variant='button' pageId={page.id!} userId={userId!} />
          <button
            onClick={() => setIsOpen(true)}
            className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            <Plus size={20} />
            Add Widget
          </button>
        </div>
      </div>

      <ResponsiveGridLayout
        className="layout"
        layouts={layouts}
        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}
        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}
        rowHeight={100}
        onLayoutChange={handleLayoutChange}
        draggableHandle='.drag-handle'
      >
        {menuWidgets.map((widget) => (
          <div key={widget.id} id={widget.id} className="bg-white rounded-xl shadow-sm">
            <WidgetVisual 
              widget={widget} 
              onEdit={handlers.handleEdit} 
              onDelete={handlers.handleDelete} 
            />
          </div>
        ))}
      </ResponsiveGridLayout>

      <WidgetEditorModal 
          page={page}
         isOpen={isOpen}
         setIsOpen={setIsOpen}
         isEditingWidget={isEditingWidget}
         form={form}
         setForm={setForm}
         handlers={handlers}
      />

      <AICopilotChat />
    </div>
  );
};

export default WidgetGrid;



================================================
File: app/dashboard/components/widgets/WidgetVisual.tsx
================================================
'use client';

import React, { useCallback, useEffect, useState } from 'react';
import { Settings, Grip, Trash2 } from 'lucide-react';
import { useDataSet } from '@/app/lib/hooks/useDataSet';
import AICopilotButton from '@/app/dashboard/components/AICopilot/AICopilotButton';
import { WidgetError } from '@/app/dashboard/components/widgets/states/WidgetError';
import { WidgetSkeleton } from '@/app/dashboard/components/widgets/states/WidgetSkeleton';
import { getChartOptions } from '@/app/lib/charts/options';
import { useAuth } from '@clerk/nextjs';
import { IVisual, IWidget } from '@/app/lib/drizzle/schemas';
import ChartWrapper from './ChartWrapper';

interface WidgetProps {
  widget: IWidget;
  onEdit: (widget: IWidget) => void;
  onDelete: (id: string) => void;
}

const WidgetVisual: React.FC<WidgetProps> = ({ widget, onEdit, onDelete }) => {
  const { userId } = useAuth()
  const { data, loading, error } = useDataSet(widget); 
  const [chartOptions, setEchartOptions] = useState<any>(null);

  const isChart = (widget.type as IVisual) !== 'count';

  const getEChartOption = useCallback(() => {
    const chartOpts = getChartOptions(widget, data);
    setEchartOptions(chartOpts);
  },[data, widget])
  
  useEffect(() => {
    getEChartOption();
  }, [getEChartOption, widget.transformConfig]);

  if (loading) {
    return <WidgetSkeleton type={widget.type} />;
  }
  
  if (error) {
    return (<>
      <WidgetError
        message={error.message}
        onRetry={() => window.location.reload()}
        onEdit={() => onEdit(widget)}
      />
    </>);
  }

  return (
    <div id={widget.id} className="h-full flex flex-col">
      <div className="flex justify-between items-start px-4 pt-4 pb-2">
        <div>
          <h3 className="font-semibold">{widget.title}</h3>
          {widget.subtitle && (
            <p className="text-sm text-gray-500">{widget.subtitle}</p>
          )}
        </div>
        <div className="flex gap-2">
          <AICopilotButton 
            variant='icon' 
            widget={widget}
            userId={userId!}
            pageId={widget.pageId}
          />
          <button
            onClick={() => onEdit(widget)}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <Settings size={20} />
          </button>
          <button
            onClick={() => onDelete(widget.id!)}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <Trash2 size={20} />
          </button>
          {isChart && (
            <button 
            aria-label='Drag Widget'
            className="p-2 hover:bg-gray-100 rounded-lg drag-handle">
              <Grip size={20} />
            </button>
          )}
        </div>
      </div>
      <hr />
      <div className='p-4 flex-1'>
        {isChart && chartOptions ? (
          <ChartWrapper
            type={widget.type}
            config={chartOptions}
            layout={widget.layout}
          />
        ) : (
          <div className="mt-4">
            <p>number here</p>
            {/* <div className="text-3xl font-bold">{form.data.value}</div>
            {form.data.change && (
              <div className={`flex items-center gap-1 mt-2 ${
                form.data.change > 0 ? 'text-green-500' : 'text-red-500'
              }`}>
                {form.data.change > 0 ? (
                  <TrendingUp size={16} />
                ) : (
                  <TrendingDown size={16} />
                )}
                <span>{Math.abs(form.data.change)}%</span>
              </div>
            )} */}
          </div>
        )}
      </div>
    </div>
  );
};

export default WidgetVisual;


================================================
File: app/dashboard/components/widgets/states/WidgetError.tsx
================================================
import React from 'react';
import { AlertTriangle } from 'lucide-react';

interface WidgetErrorProps {
  message: string;
  onRetry?: () => void;
  onEdit?: () => void;
}

export const WidgetError: React.FC<WidgetErrorProps> = ({ message, onRetry, onEdit }) => {
  return (
    <div className="h-full w-full flex flex-col items-center justify-center p-8 bg-red-50">
      <AlertTriangle size={48} className="text-red-500 mb-4" />
      <h3 className="text-lg font-semibold text-red-700 mb-2">Widget Error</h3>
      <p className="text-red-600 text-center">{message}</p>
      {onRetry && (<div className='flex justify-start items-center gap-x-4'>
        <button
          onClick={onRetry}
          className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
        >
          Retry
        </button>
        <button
          onClick={onEdit}
          className="mt-4 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
        >
          Edit
        </button>
      </div>)}
    </div>
  );
};


================================================
File: app/dashboard/components/widgets/states/WidgetSkeleton.tsx
================================================
import { IWidget } from '@/app/lib/drizzle/schemas';
import React from 'react';

interface WidgetSkeletonProps {
  type: IChart;
}

export const WidgetSkeleton: React.FC<WidgetSkeletonProps> = ({ type }) => {
  return (
    <div className="h-full w-full flex items-center justify-center p-4 bg-gray-50 animate-pulse">
      <div className="w-full h-full">
        <div className="h-6 w-1/3 bg-gray-200 rounded mb-4" />
        <div className="h-4 w-1/4 bg-gray-200 rounded mb-6" />
        
        {type !== 'count' ? (
          <div className="w-full h-[calc(100%-4rem)] bg-white rounded-lg p-4">
            <div className="w-full h-full flex flex-col gap-2">
              <div className="w-full h-8 bg-gray-200 rounded" />
              <div className="flex-1 flex items-end">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="flex-1 bg-gray-200 rounded-t mx-1"
                    style={{ height: `${Math.random() * 80 + 20}%` }}
                  />
                ))}
              </div>
            </div>
          </div>
        ) : (
          <div className="w-full h-[calc(100%-4rem)] flex flex-col justify-center items-center">
            <div className="h-12 w-1/2 bg-gray-200 rounded mb-4" />
            <div className="h-6 w-1/4 bg-gray-200 rounded" />
          </div>
        )}
      </div>
    </div>
  );
};


================================================
File: app/dashboard/components/widgets/widget-editor/DatasetPanel.tsx
================================================
'use client';

import { IDataset, IWidget } from "@/app/lib/drizzle/schemas";
import { Badge } from "@/app/ui/components/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/app/ui/components/select";
import React from 'react';

interface DataPanelProps {
  form: IWidget;
  datasets: IDataset[];
  dataset: IDataset | null; 
  onUpdateDataset: (datasetId: string) => void;
}

// Left Panel Components
const DatasetPanel: React.FC<DataPanelProps> = ({ form, onUpdateDataset, dataset, datasets }) => {

  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium mb-1">Dataset</label>
        <Select 
            value={form.datasetId}
            onValueChange={onUpdateDataset}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select Value" />
            </SelectTrigger>
            <SelectContent>
              {datasets.map(dataset => (
                <SelectItem key={dataset.id} value={dataset.id!} >{dataset.name}</SelectItem>
              ))}
            </SelectContent>
          </Select>
      </div>

      {dataset && <div className="mt-4">
        <p className="my-4 leasing">Table Name: {dataset.table}</p>
        <h3 className="text-sm font-medium mb-2">Available Columns</h3>
        <div className="mt-2 border rounded-lg">
          <div className="max-h-[250px] overflow-y-auto">
            <table className="w-full">
              <thead className="bg-muted sticky top-0">
                <tr>
                  <th className="text-left p-2 text-sm font-medium">Column</th>
                  <th className="text-left p-2 text-sm font-medium">Type</th>
                </tr>
              </thead>
              <tbody>
                {dataset?.columns?.map((col, idx) => (
                  <tr key={idx} className="border-t">
                    <td className="p-2 text-sm">{col.column}</td>
                    <td className="p-2">
                      <Badge variant="secondary" className="text-xs font-mono">
                        {col.type}
                      </Badge>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>}

    </div>
  );
};

export default DatasetPanel;


================================================
File: app/dashboard/components/widgets/widget-editor/WidgetEditorModal.tsx
================================================
'use client';

import React, { useCallback, useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import {
  LineChart, SaveAll, Table, X, Zap,
  Settings, ArrowLeft,
  RemoveFormatting
} from 'lucide-react';
import { Editor } from '@monaco-editor/react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/app/ui/components/tabs';
import { format, FormatOptionsWithLanguage } from 'sql-formatter';
import DataExplorer from '@/app/dashboard/components/DataExplorer';
import { AntChartOptions, DataPoint } from '@/app/types/data';
import ChartConfigPanel from '@/app/dashboard/components/widgets/widget-editor/config-panel/ChartConfigPanel';
import DatasetPanel from '@/app/dashboard/components/widgets/widget-editor/DatasetPanel';
import { getChartOptions } from '@/app/lib/charts/options';
import { SQLAdapter } from '@/app/lib/adapters/sql';
import { IConnection, IDataset, IPage, IWidget } from '@/app/lib/drizzle/schemas';
import { Alert, AlertDescription } from '@/app/ui/components/alert';
import { useDatasetStore } from '@/app/store/datasets';
import { useAuth } from '@clerk/nextjs'
import { useConnectionStore } from '@/app/store/connections';
import { SQLConnectionConfig } from '@/app/types/datasource';
import ChartWrapper from '../ChartWrapper';

const SQL_FORMAT_OPTIONS = {
  language: 'postgresql', // or 'mysql', 'sqlite', etc.
  keywordCase: "upper",
  linesBetweenQueries: 2,
  indentStyle: 'standard',
} as FormatOptionsWithLanguage;

interface WidgetModalProps {
  page: IPage;
  initData?: DataPoint[];
  isOpen: boolean;
  setIsOpen: (val: boolean) => void;
  isEditingWidget: boolean;
  form: IWidget;
  setForm: (widget: IWidget) => void;
  handlers: any;
}

const WidgetEditorModal: React.FC<WidgetModalProps> = ({
  page,
  isOpen,
  setIsOpen,
  isEditingWidget,
  form,
  setForm,
  handlers
}) => {
  const { userId } = useAuth()
  const [mounted, setMounted] = useState(false);
  const [data, setData] = useState<DataPoint[]>([]);
  const [activePanel, setActivePanel] = useState<'connection' | 'chart'>('connection');
  const [activeDataView, setActiveDataView] = useState<'query' | 'table' | 'chart'>('query');
  const { datasets, fetchDatasets } = useDatasetStore();
  const [ dataset, setDataset] = useState<IDataset | null>(null);
  const { connections, fetchConnections } = useConnectionStore();
  const [ connection, setConnection] = useState<IConnection | null>(null);
  const [executionStatus, setExecutionStatus] = useState<{ success: boolean, message: string }>({ success: true, message: '' });
  const [isExecuting, setIsExecuting] = useState(false);

  const executeQuery = useCallback(async () => {
    setIsExecuting(true);
    try {
      const adapter = new SQLAdapter(connection?.config as SQLConnectionConfig);
      const fetchedData = await adapter.fetchData(form.query!);
      setData(fetchedData);
      setExecutionStatus({ success: true, message: '' });
      setActiveDataView('table');
    } catch (error) {
      setExecutionStatus({ 
        success: false, 
        message: error instanceof Error ? error.message : 'An unexpected error occurred' 
      });
    }
    setIsExecuting(false);
  }, [connection?.config, form.query]);

  
  useEffect(() => {
    // Early return if no user ID
    if (!userId) {
      console.log('You must be logged in to fetch datasets');
      return;
    }
    // Track mounted state
    let isMounted = true;

    const fetchData = async () => {
      try {
        // Fetch datasets and connections in parallel
        const [datasets, connections] = await Promise.all([
          fetchDatasets(userId),
          fetchConnections(userId)
        ]);

        // Only update state if component is still mounted
        if (!isMounted) return;

        // Find and set matching dataset
        if (datasets.length > 0) {
          const matchingDataset = datasets.find(d => d.id === form.datasetId);
          if (matchingDataset) setDataset(matchingDataset);
        }

        // Find and set matching connection
        if (connections.length > 0 && dataset?.connectionId) {
          const matchingConnection = connections.find(c => c.id === dataset.connectionId);
          if (matchingConnection) setConnection(matchingConnection);
        }

        // Execute query if editing widget
        if (isEditingWidget && connection) {
          await executeQuery();
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();

    // Cleanup function to prevent memory leaks
    return () => {
      isMounted = false;
    };
  }, [userId, form.datasetId, dataset?.connectionId, isEditingWidget, setDataset, setConnection, executeQuery, fetchDatasets, fetchConnections, connection]);

  const onUpdateDataset = (datasetId: string) => {
    setForm({ ...form, datasetId });
    const dataset = datasets.find(d => d.id === datasetId);
    setDataset(dataset || null);
    const connection = connections.find(c => c.id === dataset?.connectionId)
    setConnection(connection || null);
  };

  useEffect(() => {
    setMounted(true);
    return () => setMounted(false);
  }, []);

  const updateForm = (updates: Partial<IWidget>) => {
    setForm({...form, ...updates})
  }

  if (!isOpen || !mounted) return null;

  const getColumns = () => {
    if (!data || data.length === 0) return { all: [], numeric: [], nonNumeric: [] };
    const allColumns = data ? Object.keys(data[0]) : [];
    const numericCols = allColumns.filter(col => {
      // Get first non-null value
      const sampleValue = (data ?? []).find(row => row[col] != null)?.[col];
      // Check if it's a number or can be converted to a number
      if(sampleValue === null) return false;
      if(typeof sampleValue === 'number') return true;
      return typeof sampleValue === 'number' || 
             (!isNaN(sampleValue as any) && !isNaN(parseFloat(sampleValue as any)));
    });
    
    const nonNumericCols = allColumns.filter(col => {
      // Get first non-null value
      const sampleValue = (data ?? []).find(row => row[col] != null)?.[col];
      // Check if it's NOT a number and can't be converted to a number
      return typeof sampleValue !== 'number' && 
             (isNaN(sampleValue as any) || isNaN(parseFloat(sampleValue as any)));
    });
  
    return {
      all: allColumns,
      numeric: numericCols,
      nonNumeric: nonNumericCols
    }
  };

  const getEChartOptions = () => getChartOptions(form, data ?? [])

  const handleFormat = () => {
    try {
      updateForm({ query: format(form.query ?? '', SQL_FORMAT_OPTIONS) });
    } catch (error) {
      console.error('SQL formatting error:', error);
    }
  };

  return createPortal(
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-6 w-[90%] h-[90%] flex flex-col">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold capitalize">
            {isEditingWidget ? 'Edit Widget' : 'Create New Widget'}
          </h2>
          <button 
          aria-label='Close Modal'
          onClick={() => setIsOpen(false)} 
          className="p-2 hover:bg-gray-100 rounded-lg">
            <X size={20} />
          </button>
        </div>

        <div className="flex flex-1 gap-6">
          {/* Left Panel */}
          <div className="w-1/3 border-r pr-6">
            {activePanel === 'connection' ? (
              <DatasetPanel 
              form={form} 
              datasets={datasets} 
              dataset={dataset} 
              onUpdateDataset={onUpdateDataset}
              />
            ) : (<>
              <button
                onClick={() => setActivePanel('connection')}
                className="mb-4 flex items-center text-sm text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft size={16} className="mr-1" />
                Back to Connection Settings
              </button>
              <ChartConfigPanel 
                form={form}
                columns={getColumns()}
                setForm={setForm}
               />
            </>)}
          </div>

          {/* Right Panel */}
          <div className="flex-1">
            <div className='flex justify-start items-center mb-2'>
              <label className="block text-md font-medium mb-1 w-24">Title</label>
              <input
                type="text"
                value={form.title}
                onChange={(e) => updateForm({ title: e.target.value})}
                className="w-full p-1 border rounded-sm outline-none"
                placeholder="Widget Title"
              />
            </div>

            <div className='flex justify-start items-center'>
              <label className="block text-md font-medium mb-1 w-24">Subtitle</label>
              <input
                type="text"
                value={form.subtitle}
                onChange={(e) => updateForm({ subtitle: e.target.value})}
                className="w-full p-1 border rounded-sm outline-none"
                placeholder="Widget Subtitle"
              />
            </div>

            <hr className='my-4' />

            <Tabs defaultValue={activeDataView}>
              <TabsList>
                <TabsTrigger value="query">
                  <Table className="w-4 h-4 mr-2" />
                  Query View
                </TabsTrigger>
                <TabsTrigger value="table">
                  <Table className="w-4 h-4 mr-2" />
                  Table View
                </TabsTrigger>
                <TabsTrigger value="chart">
                  <LineChart className="w-4 h-4 mr-2" />
                  Chart Preview
                </TabsTrigger>
              </TabsList>

              <TabsContent value="query" className='min-h-[300px]'>
                <div className="mb-4">
                  <div className="flex justify-between items-center mb-2">
                    <label className="text-sm font-medium">SQL Query</label>
                    <div className="flex justify-start items-center gap-x-2">
                      <button 
                        onClick={executeQuery}
                        className="flex items-center px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                      >
                        <Zap size={14} className="mr-2" />
                        Execute
                      </button>
                      <button
                        className="flex items-center px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                        onClick={() => handleFormat()}
                      >
                        <RemoveFormatting size={14} className="mr-2" />
                        Format
                      </button>
                    </div>
                  </div>
                  <Editor
                    theme="vs-dark"
                    height="200px"
                    defaultLanguage="sql"
                    value={form.query}
                    onChange={(value) => updateForm({ query: value ?? '' })}
                    options={{
                      minimap: { enabled: false },
                      fontSize: 14,
                      wordWrap: 'on',
                      lineNumbers: 'on',
                      folding: true,
                      formatOnPaste: true,
                      formatOnType: true,
                      suggestOnTriggerCharacters: true,
                      tabSize: 2,
                      scrollBeyondLastLine: false,
                    }}
                    loading={isExecuting}
                  />
                  {!executionStatus?.success && <Alert variant="destructive">
                    <AlertDescription>{executionStatus.message}</AlertDescription>
                  </Alert>}
                </div>
              </TabsContent>

            <TabsContent value="table" className='min-h-[300px]'>
              <DataExplorer data={data ?? []}  />
            </TabsContent>

              <ChartTabContent setActivePanel={setActivePanel} eChartOptions={getEChartOptions()} form={form} />
            </Tabs>
          </div>
        </div>

        {/* Footer */}
        <div className="flex justify-end gap-2 mt-6">
          <button
            onClick={() => setIsOpen(false)}
            className="px-4 py-2 border rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            onClick={() => handlers.handleSave(page.id)}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center"
          >
            <SaveAll size={20} className="mr-2" />
            {isEditingWidget ? 'Update Widget' : 'Save Widget'}
          </button>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default WidgetEditorModal;


interface ChartTabContentProps {
  setActivePanel: (panel: 'connection' | 'chart') => void;
  eChartOptions: AntChartOptions;
  form: IWidget;
}
const ChartTabContent: React.FC<ChartTabContentProps> = ({ setActivePanel, eChartOptions, form }) => {
  const [isReady, setIsReady] = useState(false);
  const [options, setOptions] = useState<AntChartOptions>({});

  useEffect(() => {
    // Wait for next tick to ensure DOM is ready
    const timer = setTimeout(() => {
      setIsReady(true);
    }, 0);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    setOptions(eChartOptions);
  }, [eChartOptions]);

  return (
    <TabsContent value="chart" className="min-h-[300px]">
      <div className="relative h-full w-full">
        <button
          onClick={() => setActivePanel('chart')}
          className="absolute right-4 top-4 z-10 p-2 bg-white shadow rounded-lg flex items-center"
        >
          <Settings size={16} className="mr-2" />
          Configure Chart
        </button>
        {isReady && form?.type && (
          <ChartWrapper
            type={form.type}
            config={options}
            style={{
              minHeight: '300px',
              width: '70%'
            }}
          />
        )}
      </div>
    </TabsContent>
  );
};


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/AdvancedTab.tsx
================================================
import { IWidget } from "@/app/lib/drizzle/schemas";
import { TransformConfig } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { TabsContent } from "@/app/ui/components/tabs";


interface ChartConfigPanelProps {
    form: IWidget;
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
  }

export const AdvancedTab: React.FC<{
    config: TransformConfig;
    columns: ChartConfigPanelProps['columns'];
    updateConfig: (config: Partial<TransformConfig>) => void;
  }> = () => (
    <TabsContent value="advanced">
      <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
        <CardContent className="pt-6">
          {/* Add advanced options here */}
        </CardContent>
      </Card>
    </TabsContent>
  );
  


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/ChartConfigPanel.tsx
================================================
'use client';

import React, { useState, useCallback } from 'react';
import {
  Columns, BarChart,
  LineChart, Filter
} from 'lucide-react';
import { Tabs, TabsList, TabsTrigger } from '@/app/ui/components/tabs';
import {
  TransformConfig,
  AntChartOptions,
} from '@/app/types/data';
import { IChart, IWidget } from '@/app/lib/drizzle/schemas';
import { AdvancedTab } from './AdvancedTab';
import { ChartTypeTab } from './ChartTypeTab';
import { DataTab } from './DataTab';
import { FilteringTab } from './FilteringTab';
import { FormattingTab } from './FormattingTab';
import { SeriesTab } from './SeriesTab';


interface ChartConfigPanelProps {
  form: IWidget;
  columns: {
    all: string[];
    numeric: string[];
    nonNumeric: string[];
  };
  setForm: (update: IWidget) => void;
}

const ChartConfigPanel: React.FC<ChartConfigPanelProps> = ({ form, columns, setForm }) => {
  const [config, setConfig] = useState<TransformConfig>(form?.transformConfig);

  const updateConfig = useCallback((newConfig: Partial<TransformConfig>) => {
    const updatedConfig = { ...config, ...newConfig };
    setConfig(updatedConfig);
    setForm({ ...form, transformConfig: updatedConfig });
  }, [config, form, setForm]);

  const updateAntChartOptions = useCallback((updates: Partial<AntChartOptions>) => {
    const newConfig = { ...config };
    if (!newConfig.options) newConfig.options = {};
    newConfig.options = { ...newConfig.options, ...updates };
    updateConfig(newConfig);
  }, [config, updateConfig]);

  const onChartTypeChange = useCallback((updates: { type: IChart, transformConfig: TransformConfig }) => {
    const updatedConfig = { ...config, ...updates.transformConfig };
    setConfig(updatedConfig);
    setForm({ ...form, type: updates.type, transformConfig: updatedConfig });
  }, [ config, form, setForm ]);

  return (
    <Tabs defaultValue="chart">
      <TabsList className="w-full grid grid-cols-6 mb-1">
        <TabsTrigger value="chart">
          <BarChart className="w-4 h-4 mr-2" />
          Chart
        </TabsTrigger>
        <TabsTrigger value="data">
          <Columns className="w-4 h-4 mr-2" />
          Data
        </TabsTrigger>
        <TabsTrigger value="series">
          <LineChart className="w-4 h-4 mr-2" />
          Series
        </TabsTrigger>
        <TabsTrigger value="filtering">
          <Filter className="w-4 h-4 mr-2" />
          Filters
        </TabsTrigger>
        {/* <TabsTrigger value="formatting">
          <Settings className="w-4 h-4 mr-2" />
          Format
        </TabsTrigger>
        <TabsTrigger value="advanced">
          <Magnet className="w-4 h-4 mr-2" />
          Advanced
        </TabsTrigger> */}
      </TabsList>

      <ChartTypeTab
        form={form}
        config={config}
        onChartTypeChange={onChartTypeChange}
      />

      <DataTab
        config={config}
        columns={columns}
        updateConfig={updateConfig}
        updateAntChartOptions={updateAntChartOptions}
        chartType={form.type}
      />

      <SeriesTab
        config={config}
        columns={columns}
        updateAntChartOptions={updateAntChartOptions}
        updateConfig={updateConfig}
        chartType={form.type}
      />

      <FilteringTab
        config={config}
        columns={columns}
        updateConfig={updateConfig}
      />

      <FormattingTab
        config={config}
        columns={columns.all}
        updateConfig={updateConfig}
      />

      <AdvancedTab
        config={config}
        columns={columns}
        updateConfig={updateConfig}
      />
    </Tabs>
  );
};

export default ChartConfigPanel;



================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/ChartTypeTab.tsx
================================================
import { IChart, IWidget, chartTypes } from "@/app/lib/drizzle/schemas";
import { TransformConfig } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";
import { TabsContent } from "@/app/ui/components/tabs";

interface ChatTypeOptions {
    type: IChart,
    transformConfig: TransformConfig
}

export const ChartTypeTab: React.FC<{
    form: IWidget;
    onChartTypeChange: (updates: ChatTypeOptions) => void;
    config: TransformConfig;
  }> = ({ form, onChartTypeChange }) => {

    const onChangeChartType = (value: IChart) => {
      const transformConfig = {
        ...form.transformConfig,
        options: {
          ...form.transformConfig?.options
        }
      };
    
      // Converting from any type to pie
      if (value === 'pie') {
        transformConfig.options = {
          ...transformConfig.options,
          // Preserve existing pie fields if they exist
          colorField: transformConfig.options?.colorField || transformConfig.options?.xField,
          angleField: transformConfig.options?.angleField || transformConfig.options?.yField,
        }
        // Clean up non-pie fields
        delete transformConfig.options?.xField;
        delete transformConfig.options?.yField;
      }
      // Converting from pie to other charts (line, bar, column)
      if (['line', 'bar', 'column', 'scatter'].includes(value)) {
        transformConfig.options = {
          ...transformConfig.options,
          // Check if we're converting from pie chart
          xField: form.type === 'pie' ? transformConfig.options?.colorField : transformConfig.options?.xField,
          yField: form.type === 'pie' ? transformConfig.options?.angleField : transformConfig.options?.yField,
        }
        // Clean up pie fields
        delete transformConfig.options?.angleField;
      }
      
      if (value === 'dual-axes') {
        const xField = form.type === 'pie' ? transformConfig.options?.angleField : transformConfig.options?.xField
        transformConfig.options = {
          ...transformConfig.options,
          xField,
        }
        
        if(!transformConfig.options.children) {
          transformConfig.options.children = []
        }

        if(transformConfig.options.children.length < 2) {
          transformConfig.options.children = [
            {
              type: 'interval',
              yField: xField,
              colorField: null,
              style: {},
              axis: {}
            },
            {
              type: 'line',
              yField: xField,
              colorField: null,
              style: { stroke: '#5AD8A6', lineWidth: 2 },
              axis: { y: { position: 'right' } },
            }
          ]
        }
        delete transformConfig.options?.angleField;
        delete transformConfig.options?.yField;
      }

      onChartTypeChange({
        type: value as IChart,
        transformConfig
      });
    };

    return (
    <TabsContent value="chart">
      <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
        <CardContent className="pt-6">
          <div className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Chart Type</label>
              <Select
                value={form.type}
                onValueChange={(value: IChart) => onChangeChartType(value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select chart type" />
                </SelectTrigger>
                <SelectContent>
                  {chartTypes.map((value) => (
                    <SelectItem key={value} value={value}>{value}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>
    </TabsContent>
  );
 };


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/DataAxisMapping.tsx
================================================
import { IChart } from "@/app/lib/drizzle/schemas";
import { TransformConfig, AntChartOptions } from "@/app/types/data";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";

interface IColumns {
  all: string[];
  numeric: string[];
  nonNumeric: string[];
}

export const DataAxisMapping: React.FC<{
    chartType: IChart;
    config: TransformConfig;
    columns: IColumns;
    updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
  }> = ({ config, columns, updateAntChartOptions, chartType }) => (
    <div className="space-y-4">
      <div className="space-y-2">
        <label className="text-sm font-medium">X-Axis Field</label>
        <Select
          value={config.options?.xField}
          onValueChange={(value) => updateAntChartOptions({ xField: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select X-Axis field" />
          </SelectTrigger>
          <SelectContent>
            {(chartType === 'scatter' ? columns.numeric : columns.all).map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
  
      <div className="space-y-2">
        <label className="text-sm font-medium">Y-Axis Field</label>
        <Select
          value={config.options?.yField}
          onValueChange={(value) => updateAntChartOptions({ yField: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select Y-Axis field" />
          </SelectTrigger>
          <SelectContent>
            {columns.numeric.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-2">
          <label className="text-sm font-medium">Color Field</label>
          <Select
          value={config.options?.colorField}
          onValueChange={(value) => updateAntChartOptions({ colorField: value })}
          >
          <SelectTrigger>
              <SelectValue placeholder="Select color field" />
          </SelectTrigger>
          <SelectContent>
              {columns.all.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
              ))}
          </SelectContent>
          </Select>
      </div>

      {chartType === 'scatter' && (
        <div className="space-y-2">
          <label className="text-sm font-medium">Shape Field</label>
          <Select
            value={config.options?.shapeField}
            onValueChange={(value) => {
              updateAntChartOptions({ shapeField: value });
            }}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select field" />
            </SelectTrigger>
            <SelectContent>
              {columns.all.map(col => (
                <SelectItem key={col} value={col}>{col}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}
    </div>
  );


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/DataDualMapping.tsx
================================================
import { TransformConfig, AntChartOptions, IDualSeries } from "@/app/types/data";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";

interface ICoumns {
    all: string[];
    numeric: string[];
    nonNumeric: string[];
}

export const DataDualAxisMapping: React.FC<{
    config: TransformConfig;
    columns: ICoumns;
    updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
  }> = ({ config, columns, updateAntChartOptions }) => {
 
  const onUpdateChild = (index: number, updates: Partial<IDualSeries>) => {
    const children = [...config.options?.children || []];
    children[index] = { ...children[index], ...updates };
    updateAntChartOptions({ children });
  }

  return (
    <div className="space-y-4">
      <div className="space-y-2">
        <label className="text-sm font-medium">X-Axis Field</label>
        <Select
          value={config.options?.xField}
          onValueChange={(value) => updateAntChartOptions({ xField: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select X-Axis field" />
          </SelectTrigger>
          <SelectContent>
            {columns.all.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {config.options?.children?.map((child, index) => (
        <div key={index}>
          <pre>{child.yField}</pre>
          <div className="space-y-2">
            <label className="text-sm font-medium">{index == 0 ? 'Primary' : 'Secondary'} Axis</label>
            <Select
              value={child.yField}
              onValueChange={(value) => onUpdateChild(index, { yField: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select Y-Axis field" />
              </SelectTrigger>
              <SelectContent>
                {columns.all.map(col => (
                  <SelectItem key={col} value={col}>{col}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      ))}

    </div>
  )
};


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/DataPieMapping.tsx
================================================
import { IWidget } from "@/app/lib/drizzle/schemas";
import { TransformConfig, AntChartOptions } from "@/app/types/data";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";


interface ChartConfigPanelProps {
    form: IWidget;
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
}

export const DataPieMapping: React.FC<{
    config: TransformConfig;
    columns: ChartConfigPanelProps['columns'];
    updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
  }> = ({ config, columns, updateAntChartOptions }) => (
    <div className="space-y-4">
      <div className="space-y-2">
        <label className="text-sm font-medium">Labels Field ~ Color</label>
        <Select
          value={config.options?.colorField}
          onValueChange={(value) => updateAntChartOptions({ colorField: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select labels field" />
          </SelectTrigger>
          <SelectContent>
            {columns.all.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
  
      <div className="space-y-2">
        <label className="text-sm font-medium">Values Field ~ Angle</label>
        <Select
          value={config.options?.angleField}
          onValueChange={(value) => updateAntChartOptions({ angleField: value })}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select values field" />
          </SelectTrigger>
          <SelectContent>
            {columns.numeric.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
    </div>
  );
  


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/DataScatterMapping.tsx
================================================
import { IWidget } from "@/app/lib/drizzle/schemas";
import { TransformConfig, AntChartOptions } from "@/app/types/data";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";

interface ChartConfigPanelProps {
    form: IWidget;
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
  }

export const DataScatterMapping: React.FC<{
    config: TransformConfig;
    columns: ChartConfigPanelProps['columns'];
    updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
  }> = ({ config, columns, updateAntChartOptions }) => (
    <div className="space-y-4">
      <div className="space-y-2">
        <label className="text-sm font-medium">Shape Field</label>
        <Select
          value={config.options?.shapeField}
          onValueChange={(value) => {
            updateAntChartOptions({ shapeField: value });
          }}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select field" />
          </SelectTrigger>
          <SelectContent>
            {columns.numeric.map(col => (
              <SelectItem key={col} value={col}>{col}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
    </div>
  );


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/DataTab.tsx
================================================
import { IChart, IWidget } from "@/app/lib/drizzle/schemas";
import { TransformConfig, AggregationMethod, AntChartOptions } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";
import { Switch } from "@/app/ui/components/switch";
import { TabsContent } from "@/app/ui/components/tabs";
import { DataAxisMapping } from "./DataAxisMapping";
import { DataPieMapping } from "./DataPieMapping";
import { Separator } from "@/app/ui/components/separator";
import { DataDualAxisMapping } from "./DataDualMapping";

const AGG_METHODS: Array<{ value: AggregationMethod; label: string }> = [
    { value: 'sum', label: 'Sum' },
    { value: 'avg', label: 'Average' },
    { value: 'count', label: 'Count' },
    { value: 'min', label: 'Minimum' },
    { value: 'max', label: 'Maximum' },
    { value: 'median', label: 'Median' },
    { value: 'distinct', label: 'Distinct Count' }
  ];
  
interface ChartConfigPanelProps {
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
  }

export const DataTab: React.FC<{
    config: TransformConfig;
    columns: ChartConfigPanelProps['columns'];
    updateConfig: (config: Partial<TransformConfig>) => void;
    updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
    chartType: IChart;
  }> = ({ config, columns, updateConfig, updateAntChartOptions, chartType }) => {
    const isAxisChart = ['column', 'bar', 'line', 'scatter'].includes(chartType);
    const isPieChart = ['pie', 'donut'].includes(chartType);
  
    return (
      <TabsContent value="data" className="space-y-4">
        <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
          <CardContent className="pt-6 space-y-4">
            {/* Data Mapping Section */}
            {isAxisChart && (
              <>
                <DataAxisMapping
                  chartType={chartType}
                  config={config}
                  columns={columns}
                  updateAntChartOptions={updateAntChartOptions}
                />
                <Separator />
              </>
            )}
  
            {isPieChart && (
              <>
                <DataPieMapping
                  config={config}
                  columns={columns}
                  updateAntChartOptions={updateAntChartOptions}
                />
                <Separator />
              </>
            )}

            {chartType === 'dual-axes' && (
              <>
                <DataDualAxisMapping
                  config={config}
                  columns={columns}
                  updateAntChartOptions={updateAntChartOptions}
                />
                <Separator />
              </>
            )}
            
            {/* Aggregation Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium">Enable Aggregation</label>
                <span className="text-sx italic text-slate-400">For non SQL datasets</span>
                <Switch
                  checked={config.aggregation?.enabled ?? false}
                  onCheckedChange={(checked) => {
                    updateConfig({
                      aggregation: {
                        ...config.aggregation,
                        enabled: checked,
                        method: checked ? config.aggregation?.method || 'sum' : undefined,
                        groupBy: checked ? config.aggregation?.groupBy || [] : []
                      }
                    });
                  }}
                />
              </div>
  
              {config.aggregation?.enabled && (
                <>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Aggregation Method</label>
                    <Select
                      value={config.aggregation.method}
                      onValueChange={(method: AggregationMethod) => {
                        updateConfig({
                          aggregation: {
                            ...config.aggregation,
                            enabled: config.aggregation?.enabled ?? false,
                            method
                          }
                        });
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select method" />
                      </SelectTrigger>
                      <SelectContent>
                        {AGG_METHODS.map(({ value, label }) => (
                          <SelectItem key={value} value={value}>{label}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
  
                  <div className="space-y-2">
                    <label htmlFor='field-groups' className="text-sm font-medium">Group By Fields</label>
                    <select
                      id='field-groups'
                      multiple
                      className="w-full p-2 border rounded"
                      value={config.aggregation.groupBy || []}
                      onChange={(e) => {
                        const selected = Array.from(e.target.selectedOptions).map(opt => opt.value);
                        updateConfig({
                          aggregation: {
                            ...config.aggregation,
                            enabled: config.aggregation?.enabled ?? false,
                            groupBy: selected
                          }
                        });
                      }}
                    >
                      {columns.all.map(col => (
                        <option key={col} value={col}>{col}</option>
                      ))}
                    </select>
                  </div>
  
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium">Exclude Null Values</label>
                    <Switch
                      checked={config.aggregation?.excludeNull ?? true}
                      onCheckedChange={(checked) => {
                        updateConfig({
                          aggregation: {
                            ...config.aggregation,
                            enabled: config.aggregation?.enabled ?? false,
                            excludeNull: checked
                          }
                        });
                      }}
                    />
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </TabsContent>
    );
  };


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/FilterRow.tsx
================================================
import { IWidget } from "@/app/lib/drizzle/schemas";
import { Filters, FiltersOps } from "@/app/types/data";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";

const FILTER_OPERATORS: Array<{ value: FiltersOps; label: string }> = [
    { value: 'equals', label: 'Equals' },
    { value: 'notEquals', label: 'Not Equals' },
    { value: 'contains', label: 'Contains' },
    { value: 'notContains', label: 'Not Contains' },
    { value: 'startsWith', label: 'Starts With' },
    { value: 'endsWith', label: 'Ends With' },
    { value: 'gt', label: 'Greater Than' },
    { value: 'gte', label: 'Greater Than or Equal' },
    { value: 'lt', label: 'Less Than' },
    { value: 'lte', label: 'Less Than or Equal' },
    { value: 'between', label: 'Between' },
    { value: 'in', label: 'In List' },
    { value: 'notIn', label: 'Not In List' },
    { value: 'isNull', label: 'Is Null' },
    { value: 'isNotNull', label: 'Is Not Null' },
    { value: 'regex', label: 'Regex Match' }
  ];
  
interface ChartConfigPanelProps {
    form: IWidget;
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
  }
  
export const FilterRow: React.FC<{
    filter: Filters;
    index: number;
    columns: ChartConfigPanelProps['columns'];
    updateFilter: (index: number, updates: Partial<Filters>) => void;
    removeFilter: (index: number) => void;
  }> = ({ filter, index, columns, updateFilter, removeFilter }) => (
    <div className="flex items-center gap-4">
      <Select
        value={filter.column}
        onValueChange={(value) => updateFilter(index, { column: value })}
      >
        <SelectTrigger className="w-[200px]">
          <SelectValue placeholder="Select column" />
        </SelectTrigger>
        <SelectContent>
          {columns.all.map(col => (
            <SelectItem key={col} value={col}>{col}</SelectItem>
          ))}
        </SelectContent>
      </Select>
  
      <Select
        value={filter.operator}
        onValueChange={(value) => updateFilter(index, { operator: value as FiltersOps })}
      >
        <SelectTrigger className="w-[200px]">
          <SelectValue placeholder="Select operator" />
        </SelectTrigger>
        <SelectContent>
          {FILTER_OPERATORS.map(({ value, label }) => (
            <SelectItem key={value} value={value}>{label}</SelectItem>
          ))}
        </SelectContent>
      </Select>
  
      <input
        type="text"
        value={filter.value}
        onChange={(e) => updateFilter(index, { value: e.target.value })}
        className="flex-1 p-2 border rounded"
        placeholder="Value"
      />
  
      <button
        onClick={() => removeFilter(index)}
        className="p-2 text-destructive hover:text-destructive/90"
      >
        Remove
      </button>
    </div>
  );


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/FilteringTab.tsx
================================================
import { TransformConfig, Filters } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { TabsContent } from "@radix-ui/react-tabs";
import { FilterRow } from "./FilterRow";
import { IWidget } from "@/app/lib/drizzle/schemas";

interface ChartConfigPanelProps {
    form: IWidget;
    columns: {
      all: string[];
      numeric: string[];
      nonNumeric: string[];
    };
    setForm: (update: IWidget) => void;
  }

export const FilteringTab: React.FC<{
    config: TransformConfig;
    columns: ChartConfigPanelProps['columns'];
    updateConfig: (config: Partial<TransformConfig>) => void;
  }> = ({ config, columns, updateConfig }) => {
    const addFilter = () => {
      const newConfig = { ...config };
      if (!newConfig.filters) newConfig.filters = [];
      newConfig.filters.push({
        column: '',
        operator: 'equals',
        value: '',
        enabled: true
      });
      updateConfig(newConfig);
    };
  
    const updateFilter = (index: number, updates: Partial<Filters>) => {
      const newConfig = { ...config };
      if (!newConfig.filters) newConfig.filters = [];
      newConfig.filters[index] = { ...newConfig.filters[index], ...updates };
      updateConfig(newConfig);
    };
  
    const removeFilter = (index: number) => {
      const newConfig = { ...config };
      newConfig.filters = newConfig.filters?.filter((_, i) => i !== index);
      updateConfig(newConfig);
    };
  
    return (
      <TabsContent value="filtering" className="space-y-4">
        <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
          <CardContent className="pt-6 space-y-4">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-medium">Filters</h3>
              <button
                onClick={addFilter}
                className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90"
              >
                Add Filter
              </button>
            </div>
  
            {config.filters?.map((filter, index) => (
              <FilterRow
                key={index}
                filter={filter}
                index={index}
                columns={columns}
                updateFilter={updateFilter}
                removeFilter={removeFilter}
              />
            ))}
          </CardContent>
        </Card>
      </TabsContent>
    );
  };


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/FormattingTab.tsx
================================================
import { NumberFormatStyle, SortingOrder, TransformConfig } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";
import { Switch } from "@/app/ui/components/switch";
import { TabsContent } from "@/app/ui/components/tabs";

const NUMBER_FORMAT_STYLES: Array<{ value: NumberFormatStyle; label: string }> = [
    { value: 'decimal', label: 'Decimal' },
    { value: 'currency', label: 'Currency' },
    { value: 'percent', label: 'Percentage' },
    { value: 'unit', label: 'Unit' }
];
  
const SORT_ORDERS: Array<{ value: SortingOrder; label: string }> = [
    { value: 'asc', label: 'Ascending' },
    { value: 'desc', label: 'Descending' },
    { value: 'none', label: 'None' }
];

export const FormattingTab: React.FC<{
    config: TransformConfig;
    columns: string[];
    updateConfig: (config: Partial<TransformConfig>) => void;
  }> = ({ config, updateConfig, columns }) => (
    <TabsContent value="formatting">
      <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
        <CardContent className="pt-6 space-y-4">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Enable Number Formatting</label>
            <Switch
              checked={config.formatting?.enabled ?? false}
              onCheckedChange={(checked) => {
                updateConfig({
                  formatting: {
                    ...config.formatting,
                    enabled: checked,
                    numberFormat: checked ? config.formatting?.numberFormat || {
                      style: 'decimal',
                      minimumFractionDigits: 0,
                      maximumFractionDigits: 2,
                      locale: 'en-US'
                    } : undefined
                  }
                });
              }}
            />
          </div>
  
          {config.formatting?.enabled && (
            <>
              <div className="space-y-2">
                <label className="text-sm font-medium">Format Style</label>
                <Select
                  value={config.formatting.numberFormat?.style}
                  onValueChange={(style: NumberFormatStyle) => {
                    updateConfig({
                      formatting: {
                        ...config.formatting,
                        enabled: config.formatting?.enabled ?? false,
                        numberFormat: {
                          ...config?.formatting?.numberFormat,
                          style
                        }
                      }
                    });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select format style" />
                  </SelectTrigger>
                  <SelectContent>
                    {NUMBER_FORMAT_STYLES.map(({ value, label }) => (
                      <SelectItem key={value} value={value}>{label}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </>
          )}

        </CardContent>
      </Card>

      <Card className="shadow-sm rounded-sm mt-4 max-h-[650px] overflow-y-scroll">
        <CardContent className="pt-6 space-y-4">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium">Enable Sorting</label>
              <Switch
                checked={config.sorting?.enabled ?? false}
                onCheckedChange={(checked) => {
                  updateConfig({
                    sorting: {
                      ...config.sorting,
                      enabled: checked,
                      key: 'none',
                      order: 'none'
                    }
                  });
                }}
              />
          </div>
  
          {config.sorting?.enabled && (
            <>
              <div className="space-y-2">
                <label className="text-sm font-medium">Sort Key</label>
                <Select
                  value={config.sorting?.key}
                  onValueChange={(key: string) => {
                    updateConfig({
                      sorting: {
                        ...(config.sorting ?? { enabled: false, order: 'none' }),
                        key
                      }
                    });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select sort key" />
                  </SelectTrigger>
                  <SelectContent>
                    {columns.map((col, idx) => (
                      <SelectItem key={idx} value={col}>{col}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Sort Order</label>
                <Select
                  value={config.sorting?.order}
                  onValueChange={(order: SortingOrder) => {
                    updateConfig({
                      sorting: {
                        ...(config.sorting || { enabled: false, key: 'none' }),
                        order
                      }
                    });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select sort order" />
                  </SelectTrigger>
                  <SelectContent>
                    {SORT_ORDERS.map(({ value, label }) => (
                      <SelectItem key={value} value={value}>{label}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </TabsContent>
  );
  


================================================
File: app/dashboard/components/widgets/widget-editor/config-panel/SeriesTab.tsx
================================================
import { IChart, IWidget } from "@/app/lib/drizzle/schemas";
import { TransformConfig, AntChartOptions } from "@/app/types/data";
import { Card, CardContent } from "@/app/ui/components/card";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/app/ui/components/select";
import { Switch } from "@/app/ui/components/switch";
import { TabsContent } from "@/app/ui/components/tabs";

interface ChartConfigPanelProps {
  form: IWidget;
  columns: {
    all: string[];
    numeric: string[];
    nonNumeric: string[];
  };
  setForm: (update: IWidget) => void;
}

export const SeriesTab: React.FC<{
  config: TransformConfig;
  columns: ChartConfigPanelProps['columns'];
  updateAntChartOptions: (updates: Partial<AntChartOptions>) => void;
  updateConfig: (config: Partial<TransformConfig>) => void;
  chartType: IChart;
}> = ({ config, columns, updateAntChartOptions, updateConfig, chartType }) => {
  
  const LABEL_POSITIONS = [
    { value: 'inside', label: 'Inside' },
    { value: 'outside', label: 'Outside' },
    { value: 'top', label: 'Top' },
    { value: 'bottom', label: 'Bottom' }
  ];

  const SERIES_TYPES = [
    { value: 'bar', label: 'Bar' },
    { value: 'line', label: 'Line' },
    { value: 'area', label: 'Area' }
  ];

  return (
    <TabsContent value="options" className="space-y-4">
      <Card className="shadow-sm rounded-sm max-h-[650px] overflow-y-scroll">
        <CardContent className="pt-6 space-y-4">
          {/* {config.options?.map((options, index) => (
            
          ))} */}

          <button
            onClick={() => {
              const newConfig = { ...config };
              // if (!newConfig.options) newConfig.options = [];
              // const firstSeries = newConfig.options[0];
              // newConfig.options.push({
              //   categoryKey: firstSeries.categoryKey,
              //   type: 'line',
              //   visible: true,
              //   axis: 'primary',
              //   showLabel: false,
              //   labelPosition: 'top'
              // });
              updateConfig(newConfig);
            }}
            className="w-full p-2 border rounded hover:bg-gray-50"
          >
            Add Series
          </button>
        </CardContent>
      </Card>
    </TabsContent>
  );
};


================================================
File: app/dashboard/connections/page.tsx
================================================
'use client';
import { useConnections } from './hooks/useConnection';
import { ConnectionDialog } from './components/ConnectionDialog';
import { useEffect } from 'react';
import { useConnectionStore } from '@/app/store/connections';
import { ConnectionManager } from './components/ConnectionManager';
import { useAuth } from '@clerk/nextjs'

export default function ConnectionsPage() {
  const { userId } = useAuth()
  const { connections, fetchConnections } = useConnectionStore();
  const {
    isDialogOpen,
    setIsDialogOpen,
    editingConnection,
    testStatus,
    isTesting,
    forms,
    setForms,
    handlers,
    loading
  } = useConnections();

  useEffect(() => {
    if(!userId){
      console.log('No user id found, cant fetch connections');
      return;
    }
    fetchConnections(userId);
  }, [fetchConnections, userId]);

  return (
    <div className="p-6 space-y-6">
     <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Connections</h1>
          <p className="text-gray-500">Configure and manage your data sources</p>
        </div>
      </div>

      <ConnectionDialog 
        isOpen={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        editingConnection={editingConnection}
        onSave={handlers.handleSave}
        onTest={handlers.handleTest}
        forms={forms}
        setForms={setForms}
        testStatus={testStatus}
        isTesting={isTesting}
        loading={loading}
      />

      <ConnectionManager 
        connections={connections}
        onEdit={handlers.handleEdit}
        onDelete={handlers.handleDelete}
        setIsDialogOpen={setIsDialogOpen}
      />
    </div>
  );
}


================================================
File: app/dashboard/connections/components/ConnectionDialog.tsx
================================================
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription  } from '@/app/ui/components/dialog';

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/app/ui/components/tabs';
import { Button } from '@/app/ui/components/button';
import { Alert, AlertDescription } from '@/app/ui/components/alert';
import { SQLForm } from './connection-forms';
import { Database, TestTube, Save } from 'lucide-react';
import { useState } from 'react';
import { ConnectionType, SQLConnection } from '@/app/types/datasource';
import { IConnection } from '@/app/lib/drizzle/schemas';


interface ConnectionDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    editingConnection?: IConnection;
    onSave: (type: ConnectionType) => void;
    onTest: (type: ConnectionType) => void;
    forms: {
      csv: any;
      sql: SQLConnection;
      rest: any;
    };
    setForms: {
      setCsvForm: (form: IConnection) => void;
      setSqlForm: (form: SQLConnection) => void;
      setRestForm: (form: IConnection) => void;
    };
    testStatus: { success: boolean; message: string };
    isTesting: boolean;
    loading: boolean;
  }
  
  export function ConnectionDialog({
    isOpen,
    onOpenChange,
    editingConnection,
    onSave,
    onTest,
    forms,
    setForms,
    testStatus, 
    isTesting,
    loading
  }: ConnectionDialogProps) {
    const [activeTab, setActiveTab] = useState<IConnection['type']>(editingConnection?.type || 'sql');
    const isDisabled = isTesting || !testStatus.success || loading;

    return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-2xl">
            <DialogHeader>
                <DialogTitle>
                {editingConnection ? 'Edit Connection' : 'Add New Connection'}
                </DialogTitle>
            </DialogHeader>
            <DialogDescription>
                Manage Connections
            </DialogDescription>
            
            <Tabs defaultValue={activeTab} onValueChange={(v) => setActiveTab(v as ConnectionType)} className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                    {/* <TabsTrigger value="csv" className="flex items-center gap-2">
                        <FileSpreadsheet size={16} />
                        CSV
                    </TabsTrigger> */}
                    <TabsTrigger value="sql" className="flex items-center gap-2">
                        <Database size={16} />
                        SQL
                    </TabsTrigger>
                    {/* <TabsTrigger value="rest" className="flex items-center gap-2">
                        <Globe size={16} />
                        REST
                    </TabsTrigger> */}
                </TabsList>

                {/* <TabsContent value="csv" className="space-y-4">
                    <CSVForm form={forms.csv} setForm={setForms.setCsvForm} />
                </TabsContent> */}

                <TabsContent value="sql" className="space-y-4">
                    <SQLForm form={forms.sql} setForm={setForms.setSqlForm} />
                </TabsContent>

                {/* <TabsContent value="rest" className="space-y-4">
                    <RESTForm form={forms.rest} setForm={setForms.setRestForm} />
                </TabsContent> */}
            </Tabs>

            {isTesting ? (
                <Alert>
                    <AlertDescription>Testing connection...</AlertDescription>
                </Alert>
            ) : (<>
                {testStatus.success ? (
                    <Alert>
                        <AlertDescription>{testStatus.message}</AlertDescription>
                    </Alert>
                ) : (
                    <Alert variant='destructive'>
                        <AlertDescription>{testStatus.message}</AlertDescription>
                    </Alert>
                )}
            </>)}
    
            <div className="flex justify-end gap-2 mt-4">
                <Button 
                variant="outline" 
                onClick={() => {
                    onOpenChange(false);
                    // setEditingConnection(null);
                    // resetForms();
                }}
                >
                Cancel
                </Button>

                <Button 
                variant="outline" 
                className="flex items-center gap-2"
                onClick={() => onTest(activeTab)}
                >
                    <TestTube size={16} />
                    Test Connection
                </Button>

                <Button 
                className="flex items-center gap-2"
                onClick={() => onSave(activeTab)}
                disabled={isDisabled}
                >
                    <Save size={16} />
                    {editingConnection ? 'Update' : 'Save'} Connection
                </Button>
            </div>
        </DialogContent>
    </Dialog>
    );
  }


================================================
File: app/dashboard/connections/components/ConnectionManager.tsx
================================================
import { Button } from '@/app/ui/components/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/app/ui/components/alert-dialog"
import { Input } from '@/app/ui/components/input';
import { FileSpreadsheet, Database, Globe, Edit2, Trash2, Plus } from 'lucide-react';
import { IConnection } from '@/app/lib/drizzle/schemas';

interface ConnectionManagerProps {
    connections: IConnection[];
    onEdit: (connection: IConnection) => void;
    onDelete: (id: string) => void;
    setIsDialogOpen: (open: boolean) => void;
  }
  
  export function ConnectionManager({ connections, onEdit, onDelete, setIsDialogOpen }: ConnectionManagerProps) {
    return (<>
      <div className="bg-white rounded-lg border shadow-sm">
        <div className="p-4 flex justify-between items-center">
          <Input
            placeholder="Search connections..."
            className="max-w-sm"
          />
          {connections.length > 0 && (<Button
              onClick={() => setIsDialogOpen(true)}
              className="flex items-center gap-2"
            >
              <Plus size={16} />
              Add Connection
            </Button>)}
        </div>
        <div className="border-t">
          {connections.length === 0 ? (
            <div className="p-8 text-center">
              <div className="mx-auto mb-4 w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center">
                <Database className="h-6 w-6 text-gray-400" />
              </div>
              <h3 className="text-sm font-medium text-gray-900">No connections</h3>
              <p className="mt-1 text-sm text-gray-500">
                Get started by creating a new connection.
              </p>
              <div className="mt-6">
                <Button
                  onClick={() => setIsDialogOpen(true)}
                  className="flex items-center gap-2"
                >
                  <Plus size={16} />
                  Add Connection
                </Button>
              </div>
            </div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Type
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Updated
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {connections.map((connection) => (
                  <tr key={connection.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {connection.type === 'csv' && <FileSpreadsheet size={16} className="mr-2" />}
                        {connection.type === 'sql' && <Database size={16} className="mr-2" />}
                        {connection.type === 'rest' && <Globe size={16} className="mr-2" />}
                        {connection.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        {connection.type.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Active
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(connection.updatedAt!).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => onEdit(connection)}
                          className="flex items-center gap-1"
                        >
                          <Edit2 size={14} />
                          Edit
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button 
                            variant="outline" 
                            size="sm" 
                            className="flex items-center gap-1 text-red-600 hover:text-red-700">
                              <Trash2 size={14} /> Delete
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                              <AlertDialogDescription>
                                This action cannot be undone. This will permanently delete this connection from our servers.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction onClick={() => onDelete(connection.id!)}>Continue</AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
     </>);
  }


================================================
File: app/dashboard/connections/components/connection-forms/CSVForm.tsx
================================================
import { IConnection } from "@/app/lib/drizzle/schemas";
import { Input } from "@/app/ui/components/input";
import { Label } from "@/app/ui/components/label";

interface CSVFormProps {
  form: IConnection;
  setForm: (form: IConnection) => void;
}

export function CSVForm({ form, setForm }: CSVFormProps) {
  return (
    <div className="space-y-4">
        <div>
            <Label>Connection Name</Label>
            <Input 
                value={form.name}
                onChange={(e) => setForm({...form, name: e.target.value})}
                placeholder="My CSV Connection"
            />
        </div>
        <div className="space-y-4">
        <div>
            <Label>File Upload</Label>
            <Input type="file" accept=".csv,.xlsx,.xls" />
        </div>
        <div>
            <Label>Refresh Interval (ms)</Label>
            {/* <Input 
                type="number"
                value={form.refreshInterval}
                onChange={(e) => setForm({...form, refreshInterval: parseInt(e.target.value)})}
            /> */}
            </div>
        </div>
    </div>
  );
}


================================================
File: app/dashboard/connections/components/connection-forms/RESTForm.tsx
================================================
import { Input } from '@/app/ui/components/input';
import { Label } from '@/app/ui/components/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/app/ui/components/select';


export function RESTForm({ form, setForm }: { form: any; setForm: (form: any) => void }) {
    return (
        <div className="space-y-4">
            <div>
            <Label>Connection Name</Label>
            <Input 
                value={form.name}
                onChange={(e) => setForm({...form, name: e.target.value})}
                placeholder="My REST API Connection"
            />
            </div>
            <div>
            <Label>Endpoint URL</Label>
            <Input 
                value={form.endpoint}
                onChange={(e) => setForm({...form, endpoint: e.target.value})}
                placeholder="https://api.example.com/data"
            />
            </div>
            <div>
            <Label>Method</Label>
            <Select 
                value={form.method}
                onValueChange={(value) => setForm({...form, method: value})}
            >
                <SelectTrigger>
                <SelectValue placeholder="Select method" />
                </SelectTrigger>
                <SelectContent>
                <SelectItem value="GET">GET</SelectItem>
                <SelectItem value="POST">POST</SelectItem>
                </SelectContent>
            </Select>
            </div>
            <div>
            <Label>Headers</Label>
            <textarea 
                className="w-full min-h-[100px] rounded-md border border-gray-300 p-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={JSON.stringify(form.headers, null, 2)}
                onChange={(e) => {
                try {
                    const headers = JSON.parse(e.target.value);
                    setForm({...form, headers});
                } catch (error) {
                    console.log(error);
                }
                }}
                placeholder={'{\n  "Authorization": "Bearer token",\n  "Content-Type": "application/json"\n}'}
            />
            <p className="text-sm text-gray-500 mt-1">
                Enter headers as JSON object
            </p>
            </div>
            <div>
            <Label>Request Body (for POST)</Label>
            <textarea 
                className="w-full min-h-[100px] rounded-md border border-gray-300 p-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={JSON.stringify(form.body, null, 2)}
                onChange={(e) => {
                try {
                    const body = JSON.parse(e.target.value);
                    setForm({...form, body});
                } catch (error) {
                    console.log(error);
                }
                }}
                placeholder={'{\n  "key": "value"\n}'}
                disabled={form.method !== 'POST'}
            />
            <p className="text-sm text-gray-500 mt-1">
                Enter request body as JSON object (only for POST requests)
            </p>
            </div>
            <div>
            <Label>Data Path (JSONPath)</Label>
            <Input 
                value={form.dataPath}
                onChange={(e) => setForm({...form, dataPath: e.target.value})}
                placeholder="$.data.items"
            />
            <p className="text-sm text-gray-500 mt-1">
                JSONPath expression to extract data from response
            </p>
            </div>
            <div>
            <Label>Refresh Interval (ms)</Label>
            <Input 
                type="number"
                value={form.refreshInterval}
                onChange={(e) => setForm({...form, refreshInterval: parseInt(e.target.value)})}
                placeholder="5000"
            />
            <p className="text-sm text-gray-500 mt-1">
                How often to refresh the data. Use 0 for manual refresh only.
            </p>
            </div>
        </div>
    );
  }


================================================
File: app/dashboard/connections/components/connection-forms/SQLForm.tsx
================================================
import { useState } from "react";
import { Input } from "@/app/ui/components/input";
import { Label } from "@/app/ui/components/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/app/ui/components/select";
import { Switch } from "@/app/ui/components/switch";
import { SQLConnection, SQLDriver } from "@/app/types/datasource";

interface SQLFormProps {
  form: SQLConnection;
  setForm: (form: SQLConnection) => void;
}

export function SQLForm({ form, setForm }: SQLFormProps) {
  const [advanced, setAdvanced] = useState(false);

  const updateForm = (update: Partial<SQLConnection>) => {
    setForm({...form,...update, config: {...form.config, ...update.config}});
  };

  const drivers: SQLDriver[] = ['postgresql', 'mysql', 'mssql', 'oracle', 'sqlite', 'snowflake'];
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label>Connection Name</Label>
          <Input 
            value={form.name || ''}
            onChange={(e) => updateForm({ name: e.target.value })}
            placeholder="My SQL Connection"
          />
        </div>

        <div>
          <Label>Driver</Label>
          <Select 
          value={form.config.driver} 
          onValueChange={(value: SQLDriver) => updateForm({config:{driver: value}})}>
            <SelectTrigger>
              <SelectValue placeholder="Select database type" />
            </SelectTrigger>
            <SelectContent>
              {drivers.map(driver => (
                <SelectItem key={driver} value={driver}>
                  {driver.toUpperCase()}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {form.config.driver !== 'sqlite' && (
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label>Host</Label>
            <Input 
              value={form.config.host || ''}
              onChange={(e) => updateForm({config:{host: e.target.value}})} 
              placeholder="localhost"
            />
          </div>

          <div>
            <Label>Port</Label>
            <Input 
              type="number"
              value={form.config.port || ''}
              onChange={(e) => updateForm({config:{port: parseInt(e.target.value)}})} 
              placeholder="5432"
            />
          </div>

          <div>
            <Label>Username</Label>
            <Input 
              value={form.config.user || ''}
              onChange={(e) => updateForm({config:{user: e.target.value}})} 
            />
          </div>

          <div>
            <Label>Password</Label>
            <Input 
              type="password"
              value={form.config.password || ''}
              onChange={(e) => updateForm({config:{password: e.target.value}})} 
            />
          </div>
        </div>
      )}

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label>Database</Label>
          <Input 
            value={form.config.database || ''}
            onChange={(e) => updateForm({config:{database: e.target.value}})} 
          />
        </div>

        {form.config.driver === 'sqlite' && (
          <div>
            <Label>File Path</Label>
            <Input 
              value={form.config.filePath || ''}
              onChange={(e) => updateForm({config:{filePath: e.target.value}})} 
              placeholder="/path/to/database.db"
            />
          </div>
        )}

        <div className="col-span-2">
          <div className="flex items-center space-x-2">
            <Switch
              checked={advanced}
              onCheckedChange={setAdvanced}
            />
            <Label>Show Advanced Options</Label>
          </div>
        </div>
      </div>

      {advanced && (
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label>Timeout (seconds)</Label>
            <Input 
              type="number"
              value={form.config.timeout || ''}
              onChange={(e) => updateForm({config:{timeout: parseInt(e.target.value)}})} 
            />
          </div>

          <div className="flex items-center space-x-2 mt-8">
            <Switch
              checked={form.config.ssl || false}
              onCheckedChange={(checked) => updateForm({config:{ssl: checked}})} 
            />
            <Label>SSL</Label>
          </div>

          {form.config.driver === 'oracle' && (
            <>
              <div>
                <Label>Service Name</Label>
                <Input 
                  value={form.config.serviceName || ''}
                  onChange={(e) => updateForm({config:{serviceName: e.target.value}})} 
                />
              </div>
              <div>
                <Label>SID</Label>
                <Input 
                  value={form.config.sid || ''}
                  onChange={(e) => updateForm({config:{sid: e.target.value}})} 
                />
              </div>
            </>
          )}

          {form.config.driver === 'snowflake' && (
            <>
              <div>
                <Label>Warehouse</Label>
                <Input 
                  value={form.config.warehouse || ''}
                  onChange={(e) => updateForm({config:{warehouse: e.target.value}})} 
                />
              </div>
              <div>
                <Label>Role</Label>
                <Input 
                  value={form.config.role || ''}
                  onChange={(e) => updateForm({config:{role: e.target.value}})} 
                />
              </div>
              <div>
                <Label>Account</Label>
                <Input 
                  value={form.config.account || ''}
                  onChange={(e) => updateForm({config:{account: e.target.value}})} 
                />
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
}



================================================
File: app/dashboard/connections/components/connection-forms/index.ts
================================================
export * from './CSVForm';
export * from './SQLForm';
export * from './RESTForm';


================================================
File: app/dashboard/connections/hooks/useConnection.ts
================================================
import { IConnection } from '@/app/lib/drizzle/schemas';
import { useConnectionStore } from '@/app/store/connections';
import { SQLConnection, ConnectionType } from '@/app/types/datasource';
import { useAuth } from '@clerk/nextjs'
import { useState } from 'react';

export function useConnections() {
    const { userId } = useAuth()
    const { loading, addConnection, updateConnection, deleteConnection } = useConnectionStore();
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [editingConnection, setEditingConnection] = useState<IConnection>();
    const [isTesting, setIsTesting] = useState(false);
    const [testStatus, setTestStatus] = useState({ success: false, message: '' });
  
    // Form states
    const [csvForm, setCsvForm] = useState({});
    const [sqlForm, setSqlForm] = useState<SQLConnection>({config: {}} as SQLConnection);
    const [restForm, setRestForm] = useState({});
  
    // All your handlers
    const handleSave = async (connectionType: ConnectionType) => {
      if(!userId) {
        alert('You must be logged in to save a connection');
        return;
      };
      switch (connectionType) {
        case 'sql':
          if (editingConnection) {
            await updateConnection(editingConnection.id!, {
              ...sqlForm, 
              type: connectionType,
              userId: userId
            } as IConnection);
          } else {
            await addConnection({
              ...sqlForm, 
              type: connectionType,
              userId: userId,
            });
          }
          break;
        default:
          break;
      }
      setIsDialogOpen(false);
    };

    const handleTest = async (connectionType: ConnectionType) => { 
      setIsTesting(true)
      switch (connectionType) {
        case 'sql':
          const response = await fetch("/api/connections/test", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(sqlForm.config),
          })
          const result = await response.json();
          setTestStatus(result);
          break;
        default:
          break;
      }
      setIsTesting(false);
    };

    const handleEdit = (connection: IConnection) => { 
      setEditingConnection(connection);
      switch (connection.type) {
        case 'sql':
          setSqlForm(connection as SQLConnection);
          break;
        default:
          break;
      }
      setIsDialogOpen(true);
    };

    const handleDelete = async (id: string) => { 
      await deleteConnection(id);
    };
  
    return {
      isDialogOpen,
      setIsDialogOpen,
      editingConnection,
      testStatus,
      isTesting,
      loading,
      forms: { csv: csvForm, sql: sqlForm, rest: restForm },
      setForms: { setCsvForm, setSqlForm, setRestForm },
      handlers: { handleSave, handleTest, handleEdit, handleDelete },
    };
  }


================================================
File: app/dashboard/datasets/page.tsx
================================================
'use client';
import { useDatasets } from './hooks/useDataset';
import { DatasetDialog } from './components/DatasetDialog';
import { useEffect } from 'react';
import { useDatasetStore } from '@/app/store/datasets';
import { DatasetManager } from './components/DatasetManager';
import { useAuth } from '@clerk/nextjs'

export default function DatasetsPage() {
  const { userId } = useAuth()
  const { datasets, fetchDatasets } = useDatasetStore();
  const {
    isDialogOpen,
    setIsDialogOpen,
    editingDataset,
    form,
    setForm,
    handlers,
  } = useDatasets();

  useEffect(() => {
    if(!userId){
      console.log('No user id found, cant fetch datasets');
      return;
    }
    fetchDatasets(userId);
  }, [fetchDatasets, userId]);

  return (
    <div className="p-6 space-y-6">
     <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Datasets</h1>
          <p className="text-gray-500">Configure and manage your data sources</p>
        </div>
      </div>

      <DatasetDialog 
        isOpen={isDialogOpen}
        onOpenChange={setIsDialogOpen}
        editingDataset={editingDataset}
        onSave={handlers.handleSave}
        form={form}
        setForm={setForm}
      />

      <DatasetManager 
        datasets={datasets}
        onEdit={handlers.handleEdit}
        onDelete={handlers.handleDelete}
        setIsDialogOpen={setIsDialogOpen}
      />
    </div>
  );
}


================================================
File: app/dashboard/datasets/components/DatasetDialog.tsx
================================================
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription  } from '@/app/ui/components/dialog';

import { Button } from '@/app/ui/components/button';
import { DatasetForm } from './DatasetForm';
import { Save } from 'lucide-react';
import { IDataset } from '@/app/lib/drizzle/schemas';


interface DatasetDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    editingDataset: IDataset | null;
    onSave: () => void;
    form: IDataset;
    setForm: (form: IDataset) => void;
  }
  
  export function DatasetDialog({
    isOpen,
    onOpenChange,
    editingDataset,
    onSave,
    form,
    setForm,
  }: DatasetDialogProps) {

    return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-2xl">
            <DialogHeader>
                <DialogTitle>
                {editingDataset ? 'Edit Dataset' : 'Add New Dataset'}
                </DialogTitle>
            </DialogHeader>
            <DialogDescription>
                Manage Datasets
            </DialogDescription>
            
            <DatasetForm form={form} setForm={setForm} />

            <div className="flex justify-end gap-2 mt-4">
                <Button 
                variant="outline" 
                onClick={() => {
                    onOpenChange(false);
                    // setEditingDataset(null);
                    // resetForms();
                }}
                >
                Cancel
                </Button>

                <Button 
                className="flex items-center gap-2"
                onClick={() => onSave()}
                >
                    <Save size={16} />
                    {editingDataset ? 'Update' : 'Save'} Dataset
                </Button>
            </div>
        </DialogContent>
    </Dialog>
    );
  }


================================================
File: app/dashboard/datasets/components/DatasetForm.tsx
================================================
import { useCallback, useEffect, useState } from "react";
import { Input } from "@/app/ui/components/input";
import { Label } from "@/app/ui/components/label";
import { Badge } from "@/app/ui/components/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/app/ui/components/select";
import { SchemaInfo } from "@/app/types/datasource";
import { useConnectionStore } from "@/app/store/connections";
import { Button } from "@/app/ui/components/button";
import { Alert, AlertDescription } from "@/app/ui/components/alert";
import { Loader } from "lucide-react";
import { IConnection, IDataset } from "@/app/lib/drizzle/schemas";
import { useAuth } from "@clerk/nextjs";

interface DatasetFormProps {
  form: IDataset;
  setForm: (form: IDataset) => void;
}

export function DatasetForm({ form, setForm }: DatasetFormProps) {
  const { userId } = useAuth();
  const { connections, fetchConnections } = useConnectionStore();
  const [connection, setConnection] = useState<IConnection | null>(null);
  const [fetchingSchemas, setFetchingSchemas] = useState(false);
  const [schemaInfo, setSchemaInfo] = useState<SchemaInfo | null>(null);

  const fetchSQLConnectionSchemas = useCallback(async (conn?: IConnection) => {
    const theConnection = conn || connection;
    setFetchingSchemas(true);
    if (!theConnection?.config) {
      return;
    }
    try {
      const response = await fetch('/api/connections/schemas', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(theConnection?.config)
      });
      const results = await response.json();
      setSchemaInfo(results);
    } catch (error) {
      console.error('Error fetching schemas:', error);
      setSchemaInfo(null);
    }
    setFetchingSchemas(false);
  }, [connection]);

  // get user connections
  useEffect(() => {
    if (connections.length === 0 && userId) {
      fetchConnections(userId);
    }
  }, [userId, connections, fetchConnections]);

  // form data if editing dataset
  useEffect(() => {
    if(form.connectionId){
      const conn = connections.find(c => c.id === form.connectionId);
      if (conn) {
        setConnection(conn);
        Promise.resolve(fetchSQLConnectionSchemas(conn));
      }
    }
  }, [connections, fetchSQLConnectionSchemas, form]);

  const getTableColumns = (table: string) => {
    return schemaInfo?.[form.schema!]?.[table] || [];
  }

  const updateForm = (update: Partial<IDataset>) => {
    setForm({ ...form, ...update });
  };

  const onConnectionSelect = async (connectionId: string) => {
    updateForm({ connectionId });
    const conn = connections.find(c => c.id === connectionId);
    if (conn) {
      setConnection(conn);
      setSchemaInfo(null);
      updateForm({ type: conn.type, connectionId: conn.id })
      await fetchSQLConnectionSchemas(conn);
    } else {
      setConnection(null);
    }
  };

  // Get available schemas from schemaInfo
  const availableSchemas = schemaInfo ? Object.keys(schemaInfo) : [];
  
  // Get available tables from selected schema
  const availableTables = form.schema && schemaInfo 
    ? Object.keys(schemaInfo[form.schema] || {})
    : [];

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-5 gap-4 place-items-center">
        <div className="col-span-2">
          <Label>Dataset Name</Label>
          <Input 
            value={form.name || ''}
            onChange={(e) => updateForm({ name: e.target.value })}
            placeholder="My Dataset Name"
          />
        </div>

        <div className="col-span-2">
          <Label>Connection</Label>
          <Select 
            value={form.connectionId} 
            onValueChange={onConnectionSelect}>
            <SelectTrigger>
              <SelectValue placeholder="Select dataset connection" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="none">None</SelectItem>
              {connections.map(conn => (
                <SelectItem key={conn.id} value={conn.id!}>{conn.name}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="col-span-1">
        {connection?.type === 'sql' &&(<Button 
            variant="outline" 
            className="mt-5 flex items-center gap-2"
            onClick={() => fetchSQLConnectionSchemas()}
          > Fetch <Loader size={16} />
          </Button>)}
        </div>
      </div>

      {connection?.type === 'sql' && (
        <>
          <div className="grid grid-cols-2 gap-4">
            {fetchingSchemas && <p>Fetching schemas...</p>}
            {(!fetchingSchemas && !schemaInfo) && (
              <Alert variant="destructive">
                <AlertDescription>Failed to get schema Information</AlertDescription>
              </Alert>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>Schema</Label>
              <Select 
                value={form.schema}
                onValueChange={(schema) => updateForm({ schema, table: undefined })}>
                <SelectTrigger>
                  <SelectValue placeholder="Select schema" />
                </SelectTrigger>
                <SelectContent>
                  {availableSchemas.map(schema => (
                    <SelectItem key={schema} value={schema}>{schema}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label>Table</Label>
              <Select 
                value={form.table}
                onValueChange={(table) => {
                  updateForm({ table, columns: getTableColumns(table) });
                }}
                disabled={!form.schema}>
                <SelectTrigger>
                  <SelectValue placeholder="Select table" />
                </SelectTrigger>
                <SelectContent>
                  {availableTables.map(table => (
                    <SelectItem key={table} value={table}>{table}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {form.table && <div>
            <Label>Available Columns</Label>
            <div className="mt-2 border rounded-lg">
              <div className="max-h-[150px] overflow-y-auto">
                <table className="w-full">
                  <thead className="bg-muted sticky top-0">
                    <tr>
                      <th className="text-left p-2 text-sm font-medium">Column</th>
                      <th className="text-left p-2 text-sm font-medium">Type</th>
                    </tr>
                  </thead>
                  <tbody>
                    {form?.columns?.map((col, idx) => (
                      <tr key={idx} className="border-t">
                        <td className="p-2 text-sm">{col.column}</td>
                        <td className="p-2">
                          <Badge variant="secondary" className="text-xs font-mono">
                            {col.type}
                          </Badge>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>}
        </>
      )}
    </div>
  );
}


================================================
File: app/dashboard/datasets/components/DatasetManager.tsx
================================================
import { Button } from '@/app/ui/components/button';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/app/ui/components/alert-dialog"
import { Input } from '@/app/ui/components/input';
import { FileSpreadsheet, Database, Globe, Edit2, Trash2, Plus } from 'lucide-react';
import { IDataset } from '@/app/lib/drizzle/schemas';

interface DatasetManagerProps {
    datasets: IDataset[];
    onEdit: (dataset: IDataset) => void;
    onDelete: (id: string) => void;
    setIsDialogOpen: (open: boolean) => void;
  }
  
  export function DatasetManager({ datasets, onEdit, onDelete, setIsDialogOpen }: DatasetManagerProps) {
    return (<>
      <div className="bg-white rounded-lg border shadow-sm">
        <div className="p-4 flex justify-between items-center">
          <Input
            placeholder="Search datasets..."
            className="max-w-sm"
          />
          {datasets.length > 0 && (<Button
              onClick={() => setIsDialogOpen(true)}
              className="flex items-center gap-2"
            >
              <Plus size={16} />
              Add Dataset
            </Button>)}
        </div>
        <div className="border-t">
          {datasets.length === 0 ? (
            <div className="p-8 text-center">
              <div className="mx-auto mb-4 w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center">
                <Database className="h-6 w-6 text-gray-400" />
              </div>
              <h3 className="text-sm font-medium text-gray-900">No datasets</h3>
              <p className="mt-1 text-sm text-gray-500">
                Get started by creating a new dataset.
              </p>
              <div className="mt-6">
                <Button
                  onClick={() => setIsDialogOpen(true)}
                  className="flex items-center gap-2"
                >
                  <Plus size={16} />
                  Add Dataset
                </Button>
              </div>
            </div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Type
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Updated
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {datasets.map((dataset) => (
                  <tr key={dataset.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {dataset.type === 'csv' && <FileSpreadsheet size={16} className="mr-2" />}
                        {dataset.type === 'sql' && <Database size={16} className="mr-2" />}
                        {dataset.type === 'rest' && <Globe size={16} className="mr-2" />}
                        {dataset.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        {dataset.type.toUpperCase()}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Active
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(dataset.updatedAt!).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => onEdit(dataset)}
                          className="flex items-center gap-1"
                        >
                          <Edit2 size={14} />
                          Edit
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button 
                            variant="outline" 
                            size="sm" 
                            className="flex items-center gap-1 text-red-600 hover:text-red-700">
                              <Trash2 size={14} /> Delete
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                              <AlertDialogDescription>
                                This action cannot be undone. This will permanently delete this dataset from our servers.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction onClick={() => onDelete(dataset.id!)}>Continue</AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
     </>);
  }


================================================
File: app/dashboard/datasets/hooks/useDataset.ts
================================================
import { IDataset } from '@/app/lib/drizzle/schemas';
import { useDatasetStore } from '@/app/store/datasets';
import { useAuth } from '@clerk/nextjs'
import { useState } from 'react';

export function useDatasets() {
    const { userId } = useAuth()
    const { loading, addDataset, updateDataset, deleteDataset } = useDatasetStore();
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [editingDataset, setEditingDataset] = useState<IDataset | null>(null);
  
    const [datasetForm, setDatasetForm] = useState<IDataset>({} as IDataset);
  
    const handleSave = async () => {
      if(!userId) {
        alert('You must be logged in to save a dataset');
        return;
      };
      
      if (editingDataset) {
        await updateDataset(editingDataset.id!, {
          ...datasetForm, 
          userId: userId
        });
      } else {
        await addDataset({
          ...datasetForm, 
          userId: userId,
        });
      }
      setIsDialogOpen(false);
      // Reset forms
      setDatasetForm({} as IDataset);
      setEditingDataset({} as IDataset);
    }

    const handleEdit = (dataset: IDataset) => { 
      setEditingDataset(dataset);
      setDatasetForm(dataset);
      setIsDialogOpen(true);
    };

    const handleDelete = async (id: string) => { 
      await deleteDataset(id);
    };
  
    return {
      isDialogOpen,
      setIsDialogOpen,
      editingDataset,
      loading,
      form: datasetForm,
      setForm: setDatasetForm,
      handlers: { handleSave, handleEdit, handleDelete },
    };
}


================================================
File: app/dashboard/hooks/useWidget.ts
================================================
import { IWidget } from '@/app/lib/drizzle/schemas';
import { useWidgetStore } from '@/app/store/widgetStore';
import { useAuth } from '@clerk/nextjs'
import { useState } from 'react';

export function useWidget() {
    const [isOpen, setIsOpen] = useState(false);
    const { userId } = useAuth()
    const { addWidget, updateWidget, deleteWidget } = useWidgetStore();
    const [isEditingWidget, setIsEditingWidget] = useState(false);
  
    const [form, setForm] = useState<IWidget>({
      title: '',
      subtitle: '',
      datasetId: '',
    } as IWidget);
  
    const handleSave = async (pageId: string) => {
      if(!userId) {
        console.error('User not authenticated - cannot save widget');
        return;
      }
      if(!pageId) {
        console.error('No pageId provided - cannot save widget');
        return;
      }
      const payload = { 
        ...form, 
        userId,
        pageId
      } as IWidget;

      if(isEditingWidget && form.id) {
        await updateWidget(form.id, payload);
      } else {
        await addWidget(payload);
      }
      
      // Reset form
      setForm({
        title: '',
        subtitle: '',
        datasetId: '',
      } as IWidget);
      // close modal
      setIsOpen(false);
    };

    const handleEdit = (widget: IWidget) => { 
      setForm(widget)
      setIsEditingWidget(true);
      setIsOpen(true);
    };

    const handleDelete = async (id: string) => { 
      await deleteWidget(id);
    };

    const handleUpdate = async (id: string, data: IWidget) => {
      await updateWidget(id, data);
    };
  
    return {
      isOpen, 
      setIsOpen,
      isEditingWidget,
      form,
      setForm,
      handlers: { handleSave, handleEdit, handleDelete, handleUpdate },
    };
  }


================================================
File: app/dashboard/settings/page.tsx
================================================
import React from 'react'

function SettingsPage() {
  return (
    <div>Settings Page works!</div>
  )
}

export default SettingsPage


================================================
File: app/error/page.tsx
================================================
"use client"

import { useSearchParams } from "next/navigation"
import { Suspense } from "react"

enum Error {
  Configuration = "Configuration",
}

const errorMap = {
  [Error.Configuration]: (
    <p>
      There was a problem when trying to authenticate. Please contact us if this
      error persists. Unique error code:{" "}
      <code className="rounded-sm bg-slate-100 p-1 text-xs">Configuration</code>
    </p>
  ),
}

function ErrPage() {
  const search = useSearchParams()
  const error = search.get("error") as Error
 
  return (
    <div className="flex h-screen w-full flex-col items-center justify-center">
      <a
        href="#"
        className="block max-w-sm rounded-lg border border-gray-200 bg-white p-6 text-center shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
      >
        <h5 className="mb-2 flex flex-row items-center justify-center gap-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
          Something went wrong
        </h5>
        <div className="font-normal text-gray-700 dark:text-gray-400">
          {errorMap[error] || "Please contact us if this error persists."}
        </div>
      </a>
    </div>
  )
}

export default function ErrorPage() {
  return (
    <Suspense>
      <ErrPage />
    </Suspense>
  )
}


================================================
File: app/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
import { IChart, IWidget } from "./drizzle/schemas";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Helper function for layout positioning
export const newWidgetPosition = (widgets: IWidget[], type: IChart) => {
  const layout = widgets?.map(w => w.layout);

  // Find all occupied positions
  const occupiedPositions = new Set();
  layout.forEach(item => {
    for (let x = item.x; x < item.x + item.w; x++) {
      for (let y = item.y; y < item.y + item.h; y++) {
        occupiedPositions.add(`${x},${y}`);
      }
    }
  });

  // Find first available position
  let newX = 0;
  let newY = 0;
  let found = false;

  while (!found) {
    if (!occupiedPositions.has(`${newX},${newY}`)) {
      found = true;
    } else {
      newX++;
      if (newX >= 12) { // Assuming max grid width of 12
        newX = 0;
        newY++;
      }
    }
  }

  return {
    x: newX,
    y: newY,
    w: type as any !== 'count' ? 4 : 2,
    h: type as any !== 'count' ? 3 : 2,
  };
};


================================================
File: app/lib/adapters/csv.ts
================================================
// import { DataAdapter } from "@/app/types/adapter";
// import Papa from 'papaparse';
// import { CSVDataSource } from '@/app/types/datasource';

// export class CSVAdapter implements DataAdapter {
//     constructor(private config: CSVDataSource) {}
  
//     async initialize(): Promise<void> {
//       // No initialization needed for CSV
//     }
  
//     async fetchData(): Promise<any[]> {
//       const response = await fetch(`/api/files/${this.config.fileId}`);
//       const csvText = await response.text();
      
//       return new Promise((resolve, reject) => {
//         Papa.parse(csvText, {
//           header: true,
//           complete: (results) => resolve(results.data),
//           error: (error) => reject(error)
//         });
//       });
//     }
  
//     async cleanup(): Promise<void> {
//       // No cleanup needed for CSV
//     }
//   }


//   // Example usage in dashboard
// const widgetConfig = {
//   id: '1',
//   title: 'Sales Data',
//   chartType: 'line',
//   dataSource: {
//     type: 'csv',
//     fileId: 'sales-data',
//     columnMapping: {
//       xAxis: 'date',
//       yAxis: 'amount'
//     }
//   }
// };


================================================
File: app/lib/adapters/javascript.ts
================================================
// import { DataAdapter } from "@/app/types/adapter";
// import { JavaScriptDataSource } from "@/app/types/datasource";

// export class JavaScriptAdapter implements DataAdapter {
//     private sandbox: any;
  
//     constructor(private config: JavaScriptDataSource) {
//       this.sandbox = {
//         fetch: window.fetch.bind(window),
//         console: {
//           log: (...args) => console.log('Widget code:', ...args),
//           error: (...args) => console.error('Widget code:', ...args),
//         },
//         Date,
//         Math,
//         JSON,
//         Array,
//         Object,
//         String,
//         Number,
//         RegExp,
//         Map,
//         Set,
//         Promise,
//       };
//     }
  
//     async initialize(): Promise<void> {
//       // No initialization needed
//     }
  
//     async fetchData(): Promise<any[]> {
//       try {
//         const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
//         const userFunction = new AsyncFunction(
//           ...Object.keys(this.sandbox),
//           this.config.code
//         );
  
//         const data = await userFunction.apply(null, Object.values(this.sandbox));
  
//         if (!Array.isArray(data)) {
//           throw new Error('Code must return an array of data points');
//         }
  
//         return data;
//       } catch (error) {
//         throw new Error(`Code execution failed: ${error.message}`);
//       }
//     }
  
//     async cleanup(): Promise<void> {
//       // No cleanup needed
//     }
//   }


//   // Create a widget with JavaScript data source
// const widget = {
//     id: 'js-widget-1',
//     title: 'Custom Data Widget',
//     type: 'line',
//     dataSource: {
//       type: 'javascript',
//       code: `
//         async function getData() {
//           // Fetch cryptocurrency prices
//           const response = await fetch('https://api.example.com/crypto/BTC');
//           const data = await response.json();
          
//           // Calculate moving average
//           const window = 7;
//           return data.prices.map((price, index, array) => {
//             const start = Math.max(0, index - window + 1);
//             const windowPrices = array.slice(start, index + 1);
//             const average = windowPrices.reduce((sum, p) => sum + p.value, 0) / windowPrices.length;
            
//             return {
//               x: new Date(price.date).toLocaleDateString(),
//               y: average
//             };
//           });
//         }
        
//         return await getData();
//       `,
//       refreshInterval: 60000 // Refresh every minute
//     }
//   };


================================================
File: app/lib/adapters/rest.ts
================================================
// import { DataAdapter } from '@/app/types/adapter';
// import { RESTDataSource } from '@/app/types/datasource';
// import axios from 'axios';


// export class RESTAdapter implements DataAdapter {
//   constructor(private config: RESTDataSource) {}

//   async initialize(): Promise<void> {
//     // No initialization needed for REST
//   }

//   async fetchData(): Promise<any[]> {
//     const response = await axios({
//       method: this.config.method,
//       url: this.config.endpoint,
//       headers: this.config.headers,
//       data: this.config.body
//     });

//     if (this.config.dataPath) {
//       return this.extractData(response.data, this.config.dataPath);
//     }

//     return response.data;
//   }

//   private extractData(obj: any, path: string): any[] {
//     return path.split('.').reduce((acc, part) => acc?.[part], obj) || [];
//   }

//   async cleanup(): Promise<void> {
//     // No cleanup needed for REST
//   }
// }


// // // REST API Widget
// // const apiWidget = {
// //   id: '2',
// //   title: 'User Activity',
// //   chartType: 'bar',
// //   dataSource: {
// //     type: 'rest',
// //     endpoint: 'https://api.example.com/stats',
// //     method: 'GET',
// //     headers: {
// //       'Authorization': 'Bearer ${token}'
// //     },
// //     dataPath: 'data.statistics'
// //   }
// // };


================================================
File: app/lib/adapters/sql.ts
================================================
import { DataAdapter } from '@/app/types/adapter';
import { SQLConnectionConfig } from '@/app/types/datasource';

export class SQLAdapter implements DataAdapter {
  constructor(private config: SQLConnectionConfig) {}

  async initialize(): Promise<void> {
    // No initialization needed for API calls
  }

  async fetchData(query: string): Promise<any[]> {
    const response = await fetch('/api/data-sources', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query,
        config: this.config,
      }),
    });

    if (!response.ok) {
      const data = await response.json();
      throw new Error(data?.details || data?.error || 'Failed to fetch data');
    }

    return response.json();
  }

  async cleanup(): Promise<void> {
    // No cleanup needed
  }
}



================================================
File: app/lib/adapters/websocket.ts
================================================
// import { DataAdapter } from "@/app/types/adapter";
// import { WebSocketDataSource } from "@/app/types/datasource";

// export class WebSocketAdapter implements DataAdapter {
//   private ws: WebSocket | null = null;
//   private callback: ((data: any[]) => void) | null = null;

//   constructor(private config: WebSocketDataSource) {}

//   async initialize(): Promise<void> {
//     this.ws = new WebSocket(this.config.url);
//   }

//   async fetchData(): Promise<any[]> {
//     throw new Error('WebSocket adapter requires subscription');
//   }

//   subscribe(callback: (data: any[]) => void): void {
//     this.callback = callback;
    
//     if (this.ws) {
//       this.ws.onmessage = (event) => {
//         const data = JSON.parse(event.data);
//         if (this.callback) {
//           this.callback(data);
//         }
//       };
//     }
//   }

//   unsubscribe(): void {
//     this.callback = null;
//   }

//   async cleanup(): Promise<void> {
//     this.ws?.close();
//   }
// }


================================================
File: app/lib/apiKey/apiKey.ts
================================================
import crypto from 'crypto';

export class ApiKeyGenerator {
  static generate(): { prefix: string; key: string; hashedKey: string } {
    // Generate a random key with prefix for easy identification
    const prefix = 'dk';
    const randomBytes = crypto.randomBytes(24);
    const key = `${prefix}_${randomBytes.toString('base64url')}`;
    
    // Hash the key for storage
    const hashedKey = crypto.createHash('sha256')
      .update(key)
      .digest('hex');

    return { prefix, key, hashedKey };
  }

  static hashKey(key: string): string {
    return crypto.createHash('sha256')
      .update(key)
      .digest('hex');
  }
}


================================================
File: app/lib/charts/aggregation.ts
================================================
import { DataPoint, AggregationMethod } from "@/app/types/data";

/**
 * Aggregates data based on specified method and grouping
 */
export function aggregate(
    data: DataPoint[],
    method?: AggregationMethod,
    groupBy?: string[]
  ): DataPoint[] {
    const groups = new Map<string, DataPoint[]>();

    // Group data
    data.forEach(item => {
      const key = groupBy?.map(col => item[col]).join('|');
      if(!key) return;
      if (!groups.has(key)) {
        groups.set(key, []);
      }
      groups.get(key)!.push(item);
    });

    // Apply aggregation method
    return Array.from(groups.entries()).map(([key, group]) => {
      const result: DataPoint = {};
      
      // Add grouping columns
      groupBy?.forEach((col, index) => {
        result[col] = key.split('|')[index];
      });

      // Add aggregated values
      Object.keys(group[0])
        .filter(col => !groupBy?.includes(col))
        .forEach(col => {
          const values = group.map(item => Number(item[col]));
          switch (method) {
            case 'sum':
              result[col] = values.reduce((a, b) => a + b, 0);
              break;
            case 'avg':
              result[col] = values.reduce((a, b) => a + b, 0) / values.length;
              break;
            case 'max':
              result[col] = Math.max(...values);
              break;
            case 'min':
              result[col] = Math.min(...values);
              break;
            case 'count':
              result[col] = values.length;
              break;
          }
        });

      return result;
    });
  }


================================================
File: app/lib/charts/chart-bar.ts
================================================
import { AntChartOptions, DataPoint, TransformConf } from "@/app/types/data";


/**
 * Main entry point for transforming data to chart options AntChartOptions
 */
export function transformToBarChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    return {
      xField: config.options?.xField,
      yField: config.options?.yField,
      colorField: config.options?.colorField,
    } as AntChartOptions;
  }


================================================
File: app/lib/charts/chart-column.ts
================================================
import { AntChartOptions, DataPoint, TransformConf } from "@/app/types/data";


/**
 * Main entry point for transforming data to chart options AntChartOptions
 */
export function transformToColumnChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    return {
      xField: config.options?.xField,
      yField: config.options?.yField,
      colorField: config.options?.colorField,
    } as AntChartOptions;
  }


================================================
File: app/lib/charts/chart-dual-axes.ts
================================================
import { AntChartOptions, DataPoint, TransformConf } from "@/app/types/data";

/**
 * Pie chart transformation AntChartOptions
 */
export function transformDualAxesChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    const xField = config.options?.xField;
    const options = {
      xField,
      children: [],
    } as AntChartOptions

    if(config.options?.children && config.options?.children.length > 0) {      
      let style = config.options.children[0].type == 'interval' ? { maxWidth: 70 } : { lineWidth: 2 }
      if(config.options.children[1].type == 'interval') {
        style = { lineWidth: 2, stroke: '#5AD8A6'  }
      }
      options.children?.push({
        type: config.options.children[0].type,
        yField: config.options.children[0]?.yField,
        colorField: config.options.children[0]?.colorField,
        style,
      })
    }

    if(config.options?.children && config.options?.children.length > 1) {
      let style = config.options.children[0].type == 'interval' ? { maxWidth: 80 } : { lineWidth: 2 }
      if(config.options.children[0].type == 'interval') {
        style = { lineWidth: 2, stroke: '#5AD8A6' }
      }
      options.children?.push({
        type: config.options.children[1].type,
        yField: config.options.children[1].yField,
        colorField: config.options.children[1].colorField,
        style,
        axis: { y: { position: 'right' } },
      })
    }
    console.log("-----options-----", options)
    return options;
}



================================================
File: app/lib/charts/chart-line.ts
================================================
import { DataPoint, TransformConf,AntChartOptions } from "@/app/types/data";


/**
 * Main entry point for transforming data to chart options AntChartOptions
 */
export function transformToLineChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    return {
      xField: config.options?.xField,
      yField: config.options?.yField,
      // colorField: config.options?.colorField,
    } as AntChartOptions;
  }


================================================
File: app/lib/charts/chart-pie.ts
================================================
import { AntChartOptions, DataPoint, TransformConf } from "@/app/types/data";

/**
 * Pie chart transformation AntChartOptions
 */
export function transformToPieChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    const angleField = config.options?.angleField || config.options?.xField;
    const colorField = config.options?.colorField || config.options?.xField;
    return {
      angleField,
      colorField,
    } as AntChartOptions;
}


================================================
File: app/lib/charts/chart-scatter.ts
================================================
import { DataPoint, TransformConf, AntChartOptions } from "@/app/types/data";

/**
 * Transforms data for scatter plots AntChartOptions
 */
export function transformToScatterChart(data: DataPoint[], config: TransformConf): AntChartOptions {
    const options = {
      xField: config.options?.xField,
      yField: config.options?.yField,
    } as AntChartOptions
    
    if(config.options?.colorField) {
      options.colorField = config.options?.colorField;
    }

    if(config.options?.shapeField) {
      options.shapeField = config.options?.shapeField;
    }
    return options;
  }


================================================
File: app/lib/charts/common.ts
================================================
import { IWidget } from "../drizzle/schemas";

// Common options shared across all chart types 
export const getCommonOptions = () => ({
  height: '100%',
  autoFit: true,
  animation: true,
  legend: true,
});

// Base options specific for a given chart type
export const getBaseOptions = (widget: IWidget) => {
    const options =widget.transformConfig.options;

    switch (widget.type) {
      case 'line':
        return {
          point: {
            shapeField: 'square',
            sizeField: 4,
          },
          interaction: {
            tooltip: {
              marker: true,
            },
          },
          style: {
            lineWidth: 2,
          },
        };
  
      case 'bar':
        return {};
  
      case 'column':
        return {};

      case 'scatter':
        return {
          sizeField: 5,
          style: { fillOpacity: 0.3, lineWidth: 1 },
          shapeField: 'hollow', // point
        };

      case 'dual-axes':
        return {};

      case 'pie':
        return {
          label: {
            text: options?.angleField ?? options?.xField,
            style: {
              fontWeight: 'bold',
            },
          },
          radius: 0.8,
          innerRadius: 0.4, // Donut chart
          style: {
            stroke: '#fff',
            inset: 1,
            radius: 10,
          },
          // scale: {
          //   color: {
          //     palette: 'spectral',
          //     offset: (t :number) => t * 0.8 + 0.1,
          //   },
          // },
        };

      default:
        return {};
    }
  };


================================================
File: app/lib/charts/filter.ts
================================================
import { DataPoint, FilterGroup, Filters } from "@/app/types/data";

export function evaluateFilterGroup(item: DataPoint, filterGroup: FilterGroup): boolean {
    if (filterGroup.operator === 'AND') {
        return filterGroup.filters.every(filter => 
            evaluateFilter(
                getFilterValue(item[filter.column], filter),
                getFilterValue(filter.value, filter),
                filter
            )
        );
    } else {
        return filterGroup.filters.some(filter => 
            evaluateFilter(
                getFilterValue(item[filter.column], filter),
                getFilterValue(filter.value, filter),
                filter
            )
        );
    }
}

/**
 * Applies filters to data
 */
export function applyFilters(data: DataPoint[], filters: Filters[]): DataPoint[] {
    if (!filters?.length) return data;

    return data.filter(item => 
        filters.every(filter => {
            if (!filter.enabled) return true;
            
            const itemValue = getFilterValue(item[filter.column], filter);
            const filterValue = getFilterValue(filter.value, filter);

            return evaluateFilter(itemValue, filterValue, filter);
        })
    );
}

function getFilterValue(value: any, filter: Filters): any {
    if (value === null || value === undefined) {
        return filter.nullValue ?? null;
    }

    if (filter.customFormatter) {
        return filter.customFormatter(value);
    }

    if (filter.treatAsNumber) {
        return Number(value);
    }

    if (filter.treatAsDate) {
        return new Date(value);
    }

    if (typeof value === 'string' && !filter.caseSensitive) {
        return value.toLowerCase();
    }

    return value;
}

function evaluateFilter(itemValue: any, filterValue: any, filter: Filters): boolean {
    if (filter.operator === 'isNull') {
        return itemValue === null || itemValue === undefined;
    }

    if (filter.operator === 'isNotNull') {
        return itemValue !== null && itemValue !== undefined;
    }

    // Handle null values
    if (itemValue === null || itemValue === undefined) {
        return false;
    }

    switch (filter.operator) {
        case 'equals':
            return itemValue === filterValue;
            
        case 'notEquals':
            return itemValue !== filterValue;
            
        case 'contains':
            return String(itemValue).includes(String(filterValue));
            
        case 'notContains':
            return !String(itemValue).includes(String(filterValue));
            
        case 'startsWith':
            return String(itemValue).startsWith(String(filterValue));
            
        case 'endsWith':
            return String(itemValue).endsWith(String(filterValue));
            
        case 'gt':
            return itemValue > filterValue;
            
        case 'gte':
            return itemValue >= filterValue;
            
        case 'lt':
            return itemValue < filterValue;
            
        case 'lte':
            return itemValue <= filterValue;
            
        case 'between':
            if (!Array.isArray(filterValue) || filterValue.length !== 2) {
                return false;
            }
            return filter.inclusiveRange ? 
                (itemValue >= filterValue[0] && itemValue <= filterValue[1]) :
                (itemValue > filterValue[0] && itemValue < filterValue[1]);
            
        case 'in':
            return Array.isArray(filterValue) && filterValue.includes(itemValue);
            
        case 'notIn':
            return Array.isArray(filterValue) && !filterValue.includes(itemValue);
            
        case 'regex':
            try {
                const regex = new RegExp(String(filterValue), filter.regexFlags);
                return regex.test(String(itemValue));
            } catch (e) {
                console.error('Invalid regex pattern:', e);
                return false;
            }
            
        default:
            return true;
    }
}


================================================
File: app/lib/charts/formatting.ts
================================================
import { Formatting } from "@/app/types/data";

/**
 * Applies formatting to values
 */
export function applyFormatting(data: any, formatting: Formatting) {
    if (!formatting?.enabled) return data;
    // apply formatting
    return data;
}



================================================
File: app/lib/charts/options.ts
================================================
import { DataPoint, TransformConf } from "@/app/types/data";
import { ChartDataTransformer } from "./transformer";
import { IWidget } from "../drizzle/schemas";
import { cloneDeep } from "lodash";
import { deepMerge } from "./utils";
import { getBaseOptions, getCommonOptions } from "./common";

/**
 * Generates chart options with proper deep merging of configurations
 */
export function getChartOptions(widget: IWidget, data: DataPoint[]): Record<string, any> {
  if (!widget.type) return {};

  // Create fresh copies to avoid mutations
  const baseOptions = cloneDeep(getBaseOptions(widget));
  const commonOptions = cloneDeep(getCommonOptions());
  
  // Transform data according to widget configuration
  const transformerConfig = {
    type: widget.type,
    ...widget.transformConfig,
  } as TransformConf;
  data = handleNumbers(data);
  const transformedData = ChartDataTransformer.transform(data, transformerConfig);

  // Merge all options with proper precedence
  const finalOptions = deepMerge(
    baseOptions,
    commonOptions,
    transformedData?.options,
  );

  // Log final configuration for debugging
  if (process.env.NODE_ENV === 'development') {
    // console.log('Final Chart Options:', finalOptions);
  }

  return {
    data: transformedData?.data || data,
    ...finalOptions
  };
}


const handleNumbers = (data: DataPoint[]) => {
  if (!data.length) return [];

  // Get all unique keys from the data
  const allKeys = Array.from(new Set(data.flatMap(Object.keys)));
  
  // For each key, check if all values in its series can be converted to numbers
  const numericFields = allKeys.filter(key => {
    return data.every(item => {
      const value = item[key];
      if (value === undefined || value === null || value === '') return false;
      if (typeof value === 'number') return true;
      if (typeof value !== 'string') return false;
      
      // Try to convert to number and check if it's valid
      const num = Number(value);
      return !isNaN(num) && isFinite(num);
    });
  });

  // Convert the identified numeric fields
  return data.map(item => {
    const processedItem: DataPoint = { ...item };
    numericFields.forEach(field => {
      const value = item[field];
      if (typeof value === 'string') {
        processedItem[field] = Number(value);
      }
    });
    return processedItem;
  });
};


================================================
File: app/lib/charts/sorting.ts
================================================
import { DataPoint, SortingOrder } from "@/app/types/data";

/**
 * Applies sorting to data
 */
export function sort(
    data: DataPoint[],
    key: keyof DataPoint | 'none',
    order: SortingOrder
  ): DataPoint[] {
    if (order === 'none' || key === 'none') return data;

    return [...data].sort((a, b) => {
      const aVal = a[key];
      const bVal = b[key];

      // Handle undefined or null values
      if (aVal == null && bVal == null) return 0;
      if (aVal == null) return order === 'asc' ? -1 : 1;
      if (bVal == null) return order === 'asc' ? 1 : -1;

      // Handle strings (case-insensitive sorting)
      if (typeof aVal === 'string' && typeof bVal === 'string') {
        const comparison = aVal.localeCompare(bVal, undefined, { sensitivity: 'base' });
        return order === 'asc' ? comparison : -comparison;
      }

      // Handle numbers and other comparable types
      return order === 'asc'
        ? aVal > bVal
          ? 1
          : -1
        : aVal < bVal
        ? 1
        : -1;
    });
  }


================================================
File: app/lib/charts/transformer.ts
================================================
import { AntChartOptions, DataPoint, TransformConf } from "@/app/types/data";
import { sort } from "./sorting";
import { aggregate } from "./aggregation";
import { applyFilters } from "./filter";
import { transformToPieChart } from "./chart-pie";
import { transformToLineChart } from "./chart-line";
import { transformToBarChart } from "./chart-bar";
import { transformToColumnChart } from "./chart-column";
import { transformToScatterChart } from "./chart-scatter";
import { transformDualAxesChart } from "./chart-dual-axes";


export class ChartDataTransformer {
  // Cache for memoized results
  private static cache = new Map<string, AntChartOptions>();

  static transform(data: DataPoint[], config: TransformConf): {
    options: AntChartOptions;
    data: DataPoint[];
  } | null {
      // Input validation
      if (!data?.length || !config) {
          return null;
      }

      const cacheKey = this.generateCacheKey(data, config);
      const cachedResult = this.cache.get(cacheKey);
      if (cachedResult) {
          return {
              options: cachedResult,
              data
          };
      }

      const processedData = this.preProcessData(data, config);
      const result = this.transformByType(processedData, config);
      
      // Cache and return
      this.cache.set(cacheKey, result);
      return {
          options: result,
          data: processedData
      };
  }

  // method for data preprocessing
  private static preProcessData(data: DataPoint[], config: TransformConf): DataPoint[] {
    let processedData = [...data];

    // Apply filters first
    if (config.filters?.length) {
        processedData = applyFilters(processedData, config.filters);
    }

    // Then aggregation
    if (config.aggregation?.enabled) {
        processedData = aggregate(
            processedData,
            config.aggregation.method,
            config.aggregation.groupBy
        );
    }

    // Then sorting
    if (config.sorting?.enabled) {
        processedData = sort(
            processedData,
            config.sorting.key,
            config.sorting.order
        );
    }

    return processedData;
  }
  
  /**
   * Transforms data based on specific chart type
   */
  private static transformByType(data: DataPoint[], config: TransformConf): AntChartOptions {
    switch (config.type) {
      case 'pie':
        return transformToPieChart(data, config);
      case 'line':
        return transformToLineChart(data, config);
      case 'bar':
        return transformToBarChart(data, config);
      case 'column':
        return transformToColumnChart(data, config);
      case 'scatter':
        return transformToScatterChart(data, config);
      case 'dual-axes':
        return transformDualAxesChart(data, config);
      default:
        throw new Error(`Unsupported chart type: ${config.type}`);
    }
  }

  /**
   * Generates cache key for data and config
   */
  private static generateCacheKey(data: DataPoint[], config: TransformConf): string {
    return JSON.stringify({
      dataHash: this.hashData(data),
      config
    });
  }

  /**
   * Creates a simple hash of the data for caching
   */
  private static hashData(data: DataPoint[]): string {
    return data
      .map(item => Object.values(item).join('|'))
      .join('_');
  }

  /**
   * Clears the transformer's cache
   */
  static clearCache() {
    this.cache.clear();
  }
}
  




================================================
File: app/lib/charts/utils.ts
================================================
import { cloneDeep } from "lodash";

/**
 * Deeply merges multiple objects, properly handling arrays and nested structures
 */
export function deepMerge(target: any, ...sources: any[]): any {
  if (!sources.length) return target;
  const source = sources.shift();

  if (!source) return target;

  if (Array.isArray(source)) {
    return cloneDeep(source);
  }

  if (typeof source !== 'object') return source;

  for (const key in source) {
    if (Array.isArray(source[key])) {
      target[key] = cloneDeep(source[key]);
    } else if (typeof source[key] === 'object' && source[key] !== null) {
      if (!target[key] || Array.isArray(target[key])) {
        target[key] = {};
      }
      target[key] = deepMerge(target[key], source[key]);
    } else {
      target[key] = source[key];
    }
  }

  return deepMerge(target, ...sources);
}



================================================
File: app/lib/drizzle/index.ts
================================================
import { drizzle } from 'drizzle-orm/postgres-js';

export const db = drizzle(process.env.DATABASE_URL!);


================================================
File: app/lib/drizzle/schemas/index.ts
================================================
import { 
  pgTable, integer, varchar, 
  jsonb, timestamp,   boolean,
  text,
  foreignKey
} from "drizzle-orm/pg-core";
import { z } from 'zod';

export const conntypes = ['csv', 'sql', 'nosql', 'rest'] as const;
export const connectionSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string().min(1),
  type: z.enum(conntypes),
  config: z.record(z.any()).optional(),
  userId: z.string().min(1),
  createdAt: z.string().datetime().transform((str) => new Date(str)).optional(),
  updatedAt: z.string().datetime().transform((str) => new Date(str)).optional()
}).strict();
export type IConnection = z.infer<typeof connectionSchema>;

export const connectionsTable = pgTable("connections", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  name: varchar("name", { length: 255 }).notNull().unique(),
  type: varchar("type", { length: 10 }).notNull(),
  config: jsonb("config"),
  userId: varchar("user_id").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
export type SelectConnection = typeof connectionsTable.$inferSelect;
export type InsertConnection = typeof connectionsTable.$inferInsert;

export const datasetsSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string().min(1),
  type: z.string().min(1),
  connectionId: z.string().min(1),
  userId: z.string().min(1),
  schema: z.string().optional(),
  table: z.string().optional(),
  columns: z.array(z.object({
    column: z.string().min(1),
    type: z.string().min(1),
  })).optional(),
  query: z.string().optional(),
  refreshInterval: z.number().optional(),
  createdAt: z.string().datetime().transform((str) => new Date(str)).optional(),
  updatedAt: z.string().datetime().transform((str) => new Date(str)).optional()
}).strict();
export type IDataset = z.infer<typeof datasetsSchema>;

export const datasetsTable = pgTable("datasets", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  name: varchar("name", { length: 255 }).notNull().unique(),
  type: varchar("type", { length: 50 }).notNull(),
  connectionId: varchar("connection_id").references(() => connectionsTable.id).notNull(),
  userId: varchar("user_id").notNull(),
  schema: varchar("schema", { length: 100 }),
  table: varchar("table", { length: 100 }),
  columns: jsonb("columns"),
  query: varchar("query"),
  refreshInterval: integer("refresh_interval"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
export type SelectDataset = typeof datasetsTable.$inferSelect;
export type InsertDataset = typeof datasetsTable.$inferInsert;

// First define the base schema type
interface PageSchemaType {
  id?: string;
  label: string;
  route?: string;
  icon: string;
  active?: boolean;
  parentId?: string;
  subpages?: PageSchemaType[];
  userId: string;
}

// Then create the schema with proper typing
export const pageSchema: z.ZodType<PageSchemaType> = z.lazy(() => z.object({
  id: z.string().uuid().optional(),
  label: z.string().min(1),
  route: z.string().min(1),
  icon: z.string(),
  active: z.boolean().default(false),
  parentId: z.string().uuid().optional(),
  subpages: z.array(pageSchema).optional(),
  userId: z.string().min(1),
  createdAt: z.string().datetime().transform((str) => new Date(str)).optional(),
  updatedAt: z.string().datetime().transform((str) => new Date(str)).optional()
}).strict());

// Export the inferred type
export type IPage = z.infer<typeof pageSchema>;

export const pagesTable = pgTable("pages", {
    id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
    label: varchar("label", { length: 255 }).notNull().unique(),
    route: varchar("route", { length: 255 }),
    icon: varchar("icon", { length: 100 }),
    active: boolean("active").default(false),
    parentId: varchar("parent_id"),
    userId: varchar("user_id").notNull(),
    createdAt: timestamp("created_at").defaultNow().notNull(),
    updatedAt: timestamp("updated_at").defaultNow().notNull(),
  },
  (table) => {
    return {
      parentReference: foreignKey({
        columns: [table.parentId],
        foreignColumns: [table.id],
        name: "subpage_parent_id_fkey",
      }),
    };
  }
);

export type SelectPage = typeof pagesTable.$inferSelect;
export type InsertPage = typeof pagesTable.$inferInsert;

// 'count', 'line', 'pie', 'bar', 'heatmap', 'scatter'
export const chartTypes = ['line', 'pie', 'bar', 'column', 'scatter', 'dual-axes'] as const;
export const  visualTypes = ['count', ...chartTypes] as const;
export type IChart = typeof chartTypes[number];
export type IVisual = typeof visualTypes[number];

export const widgetSchema = z.object({
  id: z.string().uuid().optional(),
  pageId: z.string().uuid(),
  userId: z.string().min(1),
  type: z.enum(chartTypes),
  title: z.string().min(1),
  subtitle: z.string().optional(),
  layout: z.object({
    i: z.string().optional(),
    x: z.number(),
    y: z.number(),
    w: z.number(),
    h: z.number(),
  }),
  datasetId: z.string().uuid(),
  query: z.string().optional(),
  transformConfig: z.record(z.any()),
  createdAt: z.string().datetime().transform((str) => new Date(str)).optional(),
  updatedAt: z.string().datetime().transform((str) => new Date(str)).optional()
}).strict();
export type IWidget = z.infer<typeof widgetSchema>;

export const widgetsTable = pgTable("widgets", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  type: varchar("type", { length: 50 }).notNull(),
  title: varchar("title", { length: 255 }).notNull().unique(),
  subtitle: varchar("subtitle", { length: 255 }),
  layout: jsonb("layout").notNull(),
  datasetId: varchar("dataset_id").references(() => datasetsTable.id).notNull(),
  transformConfig: jsonb("transform_config").notNull(),
  pageId: varchar("page_id").notNull(),
  userId: varchar("user_id").notNull(),
  query: text("query"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull()
});

export type SelectWidget = typeof widgetsTable.$inferSelect;
export type InsertWidget = typeof widgetsTable.$inferInsert;



================================================
File: app/lib/hooks/useDataSet.ts
================================================
import { useState, useEffect } from 'react';
// import { CSVAdapter } from '@/app/lib/adapters/csv';
import { SQLAdapter } from '@/app/lib/adapters/sql';
// import { RESTAdapter } from '@/app/lib/adapters/rest';
// import { WebSocketAdapter } from '@/app/lib/adapters/websocket';
import { IConnection, IDataset, IWidget } from '../drizzle/schemas';
import { useConnectionStore } from '@/app/store/connections';
import { useDatasetStore } from '@/app/store/datasets';
import { SQLConnectionConfig } from '@/app/types/datasource';

export function useDataSet(widget: IWidget) {
  const { datasets } = useDatasetStore();
  const { connections } = useConnectionStore();
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    let adapter: any;
    let interval: NodeJS.Timeout | null = null;

    const dataset = datasets.find((d: IDataset) => d.id === widget.datasetId);
    const connection = connections.find((c: IConnection) => c.id === dataset?.connectionId);
    const query = widget.query;

    const fetchData = async () => {
      try {
        let result;
        switch (connection?.type) {
          case 'sql':
            result = await adapter.fetchData(query?.toString());
            setData(result);
            break;
          default:
            result = await adapter.fetchData();
            setData(result);
        }
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Failed to fetch data'));
      } finally {
        setLoading(false);
      }
    };

    const initialize = async () => {
      switch (connection?.type) {
        // case 'csv':
        //   adapter = new CSVAdapter(dataset);
        //   break;
        case 'sql':
          adapter = new SQLAdapter(connection?.config as SQLConnectionConfig);
          break;
        // case 'rest':
        //   adapter = new RESTAdapter(dataset);
        //   break;
        // case 'websocket':
        //   adapter = new WebSocketAdapter(dataset);
        //   break;
        default:
          // setData(dataset.data);
          setLoading(false);
          return;
      }

      try {
        await adapter.initialize();

        if (adapter.subscribe) {
          adapter.subscribe(setData);
        } else {
          await fetchData();

          if (dataset?.refreshInterval) {
            interval = setInterval(fetchData, dataset?.refreshInterval);
          }
        }
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Failed to initialize'));
        setLoading(false);
      }
    };

    initialize();

    return () => {
      if (interval) {
        clearInterval(interval);
      }
      if (adapter) {
        adapter.unsubscribe?.();
        adapter.cleanup();
      }
    };
  }, [connections, datasets, widget.datasetId, widget.query]);

  return { data, loading, error };
}


================================================
File: app/lib/hooks/useDebounce.ts
================================================
import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);

    return () => clearTimeout(handler); // Clear timeout on value or delay change
  }, [value, delay]);

  return debouncedValue;
}


================================================
File: app/lib/models/apiKey.model.ts
================================================
// import { ApiKeyGenerator } from '@/app/lib/apiKey/apiKey';

// export class ApiKeyModel {
//   static async create(data: {
//     name: string;
//     userId: string;
//     permissions: string[];
//     rateLimit?: { requests: number; duration: number };
//     expiresAt?: Date;
//   }) {
//     const { prefix, key, hashedKey } = ApiKeyGenerator.generate();

//     const apiKey = await prisma.apiKey.create({
//       data: {
//         key: hashedKey,
//         name: data.name,
//         userId: data.userId,
//         permissions: data.permissions,
//         rateLimit: data.rateLimit || { requests: 1000, duration: 3600 },
//         expiresAt: data.expiresAt,
//       },
//     });

//     // Return the unhashed key only during creation
//     return {
//       ...apiKey,
//       key: key,
//     };
//   }

//   static async validate(key: string) {
//     const hashedKey = ApiKeyGenerator.hashKey(key);
//     return prisma.apiKey.findUnique({
//       where: { key: hashedKey },
//     });
//   }

//   static async delete(id: string) {
//     return prisma.apiKey.delete({
//       where: { id },
//     });
//   }
// }


================================================
File: app/lib/models/webhook.model.ts
================================================
// import { prisma } from '@/app/lib/prisma/prisma';
// import { Webhook, WebhookEvent } from '@/app/types/webhook';
// import crypto from 'crypto';

// export class WebhookModel {
//   static async create(data: {
//     userId: string;
//     url: string;
//     events: WebhookEvent[];
//   }) {
//     const secret = crypto.randomBytes(32).toString('hex');

//     return prisma.webhook.create({
//       data: {
//         ...data,
//         secret,
//         isEnabled: true,
//         failureCount: 0,
//       },
//     });
//   }

//   static async getByUserId(userId: string) {
//     return prisma.webhook.findMany({
//       where: { userId },
//     });
//   }

//   static async update(id: string, data: Partial<Webhook>) {
//     return prisma.webhook.update({
//       where: { id },
//       data,
//     });
//   }

//   static async delete(id: string) {
//     return prisma.webhook.delete({
//       where: { id },
//     });
//   }
// }


================================================
File: app/lib/webhook/webhook.ts
================================================
// import crypto from 'crypto';
// import { Queue } from 'bullmq';
// import { Webhook, WebhookEvent } from '@/app/types/webhook';

// export class WebhookManager {
//   private queue: Queue;

//   constructor() {
//     this.queue = new Queue('webhooks', {
//       connection: {
//         host: process.env.REDIS_HOST,
//         port: parseInt(process.env.REDIS_PORT),
//       },
//     });
//   }

//   // Generate signature for webhook payload
//   private generateSignature(payload: any, secret: string): string {
//     const hmac = crypto.createHmac('sha256', secret);
//     hmac.update(JSON.stringify(payload));
//     return hmac.digest('hex');
//   }

//   // Add webhook event to queue
//   async dispatch(webhook: Webhook, event: WebhookEvent, data: any) {
//     const payload = {
//       id: crypto.randomUUID(),
//       timestamp: new Date().toISOString(),
//       event,
//       data,
//     };

//     const signature = this.generateSignature(payload, webhook.secret);

//     await this.queue.add('webhook', {
//       url: webhook.url,
//       payload,
//       signature,
//       webhookId: webhook.id,
//     }, {
//       attempts: 3,
//       backoff: {
//         type: 'exponential',
//         delay: 1000,
//       },
//     });
//   }
// }


================================================
File: app/lib/workers/webhook.worker.ts
================================================
// import { Worker } from 'bullmq';
// import fetch from 'node-fetch';
// import { prisma } from '../lib/prisma';

// const worker = new Worker('webhooks', async (job) => {
//   const { url, payload, signature, webhookId } = job.data;

//   try {
//     const response = await fetch(url, {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//         'X-Webhook-Signature': signature,
//       },
//       body: JSON.stringify(payload),
//     });

//     if (!response.ok) {
//       throw new Error(`HTTP error! status: ${response.status}`);
//     }

//     // Update webhook status
//     await prisma.webhook.update({
//       where: { id: webhookId },
//       data: {
//         lastSuccess: new Date(),
//         failureCount: 0,
//       },
//     });

//   } catch (error) {
//     // Update failure status
//     await prisma.webhook.update({
//       where: { id: webhookId },
//       data: {
//         lastFailure: new Date(),
//         failureCount: {
//           increment: 1,
//         },
//       },
//     });

//     throw error; // Rethrow for retry mechanism
//   }
// });


================================================
File: app/schemas/transformSchema.ts
================================================
// schemas/transformSchema.ts
import { z } from 'zod';

// Basic types
const dataPointSchema = z.record(z.union([z.string(), z.number()])).describe(
  'A key-value record representing a single data point where values can be strings or numbers'
);

const aggregationMethodSchema = z.enum(['sum', 'avg', 'max', 'min', 'count']).describe(
  'Method used to aggregate data: sum (total), avg (average), max (maximum), min (minimum), or count (number of occurrences)'
);

const sortingOrderSchema = z.enum(['asc', 'desc']).describe(
  'Sorting order: asc (ascending) or desc (descending)'
);

const filterOperationsSchema = z.enum(['equals', 'contains', 'gt', 'lt', 'between']).describe(
  'Filter operations: equals (exact match), contains (partial match), gt (greater than), lt (less than), between (range)'
);

// Ant Design Charts Configuration
const antChartConfigSchema = z.object({
  xField: z.string().optional()
    .describe("The key of the data field that corresponds to the x-axis."),
  yField: z.string().optional()
    .describe("The key of the data field that correspond to the y-axis."),
  angleField: z.string().optional()
    .describe("The key of the data field used to calculate angles, typically for pie or circular charts."),
  seriesField: z.string().optional()
    .describe("The key of the data field that defines how the data is grouped into series."),
  shapeField: z.string().optional()
    .describe("The key of the data field used to determine the shape of chart elements, if applicable."),
  stack: z.union([
      z.object({
        groupBy: z
          .array(z.string())
          .describe("An array of data field keys used for grouping in stacked charts."),
        series: z
          .boolean()
          .describe("Indicates whether stacking is applied at the series level."),
      }),
      z.boolean().describe("Indicates whether stacking is enabled (true) or disabled (false)."),
    ]).optional()
    .describe(
      "Configuration for stacking behavior in the chart. Can be a boolean or an object with detailed options."
    ),
  group: z
    .boolean()
    .describe("Indicates whether data is grouped or not."),
}).describe('Ant Charts Design Configuration for how data series should be mapped to visual elements');


// Aggregation Configuration
const aggregationSchema = z.object({
  enabled: z.boolean().describe(
    'Whether data aggregation is enabled for this visualization'
  ),
  method: aggregationMethodSchema.nullish().describe(
    'The method to use when aggregating data points'
  ),
  groupBy: z.array(z.string()).nullish().describe(
    'Columns to group by when performing aggregation'
  ),
}).describe('Configuration for how data should be aggregated');

// Sorting Configuration
const sortingSchema = z.object({
  enabled: z.boolean().describe(
    'Whether sorting is enabled for this visualization'
  ),
  key: z.string().describe(
    'Column to sort by'
  ),
  order: sortingOrderSchema.describe(
    'Order in which to sort the data'
  ),
}).describe('Configuration for how data should be sorted');

// Formatting Configuration
const formattingSchema = z.object({
  enabled: z.boolean().describe(
    'Whether custom formatting is enabled for this visualization'
  ),
  key: z.string().describe(
    'Column to apply formatting to'
  ),
  order: sortingOrderSchema.describe(
    'Order to apply formatting in'
  ),
}).describe('Configuration for how data should be formatted');

// Filters Configuration
const filterSchema = z.object({
  column: z.string().describe(
    'Column to apply the filter to'
  ),
  operator: filterOperationsSchema.describe(
    'Operation to use when filtering'
  ),
  value: z.union([
    z.string(),
    z.number()
  ]).describe(
    'Value to compare against when filtering'
  ),
}).describe('Configuration for a single filter operation');

// Transform Configuration
const transformConfigSchema = z.object({
  options: antChartConfigSchema.nullish().describe(
    'Ant Design configurations defining how data maps to a chart type'
  ),
  rotateLabels: z.number().nullish().describe(
    'Angle in degrees to rotate labels (useful for long category names)'
  ),
  aggregation: aggregationSchema.nullish().describe(
    'Configuration for data aggregation'
  ),
  sorting: sortingSchema.nullish().describe(
    'Configuration for data sorting'
  ),
  formatting: formattingSchema.nullish().describe(
    'Configuration for data formatting'
  ),
  filters: z.array(filterSchema).nullish().describe(
    'Array of filter configurations to apply to the data'
  ),
}).describe('Complete configuration for transforming and visualizing data');


const transformConfigSchemaSQL = z.object({
  options: antChartConfigSchema.nullish().describe(
    'Array of series configurations defining how data maps to visual elements'
  ),
  rotateLabels: z.number().nullish().describe(
    'Angle in degrees to rotate labels (useful for long category names)'
  ),
  formatting: formattingSchema.nullish().describe(
    'Configuration for data formatting'
  ),
}).describe('Complete configuration for transforming and visualizing data');


// Extended Transform Configuration
const transformConfSchema = transformConfigSchema.extend({
  type: z.enum(['line', 'bar', 'pie', 'count']).describe(
    'Type of visualization or transformation to apply'
  ),
}).describe('Extended transform configuration including visualization type');

// Extended Transform Configuration
const transformConfSchemaSQL = transformConfigSchemaSQL.extend({
  type: z.enum(['line', 'bar', 'pie', 'count']).describe(
    'Type of visualization or transformation to apply'
  ),
}).describe('Extended transform configuration including visualization type');


// Export schemas
export const schemas = {
  dataPoint: dataPointSchema,
  antChartConfig: antChartConfigSchema,
  aggregation: aggregationSchema,
  sorting: sortingSchema,
  formatting: formattingSchema,
  filter: filterSchema,
  transformConfig: transformConfigSchema,
  transformConf: transformConfSchema,
  transformConfSQL: transformConfSchemaSQL,
} as const;

// Export type inference helpers
export type IDataPoint = z.infer<typeof dataPointSchema>;
export type IAntChartOptions = z.infer<typeof antChartConfigSchema>;
export type IAggregation = z.infer<typeof aggregationSchema>;
export type ISorting = z.infer<typeof sortingSchema>;
export type IFormatting = z.infer<typeof formattingSchema>;
export type IFilter = z.infer<typeof filterSchema>;
export type ITransformConfig = z.infer<typeof transformConfigSchema>;
export type ITransformConf = z.infer<typeof transformConfSchema>;

// Helper function to validate configurations
export const validateConfig = {
  transformConfig: (data: unknown): ITransformConfig => transformConfigSchema.parse(data),
  transformConf: (data: unknown): ITransformConf => transformConfSchema.parse(data),
  antChartConfig: (data: unknown): IAntChartOptions => antChartConfigSchema.parse(data),
  aggregation: (data: unknown): IAggregation => aggregationSchema.parse(data),
  sorting: (data: unknown): ISorting => sortingSchema.parse(data),
  formatting: (data: unknown): IFormatting => formattingSchema.parse(data),
  filter: (data: unknown): IFilter => filterSchema.parse(data),
};


================================================
File: app/settings/apikeys/notes.txt
================================================
CREATE TABLE api_keys (
  id UUID PRIMARY KEY,
  key TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  user_id UUID NOT NULL,
  permissions TEXT[] NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  last_used TIMESTAMP,
  expires_at TIMESTAMP,
  rate_limit JSONB NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id)
);



// pages/api/widgets/[id].ts
import { apiKeyAuth } from '../../../middleware/apiKeyAuth';

export default async function handler(req, res) {
  await apiKeyAuth(req, res, async () => {
    // Your widget endpoint logic here
    const widget = await getWidget(req.params.id);
    res.json(widget);
  });
}


// use
fetch('https://api.yourdashboard.com/widgets/123', {
  headers: {
    'X-API-Key': 'dk_your_api_key_here'
  }
});


================================================
File: app/settings/apikeys/pageX.tsx
================================================
// 'use client';
// import { useState } from 'react';
// import { Plus, Trash2, Copy, Eye, EyeOff } from 'lucide-react';

// export default function ApiKeysPage() {
//   const [keys, setKeys] = useState([]);
//   const [showCreateModal, setShowCreateModal] = useState(false);
//   const [showKey, setShowKey] = useState<string | null>(null);

//   const createApiKey = async (data) => {
//     const response = await fetch('/api/keys', {
//       method: 'POST',
//       headers: { 'Content-Type': 'application/json' },
//       body: JSON.stringify(data),
//     });
    
//     if (response.ok) {
//       const newKey = await response.json();
//       setKeys([...keys, newKey]);
//       setShowCreateModal(false);
//     }
//   };

//   return (
//     <div className="p-6">
//       <div className="flex justify-between items-center mb-6">
//         <h1 className="text-2xl font-bold">API Keys</h1>
//         <button
//           onClick={() => setShowCreateModal(true)}
//           className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg"
//         >
//           <Plus size={20} />
//           Create API Key
//         </button>
//       </div>

//       <div className="bg-white rounded-lg shadow">
//         <table className="w-full">
//           <thead>
//             <tr className="border-b">
//               <th className="text-left p-4">Name</th>
//               <th className="text-left p-4">Key</th>
//               <th className="text-left p-4">Created</th>
//               <th className="text-left p-4">Expires</th>
//               <th className="text-left p-4">Last Used</th>
//               <th className="text-left p-4">Actions</th>
//             </tr>
//           </thead>
//           <tbody>
//             {keys.map((key) => (
//               <tr key={key.id} className="border-b">
//                 <td className="p-4">{key.name}</td>
//                 <td className="p-4">
//                   <div className="flex items-center gap-2">
//                     <code className="bg-gray-100 px-2 py-1 rounded">
//                       {showKey === key.id ? key.key : '••••••••••••••••'}
//                     </code>
//                     <button
//                       onClick={() => setShowKey(
//                         showKey === key.id ? null : key.id
//                       )}
//                       className="text-gray-500 hover:text-gray-700"
//                     >
//                       {showKey === key.id ? (
//                         <EyeOff size={16} />
//                       ) : (
//                         <Eye size={16} />
//                       )}
//                     </button>
//                     <button
//                       onClick={() => navigator.clipboard.writeText(key.key)}
//                       className="text-gray-500 hover:text-gray-700"
//                     >
//                       <Copy size={16} />
//                     </button>
//                   </div>
//                 </td>
//                 <td className="p-4">
//                   {new Date(key.createdAt).toLocaleDateString()}
//                 </td>
//                 <td className="p-4">
//                   {key.expiresAt 
//                     ? new Date(key.expiresAt).toLocaleDateString()
//                     : 'Never'}
//                 </td>
//                 <td className="p-4">
//                   {key.lastUsed
//                     ? new Date(key.lastUsed).toLocaleDateString()
//                     : 'Never'}
//                 </td>
//                 <td className="p-4">
//                   <button
//                     onClick={() => deleteKey(key.id)}
//                     className="text-red-500 hover:text-red-700"
//                   >
//                     <Trash2 size={16} />
//                   </button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {/* Create API Key Modal */}
//       {showCreateModal && (
//         <CreateApiKeyModal
//           onClose={() => setShowCreateModal(false)}
//           onCreate={createApiKey}
//         />
//       )}
//     </div>
//   );
// }



================================================
File: app/settings/webhooks/WebhookForm.tsx
================================================
// import { useState } from 'react';
// import { Plus, X } from 'lucide-react';

// const WebhookForm = ({ onSubmit, onCancel }) => {
//   const [url, setUrl] = useState('');
//   const [events, setEvents] = useState<WebhookEvent[]>([]);

//   const availableEvents: WebhookEvent[] = [
//     'api_key.created',
//     'api_key.deleted',
//     'api_key.expired',
//     'rate_limit.exceeded',
//     'security.suspicious_usage',
//     'security.multiple_failures',
//   ];

//   return (
//     <form onSubmit={(e) => {
//       e.preventDefault();
//       onSubmit({ url, events });
//     }}>
//       <div className="space-y-4">
//         <div>
//           <label className="block text-sm font-medium mb-1">
//             Webhook URL
//           </label>
//           <input
//             type="url"
//             value={url}
//             onChange={(e) => setUrl(e.target.value)}
//             className="w-full border rounded-lg p-2"
//             required
//           />
//         </div>

//         <div>
//           <label className="block text-sm font-medium mb-1">
//             Events
//           </label>
//           <div className="space-y-2">
//             {availableEvents.map((event) => (
//               <label key={event} className="flex items-center">
//                 <input
//                   type="checkbox"
//                   checked={events.includes(event)}
//                   onChange={(e) => {
//                     if (e.target.checked) {
//                       setEvents([...events, event]);
//                     } else {
//                       setEvents(events.filter(e => e !== event));
//                     }
//                   }}
//                   className="mr-2"
//                 />
//                 {event}
//               </label>
//             ))}
//           </div>
//         </div>

//         <div className="flex justify-end space-x-2">
//           <button
//             type="button"
//             onClick={onCancel}
//             className="px-4 py-2 border rounded-lg"
//           >
//             Cancel
//           </button>
//           <button
//             type="submit"
//             className="px-4 py-2 bg-blue-500 text-white rounded-lg"
//           >
//             Create Webhook
//           </button>
//         </div>
//       </div>
//     </form>
//   );
// };


================================================
File: app/settings/webhooks/pageX.tsx
================================================
// 'use client';
// import { useState, useEffect } from 'react';
// import { Plus, Trash2, RefreshCw } from 'lucide-react';

// export default function WebhooksPage() {
//   const [webhooks, setWebhooks] = useState([]);
//   const [showCreateModal, setShowCreateModal] = useState(false);

//   useEffect(() => {
//     fetchWebhooks();
//   }, []);

//   const fetchWebhooks = async () => {
//     const response = await fetch('/api/webhooks');
//     if (response.ok) {
//       const data = await response.json();
//       setWebhooks(data);
//     }
//   };

//   return (
//     <div className="p-6">
//       <div className="flex justify-between items-center mb-6">
//         <h1 className="text-2xl font-bold">Webhooks</h1>
//         <button
//           onClick={() => setShowCreateModal(true)}
//           className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg"
//         >
//           <Plus size={20} />
//           Add Webhook
//         </button>
//       </div>

//       <div className="bg-white rounded-lg shadow">
//         <table className="w-full">
//           <thead>
//             <tr className="border-b">
//               <th className="text-left p-4">URL</th>
//               <th className="text-left p-4">Events</th>
//               <th className="text-left p-4">Status</th>
//               <th className="text-left p-4">Last Success</th>
//               <th className="text-left p-4">Actions</th>
//             </tr>
//           </thead>
//           <tbody>
//             {webhooks.map((webhook) => (
//               <tr key={webhook.id} className="border-b">
//                 <td className="p-4">
//                   <code className="bg-gray-100 px-2 py-1 rounded">
//                     {webhook.url}
//                   </code>
//                 </td>
//                 <td className="p-4">
//                   <div className="flex flex-wrap gap-1">
//                     {webhook.events.map((event) => (
//                       <span
//                         key={event}
//                         className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded"
//                       >
//                         {event}
//                       </span>
//                     ))}
//                   </div>
//                 </td>
//                 <td className="p-4">
//                   <span className={`px-2 py-1 rounded ${
//                     webhook.isEnabled
//                       ? 'bg-green-100 text-green-800'
//                       : 'bg-red-100 text-red-800'
//                   }`}>
//                     {webhook.isEnabled ? 'Active' : 'Inactive'}
//                   </span>
//                 </td>
//                 <td className="p-4">
//                   {webhook.lastSuccess
//                     ? new Date(webhook.lastSuccess).toLocaleString()
//                     : 'Never'}
//                 </td>
//                 <td className="p-4">
//                   <div className="flex items-center gap-2">
//                     <button
//                       onClick={() => deleteWebhook(webhook.id)}
//                       className="text-red-500 hover:text-red-700"
//                     >
//                       <Trash2 size={16} />
//                     </button>
//                     <button
//                       onClick={() => testWebhook(webhook.id)}
//                       className="text-gray-500 hover:text-gray-700"
//                     >
//                       <RefreshCw size={16} />
//                     </button>
//                   </div>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {showCreateModal && (
//         <Modal onClose={() => setShowCreateModal(false)}>
//           <WebhookForm
//             onSubmit={async (data) => {
//               const response = await fetch('/api/webhooks', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(data),
//               });
              
//               if (response.ok) {
//                 fetchWebhooks();
//                 setShowCreateModal(false);
//               }
//             }}
//             onCancel={() => setShowCreateModal(false)}
//           />
//         </Modal>
//       )}
//     </div>
//   );
// }


================================================
File: app/sign-in/[[...sign-in]]/page.tsx
================================================
'use client';
import React, { useState, useEffect } from 'react';
import { SignIn } from '@clerk/nextjs';
import ReactECharts from 'echarts-for-react';

const chartTypes = ['line', 'bar', 'scatter', 'radar', 'circles'];

const QuadrantChart = ({ quadrantId }: { quadrantId: number }) => {
  const [currentType, setCurrentType] = useState(0);
  
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentType((prev) => (prev + 1) % chartTypes.length);
    }, 3000 + (quadrantId * 500)); // Stagger the animations
    
    return () => clearInterval(timer);
  }, [quadrantId]);

  const data = [
    { name: 'Jan', value: 400 },
    { name: 'Feb', value: 300 },
    { name: 'Mar', value: 600 },
    { name: 'Apr', value: 800 },
    { name: 'May', value: 500 },
  ];

  const getOption = () => {
    const baseOption = {
      animation: true,
      animationDuration: 1500,
      tooltip: { show: false },
      grid: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      xAxis: {
        show: false,
        type: 'category',
        data: data.map(item => item.name)
      },
      yAxis: {
        show: false,
        type: 'value'
      }
    };

    const colors = {
      0: '#6366f1', // indigo
      1: '#8b5cf6', // purple
      2: '#ec4899', // pink
      3: '#14b8a6', // teal
    } as Record<number, string>;

    const currentColor = colors[quadrantId];

    switch (chartTypes[currentType]) {
      case 'line':
        return {
          ...baseOption,
          series: [{
            data: data.map(item => item.value),
            type: 'line',
            smooth: true,
            symbol: 'none',
            lineStyle: {
              width: 2,
              opacity: 0.15,
              color: currentColor
            },
            areaStyle: {
              opacity: 0.05,
              color: currentColor
            }
          }]
        };
      
      case 'bar':
        return {
          ...baseOption,
          series: [{
            data: data.map(item => item.value),
            type: 'bar',
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            }
          }]
        };
      
      case 'scatter':
        return {
          ...baseOption,
          series: [{
            type: 'scatter',
            data: data.map(item => item.value),
            symbolSize: 20,
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            }
          }]
        };
      
      case 'radar':
        return {
          ...baseOption,
          radar: {
            indicator: data.map(() => ({
              name: '',
              max: 1000
            })),
            splitLine: {
              lineStyle: {
                opacity: 0.05
              }
            },
            axisLine: {
              lineStyle: {
                opacity: 0.05
              }
            }
          },
          series: [{
            type: 'radar',
            symbol: 'none',
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            },
            areaStyle: {
              opacity: 0.05,
              color: currentColor
            },
            data: [{
              value: data.map(item => item.value),
              name: 'Values'
            }]
          }]
        };
      
      case 'circles':
        return {
          ...baseOption,
          series: [{
            type: 'graph',
            layout: 'force',
            animation: true,
            data: data.map((item) => ({
              x: Math.random() * 300,
              y: Math.random() * 300,
              symbolSize: item.value / 20
            })),
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            },
            force: {
              repulsion: 100,
              edgeLength: 50
            },
            links: []
          }]
        };
        
      default:
        return baseOption;
    }
  };

  return (
    <div className="relative h-full w-full">
      <ReactECharts
        option={getOption()}
        style={{ height: '100%', width: '100%' }}
      />
      <div className="absolute bottom-2 right-2 text-xs text-gray-400 opacity-50">
        {chartTypes[currentType]}
      </div>
    </div>
  );
};

const LoginPage = () => {
  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-gray-50 to-white">
      {/* Quadrant Charts */}
      <div className="p-24 absolute inset-0 grid grid-cols-2 grid-rows-2">
        <div className="border-b border-r border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={0} />
        </div>
        <div className="border-b border-l border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={1} />
        </div>
        <div className="border-t border-r border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={2} />
        </div>
        <div className="border-t border-l border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={3} />
        </div>
      </div>

      {/* Login Container */}
      <div className="relative z-10 min-h-screen flex items-center justify-center">
        <SignIn />
      </div>
    </div>
  );
};

export default LoginPage;


================================================
File: app/sign-up/[[...sign-up]]/page.tsx
================================================
'use client';
import React, { useState, useEffect } from 'react';
import { SignUp } from '@clerk/nextjs';
import ReactECharts from 'echarts-for-react';

const chartTypes = ['line', 'bar', 'scatter', 'radar', 'circles'];

const QuadrantChart = ({ quadrantId }: { quadrantId: number }) => {
  const [currentType, setCurrentType] = useState(0);
  
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentType((prev) => (prev + 1) % chartTypes.length);
    }, 3000 + (quadrantId * 500)); // Stagger the animations
    
    return () => clearInterval(timer);
  }, [quadrantId]);

  const data = [
    { name: 'Jan', value: 400 },
    { name: 'Feb', value: 300 },
    { name: 'Mar', value: 600 },
    { name: 'Apr', value: 800 },
    { name: 'May', value: 500 },
  ];

  const getOption = () => {
    const baseOption = {
      animation: true,
      animationDuration: 1500,
      tooltip: { show: false },
      grid: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      xAxis: {
        show: false,
        type: 'category',
        data: data.map(item => item.name)
      },
      yAxis: {
        show: false,
        type: 'value'
      }
    };

    const colors = {
      0: '#6366f1', // indigo
      1: '#8b5cf6', // purple
      2: '#ec4899', // pink
      3: '#14b8a6', // teal
    } as Record<number, string>;

    const currentColor = colors[quadrantId];

    switch (chartTypes[currentType]) {
      case 'line':
        return {
          ...baseOption,
          series: [{
            data: data.map(item => item.value),
            type: 'line',
            smooth: true,
            symbol: 'none',
            lineStyle: {
              width: 2,
              opacity: 0.15,
              color: currentColor
            },
            areaStyle: {
              opacity: 0.05,
              color: currentColor
            }
          }]
        };
      
      case 'bar':
        return {
          ...baseOption,
          series: [{
            data: data.map(item => item.value),
            type: 'bar',
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            }
          }]
        };
      
      case 'scatter':
        return {
          ...baseOption,
          series: [{
            type: 'scatter',
            data: data.map(item => item.value),
            symbolSize: 20,
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            }
          }]
        };
      
      case 'radar':
        return {
          ...baseOption,
          radar: {
            indicator: data.map(() => ({
              name: '',
              max: 1000
            })),
            splitLine: {
              lineStyle: {
                opacity: 0.05
              }
            },
            axisLine: {
              lineStyle: {
                opacity: 0.05
              }
            }
          },
          series: [{
            type: 'radar',
            symbol: 'none',
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            },
            areaStyle: {
              opacity: 0.05,
              color: currentColor
            },
            data: [{
              value: data.map(item => item.value),
              name: 'Values'
            }]
          }]
        };
      
      case 'circles':
        return {
          ...baseOption,
          series: [{
            type: 'graph',
            layout: 'force',
            animation: true,
            data: data.map((item) => ({
              x: Math.random() * 300,
              y: Math.random() * 300,
              symbolSize: item.value / 20
            })),
            itemStyle: {
              opacity: 0.15,
              color: currentColor
            },
            force: {
              repulsion: 100,
              edgeLength: 50
            },
            links: []
          }]
        };
        
      default:
        return baseOption;
    }
  };

  return (
    <div className="relative h-full w-full">
      <ReactECharts
        option={getOption()}
        style={{ height: '100%', width: '100%' }}
      />
      <div className="absolute bottom-2 right-2 text-xs text-gray-400 opacity-50">
        {chartTypes[currentType]}
      </div>
    </div>
  );
};

const SignUpPage = () => {
  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-gray-50 to-white">
      {/* Quadrant Charts */}
      <div className="p-24 absolute inset-0 grid grid-cols-2 grid-rows-2">
        <div className="border-b border-r border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={0} />
        </div>
        <div className="border-b border-l border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={1} />
        </div>
        <div className="border-t border-r border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={2} />
        </div>
        <div className="border-t border-l border-gray-100 opacity-80 transition-transform duration-1000 ease-in-out">
          <QuadrantChart quadrantId={3} />
        </div>
      </div>

      {/* Signup Container */}
      <div className="relative z-10 min-h-screen flex items-center justify-center">
        <SignUp />
      </div>
    </div>
  );
};

export default SignUpPage;


================================================
File: app/store/connections.ts
================================================
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import { IConnection } from '../lib/drizzle/schemas';

const CACHE_TIME = 5 * 60 * 1000; // 5 minutes

interface ConnectionState {
  connections: IConnection[];
  activeConnectionId: string | null;
  loading: boolean;
  error: string | null;
  lastFetch: number;
  fetchConnections: (userId: string) => Promise<IConnection[]>;
  fetchConnection: (id: string) => Promise<IConnection>;
  addConnection: (connection: Omit<IConnection, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateConnection: (id: string, connection: Partial<IConnection>) => Promise<void>;
  deleteConnection: (id: string) => Promise<void>;
  setActiveConnection: (id: string | null) => void;
  clearError: () => void;
}

export const useConnectionStore = create<ConnectionState>()(
  devtools(
    persist(
      (set, get) => ({
        connections: [],
        activeConnectionId: null,
        loading: false,
        error: null,
        lastFetch: 0,
        fetchConnections: async (userId) => {
          const now = Date.now();
          const store = get();
          
          // Check cache freshness
          if (
            store.connections.length > 0 && 
            now - store.lastFetch < CACHE_TIME
          ) {
            return store.connections;
          } 
          set({ lastFetch: now });

          set({ loading: true, error: null });
          try {
            const response = await fetch('/api/connections?userId=' + userId);
            if (!response.ok) throw new Error('Failed to fetch connections');
            const data = await response.json();
            set({ connections: data, loading: false });
            return data;
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        fetchConnection: async (id) => {
          // firt check if connection is already in store
          const store = get();
          const connection = store.connections.find(c => c.id === id);
          if (connection) {
            return connection;
          }

          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/connections/${id}`);
            if (!response.ok) throw new Error('Failed to fetch connection');
            const data = await response.json();
            set(state => ({
              connections: [
                ...state.connections.filter(c => c.id !== id),
                data
              ],
              loading: false
            }));
            return data;
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        addConnection: async (connection) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch('/api/connections', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(connection)
            });
            if (!response.ok) throw new Error('Failed to add connection');
            const data = await response.json();
            set(state => ({
              connections: [...state.connections, data],
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        updateConnection: async (id, connection) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/connections/${id}`, {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(connection)
            });
            if (!response.ok) throw new Error('Failed to update connection');
            const data = await response.json();
            set(state => ({
              connections: state.connections.map(c =>
                c.id === id ? data : c
              ),
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        deleteConnection: async (id) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/connections/${id}`, {
              method: 'DELETE'
            });
            if (!response.ok) throw new Error('Failed to delete connection');
            set(state => ({
              connections: state.connections.filter(c => c.id !== id),
              activeConnectionId: state.activeConnectionId === id ? null : state.activeConnectionId,
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        setActiveConnection: (id) => set({ activeConnectionId: id }),
        clearError: () => set({ error: null })
      }),
      {
        name: 'connections-storage'
      }
    )
  )
);



================================================
File: app/store/copilotStore.ts
================================================
// store/aiCopilotStore.ts
import { create } from 'zustand';
import { AICopilotStore, ChartAssistantPayload, ChartAssistantResponse } from '@/app/types/copilot';
import { useWidgetStore } from './widgetStore';

export const useAICopilotStore = create<AICopilotStore>((set, get) => ({
  isOpen: false,
  messages: [],
  context: null,
  isLoading: false,
  
  toggleChat: () => set((state) => ({ isOpen: !state.isOpen })),
  
  addMessage: (message) =>
    set((state) => ({ messages: [...state.messages, message] })),
  
  setContext: (context) => set({ context }),
  
  clearAll: () => set({ context: null, messages: [], isLoading: false }),
  
  setLoading: (loading) => set({ isLoading: loading }),
  
  invokeCopilot: async () => {
    const { context } = get();
    if (!context?.dataset) throw new Error('No dataset provided');
    if(context?.type == 'widget') {
      if (!context.widget) throw new Error('No widget provided');
    };

    // set loading
    set({ isLoading: true });

    const messages = get().messages;
    const payload: ChartAssistantPayload = {
      pageId: context.pageId,
      userId: context.userId,
      mode: context.type == 'widget' ? 'edit' : 'create',
      prompt: messages[messages.length - 1].content,
      dataset: context.dataset,
      widget: context.widget,
    }

    const response = await fetch('/api/copilot/generator', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!response.ok) throw new Error('Failed to generate charts');
    const results: ChartAssistantResponse = await response.json();

    // update widget store with these widgets
    results.widgets.forEach((widget) => {
      if(context.type == 'widget') {
        useWidgetStore.getState().updatedWidget(widget);
      } else {
        useWidgetStore.getState().createdWidget(widget);
      }
    });

    set((state) => ({ isLoading: false, messages: [...state.messages, {
      role: 'assistant',
      content: `${results.message}${results.suggestions ? `\nSuggestions: \n${results.suggestions}` : ''}`,
    }] }))
  },
}));


================================================
File: app/store/datasets.ts
================================================
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import { IDataset } from '../lib/drizzle/schemas';

const CACHE_TIME = 5 * 60 * 1000; // 5 minutes

interface DatasetState {
  datasets: IDataset[];
  activeDatasetId: string | null;
  loading: Record<string, boolean>;
  error: Record<string, string | null>;
  lastFetch: number;
  fetchDatasets: (userId: string) => Promise<IDataset[]>;
  fetchDataset: (id: string) => Promise<IDataset>;
  fetchDatasetData: (id: string) => Promise<void>;
  addDataset: (dataset: Omit<IDataset, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateDataset: (id: string, dataset: Partial<IDataset>) => Promise<void>;
  deleteDataset: (id: string) => Promise<void>;
  setActiveDataset: (id: string | null) => void;
  clearError: (key: string) => void;
}

export const useDatasetStore = create<DatasetState>()(
  devtools(
    persist(
      (set, get) => ({
        datasets: [],
        activeDatasetId: null,
        loading: {},
        error: {},
        lastFetch: 0,
        fetchDatasets: async (userId: string) => {
          const now = Date.now();
          const store = get();
          
          // Check cache freshness
          if (
            store.datasets.length > 0 && 
            now - store.lastFetch < CACHE_TIME
          ) {
            return store.datasets;
          } 
          set({ lastFetch: now });

          set(state => ({
            loading: { ...state.loading, [userId]: true },
            error: { ...state.error, [userId]: null }
          }));

          try {
            const response = await fetch(`/api/datasets?userId=${userId}`);
            if (!response.ok) throw new Error('Failed to fetch datasets');
            const data = await response.json();
            
            set(state => ({
              datasets: [...data],
              loading: { ...state.loading, [userId]: false }
            }));
            return data;
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [userId]: false },
              error: { 
                ...state.error, 
                [userId]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        fetchDataset: async (id) => {
          // check if dataset is already in store
          const store = get();
          const dataset = store.datasets.find(ds => ds.id === id);
          if (dataset) return dataset;

          set(state => ({
            loading: { ...state.loading, [id]: true },
            error: { ...state.error, [id]: null }
          }));

          try {
            const response = await fetch(`/api/datasets/${id}`);
            if (!response.ok) throw new Error('Failed to fetch dataset');
            const data = await response.json();
            
            set(state => ({
              datasets: [
                ...state.datasets.filter(ds => ds.id !== id),
                data
              ],
              loading: { ...state.loading, [id]: false }
            }));
            return data;
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [id]: false },
              error: { 
                ...state.error, 
                [id]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        fetchDatasetData: async (id) => {
          const key = `data-${id}`;
          set(state => ({
            loading: { ...state.loading, [key]: true },
            error: { ...state.error, [key]: null }
          }));

          try {
            const response = await fetch(`/api/datasets/${id}/data`);
            if (!response.ok) throw new Error('Failed to fetch dataset data');
            const data = await response.json();
            
            set(state => ({
              datasets: state.datasets.map(ds =>
                ds.id === id ? { ...ds, data } : ds
              ),
              loading: { ...state.loading, [key]: false }
            }));
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [key]: false },
              error: { 
                ...state.error, 
                [key]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        addDataset: async (dataset) => {
          const key = 'add';
          set(state => ({
            loading: { ...state.loading, [key]: true },
            error: { ...state.error, [key]: null }
          }));

          try {
            const response = await fetch('/api/datasets', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(dataset)
            });
            
            if (!response.ok) throw new Error('Failed to add dataset');
            const data = await response.json();
            
            set(state => ({
              datasets: [...state.datasets, data],
              loading: { ...state.loading, [key]: false }
            }));
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [key]: false },
              error: { 
                ...state.error, 
                [key]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        updateDataset: async (id, dataset) => {
          set(state => ({
            loading: { ...state.loading, [id]: true },
            error: { ...state.error, [id]: null }
          }));

          try {
            const response = await fetch(`/api/datasets/${id}`, {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(dataset)
            });
            
            if (!response.ok) throw new Error('Failed to update dataset');
            const data = await response.json();
            
            set(state => ({
              datasets: state.datasets.map(ds =>
                ds.id === id ? data : ds
              ),
              loading: { ...state.loading, [id]: false }
            }));
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [id]: false },
              error: { 
                ...state.error, 
                [id]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        deleteDataset: async (id) => {
          set(state => ({
            loading: { ...state.loading, [id]: true },
            error: { ...state.error, [id]: null }
          }));

          try {
            const response = await fetch(`/api/datasets/${id}`, {
              method: 'DELETE'
            });
            
            if (!response.ok) throw new Error('Failed to delete dataset');
            
            set(state => ({
              datasets: state.datasets.filter(ds => ds.id !== id),
              activeDatasetId: state.activeDatasetId === id ? null : state.activeDatasetId,
              loading: { ...state.loading, [id]: false }
            }));
          } catch (error) {
            set(state => ({
              loading: { ...state.loading, [id]: false },
              error: { 
                ...state.error, 
                [id]: error instanceof Error ? error.message : 'Unknown error'
              }
            }));
          }
        },

        setActiveDataset: (id) => set({ activeDatasetId: id }),
        clearError: (key) => set(state => ({
          error: { ...state.error, [key]: null }
        }))
      }),
      {
        name: 'datasets-storage'
      }
    )
  )
);



================================================
File: app/store/organizationStore.ts
================================================
// interface Organization {
//     id: string;
//     name: string;
//     metadata?: Record<string, any>;
//   }
  
//   interface OrganizationMember {
//     user_id: string;
//     organization_id: string;
//     role: 'admin' | 'editor' | 'viewer';
//   }
  
//   interface OrganizationState {
//     organizations: Organization[];
//     currentOrganization: Organization | null;
//     members: OrganizationMember[];
//     loading: Record<string, boolean>;
//     error: Record<string, string | null>;
    
//     fetchOrganizations: () => Promise<void>;
//     fetchOrganization: (id: string) => Promise<void>;
//     createOrganization: (data: Omit<Organization, 'id'>) => Promise<void>;
//     updateOrganization: (id: string, data: Partial<Organization>) => Promise<void>;
//     deleteOrganization: (id: string) => Promise<void>;
//     setCurrentOrganization: (id: string) => Promise<void>;
    
//     fetchMembers: (organizationId: string) => Promise<void>;
//     addMember: (organizationId: string, email: string, role: 'admin' | 'editor' | 'viewer') => Promise<void>;
//     updateMemberRole: (organizationId: string, userId: string, role: 'admin' | 'editor' | 'viewer') => Promise<void>;
//     removeMember: (organizationId: string, userId: string) => Promise<void>;
    
//     clearError: (key: string) => void;
//   }
  
//   export const useOrganizationStore = create<OrganizationState>()(
//     devtools((set, get) => ({
//       organizations: [],
//       currentOrganization: null,
//       members: [],
//       loading: {},
//       error: {},
  
//       fetchOrganizations: async () => {
//         set(state => ({ loading: { ...state.loading, list: true } }));
//         try {
//           const response = await fetch('/api/organizations');
//           if (!response.ok) throw new Error('Failed to fetch organizations');
//           const data = await response.json();
//           set({ 
//             organizations: data,
//             loading: { ...get().loading, list: false }
//           });
//         } catch (error) {
//           set(state => ({ 
//             error: { 
//               ...state.error,
//               list: error instanceof Error ? error.message : 'Unknown error'
//             },
//             loading: { ...state.loading, list: false }
//           }));
//         }
//       },
  
//       fetchOrganization: async (id) => {
//         set(state => ({ loading: { ...state.loading, [id]: true } }));
//         try {
//           const response = await fetch(`/api/organizations/${id}`);
//           if (!response.ok) throw new Error('Failed to fetch organization');
//           const data = await response.json();
//           set(state => ({
//             organizations: [
//               ...state.organizations.filter(org => org.id !== id),
//               data
//             ],
//             loading: { ...state.loading, [id]: false }
//           }));
//         } catch (error) {
//           set(state => ({
//             error: { 
//               ...state.error,
//               [id]: error instanceof Error ? error.message : 'Unknown error'
//             },
//             loading: { ...state.loading, [id]: false }
//           }));
//         }
//       },
  
//       createOrganization: async (data) => {
//         set(state => ({ loading: { ...state.loading, create: true } }));
//         try {
//           const response = await fetch('/api/organizations', {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify(data),
//           });
//           if (!response.ok) throw new Error('Failed to create organization');
//           const newOrg = await response.json();
//           set(state => ({
//             organizations: [...state.organizations, newOrg],
//             loading: { ...state.loading, create: false }
//           }));
//         } catch (error) {
//           set(state => ({
//             error: { 
//               ...state.error,
//               create: error instanceof Error ? error.message : 'Unknown error'
//             },
//             loading: { ...state.loading, create: false }
//           }));
//         }
//       },
  
//       setCurrentOrganization: async (id) => {
//         const org = get().organizations.find(o => o.id === id);
//         if (org) {
//           set({ currentOrganization: org });
//           // Optionally persist the selection
//           localStorage.setItem('currentOrganizationId', id);
//         }
//       },
  
//       fetchMembers: async (organizationId) => {
//         set(state => ({ loading: { ...state.loading, members: true } }));
//         try {
//           const response = await fetch(`/api/organizations/${organizationId}/members`);
//           if (!response.ok) throw new Error('Failed to fetch members');
//           const data = await response.json();
//           set({ 
//             members: data,
//             loading: { ...get().loading, members: false }
//           });
//         } catch (error) {
//           set(state => ({
//             error: { 
//               ...state.error,
//               members: error instanceof Error ? error.message : 'Unknown error'
//             },
//             loading: { ...state.loading, members: false }
//           }));
//         }
//       },
  
//       addMember: async (organizationId, email, role) => {
//         set(state => ({ loading: { ...state.loading, addMember: true } }));
//         try {
//           const response = await fetch(`/api/organizations/${organizationId}/members`, {
//             method: 'POST',
//             headers: { 'Content-Type': 'application/json' },
//             body: JSON.stringify({ email, role }),
//           });
//           if (!response.ok) throw new Error('Failed to add member');
//           const newMember = await response.json();
//           set(state => ({
//             members: [...state.members, newMember],
//             loading: { ...state.loading, addMember: false }
//           }));
//         } catch (error) {
//           set(state => ({
//             error: { 
//               ...state.error,
//               addMember: error instanceof Error ? error.message : 'Unknown error'
//             },
//             loading: { ...state.loading, addMember: false }
//           }));
//         }
//       },
  
//       clearError: (key) => set(state => ({
//         error: { ...state.error, [key]: null }
//       }))
//     }))
//   );


================================================
File: app/store/pageStore.ts
================================================
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import type {} from '@redux-devtools/extension' // required for devtools typing
import { IPage } from '../lib/drizzle/schemas';

const CACHE_TIME = 5 * 60 * 1000; // 5 minutes

interface PageState {
  pages: IPage[];
  bottomPages: IPage[];
  setActive: (pages: IPage, subpage?: IPage, bottom?: boolean) => void;
  addPage: (pages : IPage) => void;
  fetchPages: (userId: string) => Promise<IPage[]>;
  addSubPage: (pages: IPage, subpage : IPage) => void;
  seedDashboard: (userId: string) => void;
  activateDashboard: () => void;
  lastFetch: number;
}


export const usePageStore = create<PageState>()(
  devtools(
    persist(
      (set, get) => ({
        pages: [],
        bottomPages: [
          { 
              icon: 'Database', 
              label: 'Datasets', 
              route: '/dashboard/datasets',
              active: false,
              userId: ''
          },
          { 
              icon: 'PlugZap', 
              label: 'Connections', 
              route: '/dashboard/connections',
              active: false,
              userId: ''
          },
          // { 
          //     icon: 'SettingsIcon', 
          //     route: '/dashboard/settings',
          //     label: 'Settings', 
          //     active: false,
          //     userId: ''
          // }
        ],
        lastFetch: 0,
        setActive: (page, sub) => {
          set((state) => ({ 
            pages: state.pages.map(menu => {
              if(menu.label == page.label) {
                  if(menu.subpages) {
                      menu.subpages = [
                        ...menu.subpages?.map(sm => {
                          if(sm.label == sub?.label){
                            sm.active = true;
                          } else {
                            sm.active = false;
                          }
                          return sm;
                        })
                      ]
                  } else {
                      menu.active = true;
                  }
              } else {
                menu.active = false
                if(menu.subpages){
                  menu.subpages = [
                    ...menu.subpages?.map(sm => ({...sm, active: false}))
                  ]
                }
              }
              return menu;
            }),
            bottomPages: state.bottomPages.map(menu => {
              if(menu.label == page.label) {
                  menu.active = true;
              } else {
                  menu.active = false;
              }
              return menu;
            }) 
          }))
        },
        fetchPages: async (userId?: string) => {
          const now = Date.now();
          const store = get();
          
          // Check cache freshness
          if (
            store.pages.length > 1 && 
            now - store.lastFetch < CACHE_TIME
          ) {
            return store.pages;
          } 
          set({ lastFetch: now });

          try {
            const response = await fetch(`/api/pages?userId=${userId}`);
            if (!response.ok) throw new Error('Failed to fetch pages');
            const data = await response.json();
            set({
              pages: data
                .map((page: IPage) => ({...page, active: false}))
                .sort((a: IPage, b: IPage) => {
                  // Put Dashboard first
                  if (a.label === 'Dashboard') return -1;
                  if (b.label === 'Dashboard') return 1;
                  // For all other pages, maintain original order
                  return 0;
                }),
            });
            return data as IPage[];
          } catch (error) {
            console.error(error)
          }
          return [];
        },
        addPage: async (page) => {
          try {
            const response = await fetch('/api/pages', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(page)
            });
            
            if (!response.ok) throw new Error('Failed to add page');
            const data = await response.json();
            set((state) => ({ pages: [...state.pages, data] }))
          } catch (error) {
            console.error(error)
          }
        },
        addSubPage: (page, sub) => {
            set((state) => ({ pages: state.pages.map(menu => {
                if(menu.label == page.label) {
                    if(menu.subpages) {
                        menu.subpages = [...menu.subpages, sub]
                    } else {
                        menu.subpages = [sub]
                    }
                }
                return menu;
            }) 
          }))
        },
        seedDashboard: async (userId: string) => {
          const seeds = [
            { 
              icon: 'LayoutDashboard', 
              label: 'Dashboard',
              active: true,
              userId
            }
          ]
          try {
            await Promise.all(seeds.map(async seed => {
              const response = await fetch('/api/pages', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(seed)
              });
              if (!response.ok) throw new Error('Failed to add page');
              const data = await response.json();
              set((state) => ({ pages: [data, ...state.pages] }))
            }))
          } catch (error) {
            console.log(error)
          }
        },
        activateDashboard: () => {
          // set dashboard as active
          set((state) => ({ 
            pages: state.pages.map(menu => {
              if(menu.label == 'Dashboard') {
                menu.active = true;
              } else {
                menu.active = false;
              }
              return menu;
            }),
            bottomPages: state.bottomPages.map(menu => {
              menu.active = false
              return menu;
            }) 
          }))
        }
      }),
      {
        name: 'page-storage',
      },
    ),
  ),
)


================================================
File: app/store/widgetStore.ts
================================================
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import type {} from '@redux-devtools/extension';
import { IWidget } from '../lib/drizzle/schemas';
import { newWidgetPosition } from '../lib/utils';

const CACHE_TIME = 5 * 60 * 1000; // 5 minutes

interface WidgetState {
  widgets: IWidget[];
  loading: boolean;
  error: string | null;
  lastFetch: number;
  fetchWidgets: (pageId: string) => Promise<void>;
  fetchWidget: (id: string) => Promise<IWidget>;
  addWidget: (widget: Omit<IWidget, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;
  updateWidget: (id: string, updates: Partial<IWidget>) => Promise<void>;
  createdWidget: (widget: IWidget) => Promise<void>;
  updatedWidget: (widget: IWidget) => Promise<void>;
  deleteWidget: (id: string) => Promise<void>;
  clearError: () => void;
}

export const useWidgetStore = create<WidgetState>()(
  devtools(
    persist(
      (set, get) => ({
        widgets: [],
        loading: false,
        error: null,
        lastFetch: 0,

        fetchWidgets: async (pageId: string) => {
          const now = Date.now();
          const store = get();
          
          // Check cache freshness
          if (store.widgets.length > 0 && now - store.lastFetch < CACHE_TIME) {
            return;
          }
          set({ lastFetch: now });

          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/widgets?pageId=${pageId}`);
            if (!response.ok) throw new Error('Failed to fetch widgets');
            const data = await response.json();
            set({ widgets: data, loading: false });
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
          }
        },

        fetchWidget: async (id: string) => {
          // First check if widget is already in store
          const store = get();
          const widget = store.widgets.find(w => w.id === id);
          if (widget) {
            return widget;
          }

          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/widgets/${id}`);
            if (!response.ok) throw new Error('Failed to fetch widget');
            const data = await response.json();
            set(state => ({
              widgets: [...state.widgets.filter(w => w.id !== id), data],
              loading: false
            }));
            return data;
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
            throw error;
          }
        },

        addWidget: async (widget) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch('/api/widgets', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                ...widget,
                layout: newWidgetPosition(get().widgets, widget.type)
              })
            });
            if (!response.ok) throw new Error('Failed to add widget');
            const data = await response.json();
            set(state => ({
              widgets: [...state.widgets, data],
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
            throw error;
          }
        },

        createdWidget: async (widget: IWidget) => {
          set(state => ({
            widgets: [...state.widgets, widget],
          }));
        },

        updateWidget: async (id: string, updates: Partial<IWidget>) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/widgets/${id}`, {
              method: 'PATCH',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(updates)
            });
            if (!response.ok) throw new Error('Failed to update widget');
            const data = await response.json();
            set(state => ({
              widgets: state.widgets.map(w => w.id === id ? data : w),
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
            throw error;
          }
        },

        updatedWidget: async (widget: IWidget) => {
          set(state => ({
            widgets: state.widgets.map(w => w.id === widget.id ? widget : w),
            loading: false
          }));
        },

        deleteWidget: async (id: string) => {
          set({ loading: true, error: null });
          try {
            const response = await fetch(`/api/widgets/${id}`, {
              method: 'DELETE'
            });
            if (!response.ok) throw new Error('Failed to delete widget');
            set(state => ({
              widgets: state.widgets.filter(w => w.id !== id),
              loading: false
            }));
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Unknown error',
              loading: false 
            });
            throw error;
          }
        },

        clearError: () => set({ error: null })
      }),
      {
        name: 'widget-storage'
      }
    )
  )
);


================================================
File: app/types/adapter.ts
================================================
export interface DataAdapter {
    initialize(): Promise<void>;
    fetchData(query?: string): Promise<any[]>;
    cleanup(): Promise<void>;
    subscribe?(callback: (data: any[]) => void): void;
    unsubscribe?(): void;
}


================================================
File: app/types/apiKey.ts
================================================
export interface ApiKey {
    id: string;
    key: string;
    name: string;
    userId: string;
    permissions: string[];
    createdAt: Date;
    lastUsed: Date;
    expiresAt?: Date;
    rateLimit: {
      requests: number;
      duration: number; // in seconds
    };
  }
  


================================================
File: app/types/copilot.ts
================================================
import { IDataset, IWidget } from "../lib/drizzle/schemas";
import { TransformConf } from "./data";

export interface Message {
  role: 'user' | 'assistant';
  content: string;
}

export interface ChartContext {
    type: 'widget' | 'new';
    widget?: IWidget;
    dataset?: any;
    currentConfig?: TransformConf;
    userId: string;
    pageId: string;
  }
  
  export interface AICopilotStore {
    isOpen: boolean;
    messages: Message[];
    context: ChartContext | null;
    isLoading: boolean;
    toggleChat: () => void;
    addMessage: (message: Message) => void;
    setContext: (context: ChartContext) => void;
    clearAll: () => void;
    setLoading: (loading: boolean) => void;
    invokeCopilot: () => Promise<void>;
  }


  export interface ChartAssistantPayload {
    mode: 'create' | 'edit';
    prompt: string;
    dataset: IDataset;
    widget?: IWidget;
    pageId?: string, 
    userId: string
  }
  
  export interface ChartAssistantResponse {
    message: string;
    widgets: IWidget[];
    suggestions?: string;
  }
  
  export interface ColumnAnalysis {
    name: string;
    type: 'number' | 'string' | 'date' | 'boolean';
    uniqueValues: number;
    hasNulls: boolean;
    sample: any[];
  }
  
  export interface DatasetAnalysis {
    rowCount: number;
    columns: ColumnAnalysis[];
    correlations?: Record<string, Record<string, number>>; // For numeric columns
    recommendations: string[];
  }


  


================================================
File: app/types/data.ts
================================================
import { IChart } from "../lib/drizzle/schemas";

export interface DataPoint {
    [key: string]: string | number;
}

export type AggregationMethod = 'sum' | 'avg' | 'max' | 'min' | 'count' | 'median' | 'distinct';

export type SortingOrder = 'asc' | 'desc' | 'none';

export interface Aggregation {
  enabled: boolean;
  method?: AggregationMethod;
  groupBy?: string[];
  excludeNull?: boolean;  // Whether to exclude null values
  customAggregation?: (values: any[]) => number;  // Custom aggregation function
}

export interface Sorting {
  enabled: boolean;
  key: string;
  order: SortingOrder;
  preserveOrder?: boolean;  // Maintain original order for tied values
  customSort?: (a: any, b: any) => number;  // Custom sorting function
}

export type NumberFormatStyle = 
  | 'decimal'      // Plain number formatting: "1,234.56"
  | 'currency'     // Currency formatting: "$1,234.56"
  | 'percent'      // Percentage formatting: "12.34%"
  | 'unit'         // Unit formatting: "123 km/h"

export interface NumberFormatOptions {
  style?: NumberFormatStyle;
  currency?: string;         // Required when style is 'currency': 'USD', 'EUR', etc.
  currencyDisplay?: 'symbol' | 'narrowSymbol' | 'code' | 'name'; // "$" vs "US dollars"
  currencySign?: 'standard' | 'accounting';  // Accounting shows negative numbers in parentheses
  unit?: string;            // Required when style is 'unit': 'kilometer-per-hour'
  unitDisplay?: 'short' | 'long' | 'narrow';  // How to display the unit
  locale?: string;
  minimumFractionDigits?: number;
  maximumFractionDigits?: number;
  prefix?: string;
  suffix?: string;
}

export interface Formatting {
  enabled: boolean;
  numberFormat?: NumberFormatOptions;
  dateFormat?: string;  // For date formatting
  conditionalFormatting?: {
      condition: (value: any) => boolean;
      style: object;
  }[];
}

export type FiltersOps = 
    'equals' | 
    'notEquals' |
    'contains' | 
    'notContains' |
    'startsWith' |
    'endsWith' |
    'gt' | 
    'gte' |
    'lt' | 
    'lte' |
    'between' |
    'in' |
    'notIn' |
    'isNull' |
    'isNotNull' |
    'regex';

export interface Filters {
    column: string;
    operator: FiltersOps;
    value: any;
    caseSensitive?: boolean;
    // Added fields for more control
    enabled?: boolean;
    treatAsNumber?: boolean;
    treatAsDate?: boolean;
    customFormatter?: (value: any) => any;
    nullValue?: any;
    // Range filter options
    inclusiveRange?: boolean;
    // Regex options
    regexFlags?: string;
}

export interface FilterGroup {
    filters: Filters[];
    operator: 'AND' | 'OR';
}

export interface IDualSeries {
  type: string;
  yField: string;
  colorField?: string;
  style?: object;
  axis?: object;
}

interface IStack {
  groupBy: string[];
  series: boolean;
}

export interface AntChartOptions {
  xField?: string;
  yField?: string;
  angleField?: string;
  seriesField?: string;
  shapeField?: string;
  colorField?: string;
  stack?: IStack | boolean,
  group?: boolean,
  children?: IDualSeries[],
}

// Notes on fields required for each chart type:

//           axis charts
// bar       : xField, yField, colorField, stack (if stacked), normalize for 100% bar
// column    : xField, yField, colorField, stack, normalize for 100% column, group
// line      : xField, yField, colorField
// area      : xField, yField, colorField, shapeField, stack, normalise
// dual-axes : xField, children [{ yField, colorField }]

// pie       : angleField, colorField, radius 

export interface AntAsthetics {
  colorField: string,
  label: {
    text: string,
    position: 'outside' | 'inside' | 'top' | 'bottom',
    style: {
      fontWeight: 'bold',
    },
  },
  style: {
    lineWidth: number,
  },
  normalize: boolean,
  sort: {
    reverse: boolean,
    by: string,
  },
  percent: boolean,
  radius: number,
  innerRadius: number,
}

export interface TransformConfig {
    options?: AntChartOptions;
    aggregation?: Aggregation;
    sorting?: Sorting;
    formatting?: Formatting;
    filters?: Filters[];
}

export interface TransformConf extends TransformConfig {
  type: IChart
}


================================================
File: app/types/datasource.ts
================================================
export interface ColumnInfo {
    column: string;
    type: string;
}

export interface TableInfo {
    [tableName: string]: ColumnInfo[];
}

export interface SchemaInfo {
    [schemaName: string]: TableInfo;
}

export type SQLDriver = 
  | 'postgresql'
  | 'mysql'
  | 'mssql'
  | 'sqlite'
  | 'oracle'
  | 'snowflake'
  | 'redshift';

// Define SQL-based connection configuration
export interface SQLConnectionConfig {
  host?: string; // Hostname or IP address (optional for SQLite)
  port?: number; // Default: 5432 for PostgreSQL, 1433 for MSSQL, etc.
  user?: string; // Username for authentication
  password?: string; // Password for authentication
  database?: string; // Database name
  driver?: SQLDriver; // Specify the database type (e.g., 'postgresql', 'mysql', etc.)
  serviceName?: string; // For Oracle: service name (optional)
  sid?: string; // For Oracle: SID (optional)
  ssl?: boolean; // Use SSL/TLS (optional)
  filePath?: string; // For SQLite: path to the .db file
  timeout?: number; // Connection timeout in seconds (optional)
  options?: Record<string, unknown>; // Driver-specific options (e.g., encrypt, trustServerCertificate)
  warehouse?: string; // For Snowflake: warehouse name (optional)
  role?: string; // For Snowflake: role name (optional)
  account?: string; // For Snowflake: account identifier (optional)
  schema?: SchemaInfo; // Optional: schema information for the connection
}

// Define general connection types
export type ConnectionConfig = 
  | SQLConnectionConfig // For SQL-based connections
  | { filePath: string }; // For CSV-based connections (e.g., file path to CSV)

  // Add a classification for connection types
export type ConnectionType = 'csv' | 'sql' | 'nosql' | 'rest';

interface ConnectionBase {
  id?: string;
  userId: string;
  name: string;
  type: ConnectionType;
  createdAt?: string;
  updatedAt?: string;
}

export interface SQLConnection extends ConnectionBase {
  config: SQLConnectionConfig;
}

export type Connection = SQLConnection ;

// Define dataset types (table-based or query-based)
export type DatasetType = 
  | 'table'
  | 'query';

// Main dataset interface, supporting multiple connection types
export interface Dataset {
  id: string;
  name: string;
  type: DatasetType; // Specifies if it's a table or a query
  connectionId?: string; // Connection details
  connection?: Connection; // Connection details
  userId: string; // Connection details
  schema?: string; // Schema name (optional, for SQL-based connections)
  table?: string; // Table name (if the dataset is table-based)
  columns?: ColumnInfo[]; // Column information (if the dataset is table-based)
  query?: string; // Query (if the dataset is query-based)
  refreshInterval?: number; // Interval for refreshing data in seconds (optional)
}



================================================
File: app/types/webhook.ts
================================================
export interface Webhook {
    id: string;
    userId: string;
    url: string;
    secret: string;
    events: WebhookEvent[];
    createdAt: Date;
    isEnabled: boolean;
    lastSuccess?: Date;
    lastFailure?: Date;
    failureCount: number;
  }
  
export type WebhookEvent = 
    | 'api_key.created'
    | 'api_key.deleted'
    | 'api_key.expired'
    | 'rate_limit.exceeded'
    | 'security.suspicious_usage'
    | 'security.multiple_failures';



================================================
File: app/ui/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
File: app/ui/components/ErrorBoundary.tsx
================================================
export const ErrorBoundary: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    try {
      return <>{children}</>;
    } catch (error) {
      console.error(error);
      return <div>Something went wrong.</div>;
    }
  };


================================================
File: app/ui/components/alert-dialog.tsx
================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/app/lib/utils"
import { buttonVariants } from "@/app/ui/components/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
File: app/ui/components/alert.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/app/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================
File: app/ui/components/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/app/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
File: app/ui/components/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/app/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
File: app/ui/components/card.tsx
================================================
import * as React from "react"

import { cn } from "@/app/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================
File: app/ui/components/checkbox.tsx
================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/app/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================
File: app/ui/components/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/app/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
File: app/ui/components/form.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/app/lib/utils"
import { Label } from "@/app/ui/components/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================
File: app/ui/components/hover-card.tsx
================================================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/app/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================
File: app/ui/components/input.tsx
================================================
import * as React from "react"

import { cn } from "@/app/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================
File: app/ui/components/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/app/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
File: app/ui/components/radio-group.tsx
================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/app/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================
File: app/ui/components/scroll-area.tsx
================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/app/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================
File: app/ui/components/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/app/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
File: app/ui/components/separator.tsx
================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/app/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



================================================
File: app/ui/components/sheet.tsx
================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/app/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================
File: app/ui/components/switch.tsx
================================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/app/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================
File: app/ui/components/table.tsx
================================================
import * as React from "react"

import { cn } from "@/app/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
File: app/ui/components/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/app/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
File: app/ui/components/icons/Icon.tsx
================================================
import * as LucideIcons from 'lucide-react';

/**
 * Renders an icon from the LucideIcons library by name.
 *
 * @param iconName - The name of the icon to render.
 * @param klass - Additional CSS class names for styling the icon.
 * @param size - The size of the icon (default: 20).
 * @returns The rendered icon component or null if not found.
 */
export const renderIcon = (iconName: string, klass: string = '', size: number = 20) => {
  const Icon = LucideIcons[iconName as keyof typeof LucideIcons] as React.FC<{ size?: number; className?: string }>;
  if (!Icon) {
    console.warn(`Icon "${iconName}" not found in LucideIcons.`);
    return null;
  }
  return <Icon size={size} className={klass} />;
};



================================================
File: app/ui/components/icons/IconSelector.tsx
================================================
import React, { useState, useMemo } from 'react';
import { Command } from 'cmdk';
import { X } from 'lucide-react';
import { useDebounce } from '@/app/lib/hooks/useDebounce';
import { renderIcon } from '@/app/ui/components/icons/Icon';

interface IconSelectorProps {
  selectedIcon: string;
  onSelectIcon: (iconName: string) => void;
}

export const IconSelector: React.FC<IconSelectorProps> = ({ selectedIcon, onSelectIcon }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');

  // Get all icon names from lucide-react

    // Get common icons for better performance
  

  const iconList = useMemo(() => {
    // return Object.keys(LucideIcons).filter(key => key !== 'createLucideIcon').sort();
    const COMMON_ICONS = [
      'Home', 'User', 'Settings', 'File', 'Folder', 'Calendar',
      'Mail', 'Bell', 'Search', 'Database', 'Users',
      'Activity', 'AlertCircle', 'ArrowRight', 'Check', 'Clock',
      'Cloud', 'Code', 'Copy', 'Edit', 'Eye', 'Filter', 'Globe',
      'Heart', 'Image', 'Link', 'List', 'Lock', 'Map', 'Menu',
      'Monitor', 'Moon', 'Phone',
      'Pin', 'Plus', 'Power', 'Save', 'Share', 'Star',
      'Sun', 'Trash', 'Unlock', 'Upload', 'Video', 'Wallet', 'Zap'
    ];
    return COMMON_ICONS.filter(key => key !== 'createLucideIcon').sort();
  }, []);

  // Filter icons based on search
  const debouncedSearch = useDebounce(search, 300);
  const filteredIcons = useMemo(() => {
    const xx = iconList.filter(icon =>
      icon.toLowerCase().includes(debouncedSearch.toLowerCase())
    );
    return xx;
  }, [iconList, debouncedSearch]);

  return (
    <div className="relative">
      <button
        onClick={(e) => {
          e.preventDefault();
          setIsOpen(true)}
        }
        className="flex items-center gap-2 p-2 border rounded-lg hover:bg-gray-50"
      >
        {selectedIcon ? (
          <>
            {renderIcon(selectedIcon)}
            <span>{selectedIcon}</span>
          </>
        ) : (
          'Select Icon...'
        )}
      </button>

      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
          <div className="bg-white rounded-xl p-4 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Select Icon</h3>
              <button
                aria-label="Close icon selector"
                onClick={() => setIsOpen(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <X size={20} />
              </button>
            </div>

            <Command className="w-full">
              <Command.Input 
                placeholder="Search icons..."
                value={search}
                onValueChange={setSearch}
                className="w-full p-2 border rounded-lg mb-4"
              />

              <Command.List className="max-h-96 overflow-auto">
                <div className="grid grid-cols-4 gap-2">
                  {filteredIcons.map(iconName => (
                    <Command.Item
                      key={iconName}
                      value={iconName}
                      onSelect={() => {
                        onSelectIcon(iconName);
                        setIsOpen(false);
                      }}
                      className={`flex flex-col items-center gap-1 p-3 rounded-lg cursor-pointer hover:bg-gray-100 ${
                        selectedIcon === iconName ? 'bg-blue-50 text-blue-600' : ''
                      }`}
                    >
                      {renderIcon(iconName)}
                      <span className="text-xs truncate w-full text-center">
                        {iconName}
                      </span>
                    </Command.Item>
                  ))}
                </div>
              </Command.List>
            </Command>
          </div>
        </div>
      )}
    </div>
  );
};

export default IconSelector;


================================================
File: app/ui/fonts/GeistMonoVF.woff
================================================
[Non-text file]


================================================
File: app/ui/fonts/GeistVF.woff
================================================
[Non-text file]


================================================
File: drizzle/0000_broad_morlocks.sql
================================================
CREATE TABLE IF NOT EXISTS "connections" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL,
	"type" varchar(10) NOT NULL,
	"config" jsonb,
	"user_id" varchar NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "connections_name_unique" UNIQUE("name")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "datasets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL,
	"type" varchar(50) NOT NULL,
	"connection_id" varchar NOT NULL,
	"user_id" varchar NOT NULL,
	"schema" varchar(100),
	"table" varchar(100),
	"columns" jsonb,
	"query" varchar,
	"refresh_interval" integer,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "datasets_name_unique" UNIQUE("name")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "pages" (
	"id" varchar PRIMARY KEY NOT NULL,
	"label" varchar(255) NOT NULL,
	"route" varchar(255),
	"icon" varchar(100),
	"active" boolean DEFAULT false,
	"parent_id" varchar,
	"user_id" varchar NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "pages_label_unique" UNIQUE("label")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "widgets" (
	"id" varchar PRIMARY KEY NOT NULL,
	"type" varchar(50) NOT NULL,
	"title" varchar(255) NOT NULL,
	"subtitle" varchar(255),
	"layout" jsonb NOT NULL,
	"dataset_id" varchar NOT NULL,
	"transform_config" jsonb NOT NULL,
	"page_id" varchar NOT NULL,
	"user_id" varchar NOT NULL,
	"query" text,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL,
	CONSTRAINT "widgets_title_unique" UNIQUE("title")
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "datasets" ADD CONSTRAINT "datasets_connection_id_connections_id_fk" FOREIGN KEY ("connection_id") REFERENCES "public"."connections"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "pages" ADD CONSTRAINT "subpage_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."pages"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "widgets" ADD CONSTRAINT "widgets_dataset_id_datasets_id_fk" FOREIGN KEY ("dataset_id") REFERENCES "public"."datasets"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;



================================================
File: drizzle/meta/0000_snapshot.json
================================================
{
  "id": "2a4504ce-3f4d-48f7-8034-e9a846046609",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.connections": {
      "name": "connections",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": true
        },
        "config": {
          "name": "config",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "connections_name_unique": {
          "name": "connections_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.datasets": {
      "name": "datasets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "connection_id": {
          "name": "connection_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "schema": {
          "name": "schema",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "table": {
          "name": "table",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "columns": {
          "name": "columns",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "query": {
          "name": "query",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "refresh_interval": {
          "name": "refresh_interval",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "datasets_connection_id_connections_id_fk": {
          "name": "datasets_connection_id_connections_id_fk",
          "tableFrom": "datasets",
          "tableTo": "connections",
          "columnsFrom": [
            "connection_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "datasets_name_unique": {
          "name": "datasets_name_unique",
          "nullsNotDistinct": false,
          "columns": [
            "name"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.pages": {
      "name": "pages",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "label": {
          "name": "label",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "route": {
          "name": "route",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "icon": {
          "name": "icon",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "parent_id": {
          "name": "parent_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "subpage_parent_id_fkey": {
          "name": "subpage_parent_id_fkey",
          "tableFrom": "pages",
          "tableTo": "pages",
          "columnsFrom": [
            "parent_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "pages_label_unique": {
          "name": "pages_label_unique",
          "nullsNotDistinct": false,
          "columns": [
            "label"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.widgets": {
      "name": "widgets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "title": {
          "name": "title",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "subtitle": {
          "name": "subtitle",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "layout": {
          "name": "layout",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "dataset_id": {
          "name": "dataset_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "transform_config": {
          "name": "transform_config",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "page_id": {
          "name": "page_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "query": {
          "name": "query",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "widgets_dataset_id_datasets_id_fk": {
          "name": "widgets_dataset_id_datasets_id_fk",
          "tableFrom": "widgets",
          "tableTo": "datasets",
          "columnsFrom": [
            "dataset_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "widgets_title_unique": {
          "name": "widgets_title_unique",
          "nullsNotDistinct": false,
          "columns": [
            "title"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}


================================================
File: drizzle/meta/_journal.json
================================================
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1737199039151,
      "tag": "0000_broad_morlocks",
      "breakpoints": true
    }
  ]
}


================================================
File: packages/beakdash-sdk/package.json
================================================
{
    "name": "dashboard-widget-sdk",
    "version": "1.0.0",
    "main": "dist/dashboard-widget.min.js",
    "types": "dist/types/DashboardWidgetSDK.d.ts",
    "files": [
      "dist"
    ]
  }


================================================
File: packages/beakdash-sdk/webpack.config.js
================================================
const path = require('path');

module.exports = {
  entry: './src/lib/DashboardWidgetSDK.ts',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'dashboard-widget.min.js',
    library: 'DashboardWidget',
    libraryTarget: 'umd',
    globalObject: 'this'
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: 'ts-loader',
        exclude: /node_modules/
      }
    ]
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js']
  }
};



================================================
File: packages/beakdash-sdk/src/examples/raw.html
================================================
<!DOCTYPE html>
<html>
<head>
  <title>Dashboard Widget Example</title>
  <script src="https://cdn.example.com/dashboard-widget.min.js"></script>
</head>
<body>
  <div id="widget-container"></div>
  <script>
    // Initialize the SDK
    const dashboard = DashboardWidget.initialize('https://api.yourdashboard.com');

    // Load a widget
    dashboard.loadWidget({
      containerId: 'widget-container',
      apiKey: 'your-api-key',
      widgetId: 'widget-123',
      theme: 'light',
      refreshInterval: 30000,
      onLoad: () => console.log('Widget loaded'),
      onError: (error) => console.error('Widget error:', error)
    });
  </script>
</body>
</html>


================================================
File: packages/beakdash-sdk/src/examples/react.tsx
================================================
// import { useEffect } from 'react';
// import { DashboardWidgetSDK } from 'dashboard-widget-sdk';

// function DashboardWidget({ widgetId, theme }) {
//   useEffect(() => {
//     const dashboard = DashboardWidgetSDK.initialize('https://api.yourdashboard.com');
//     const containerId = `widget-${widgetId}`;

//     dashboard.loadWidget({
//       containerId,
//       apiKey: process.env.DASHBOARD_API_KEY,
//       widgetId,
//       theme,
//       refreshInterval: 30000,
//     });

//     return () => {
//       dashboard.destroy(widgetId);
//     };
//   }, [widgetId, theme]);

//   return <div id={`widget-${widgetId}`} />;
// }



================================================
File: packages/beakdash-sdk/src/examples/vue.vue
================================================
<template>
  <div :id="containerId"></div>
</template>

<script>
import { DashboardWidgetSDK } from 'dashboard-widget-sdk';

export default {
  name: 'DashboardWidget',
  props: {
    widgetId: String,
    theme: String
  },
  computed: {
    containerId() {
      return `widget-${this.widgetId}`;
    }
  },
  mounted() {
    const dashboard = DashboardWidgetSDK.initialize('https://api.yourdashboard.com');
    dashboard.loadWidget({
      containerId: this.containerId,
      apiKey: process.env.VUE_APP_DASHBOARD_API_KEY,
      widgetId: this.widgetId,
      theme: this.theme,
    });
  },
  beforeDestroy() {
    DashboardWidgetSDK.destroy(this.widgetId);
  }
};
</script>


================================================
File: packages/beakdash-sdk/src/lib/sdk/DashboardWidgetSDK.ts
================================================
// src/lib/DashboardWidgetSDK.ts
export interface WidgetConfig {
    containerId: string;
    apiKey: string;
    widgetId: string;
    theme?: 'light' | 'dark';
    refreshInterval?: number;
    onLoad?: () => void;
    onError?: (error: Error) => void;
  }
  
  export class DashboardWidgetSDK {
    private static instance: DashboardWidgetSDK;
    private serverUrl: string;
    private widgets: Map<string, any> = new Map();
  
    private constructor(serverUrl: string) {
      this.serverUrl = serverUrl;
    }
  
    static initialize(serverUrl: string): DashboardWidgetSDK {
      if (!DashboardWidgetSDK.instance) {
        DashboardWidgetSDK.instance = new DashboardWidgetSDK(serverUrl);
      }
      return DashboardWidgetSDK.instance;
    }
  
    async loadWidget(config: WidgetConfig): Promise<void> {
      try {
        // Validate container exists
        const container = document.getElementById(config.containerId);
        if (!container) {
          throw new Error(`Container with id "${config.containerId}" not found`);
        }
  
        // Load widget data
        const widget = await this.fetchWidget(config.widgetId, config.apiKey);
        
        // Create shadow DOM for isolation
        const shadow = container.attachShadow({ mode: 'open' });
        
        // Add styles
        const styles = document.createElement('style');
        styles.textContent = this.getStyles(config.theme);
        shadow.appendChild(styles);
  
        // Create widget container
        const widgetElement = this.createWidgetElement(widget);
        shadow.appendChild(widgetElement);
  
        // Store widget reference
        this.widgets.set(config.widgetId, {
          element: widgetElement,
          config,
          interval: null
        });
  
        // Setup refresh interval if specified
        if (config.refreshInterval) {
          const interval = setInterval(() => {
            this.refreshWidget(config.widgetId);
          }, config.refreshInterval);
          this.widgets.get(config.widgetId).interval = interval;
        }
  
        config.onLoad?.();
      } catch (error) {
        config.onError?.(error instanceof Error ? error : new Error(error?.toString()));
        throw error;
      }
    }
  
    async refreshWidget(widgetId: string): Promise<void> {
      const widget = this.widgets.get(widgetId);
      if (!widget) return;
  
      try {
        const updatedData = await this.fetchWidget(widgetId, widget.config.apiKey);
        this.updateWidgetData(widget.element, updatedData);
      } catch (error) {
        widget.config.onError?.(error);
      }
    }
  
    private async fetchWidget(widgetId: string, apiKey: string): Promise<any> {
      const response = await fetch(`${this.serverUrl}/api/widgets/${widgetId}`, {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });
  
      if (!response.ok) {
        throw new Error(`Failed to load widget: ${response.statusText}`);
      }
  
      return response.json();
    }
  
    private createWidgetElement(widget: any): HTMLElement {
      console.log('widget', widget);
      const element = document.createElement('div');
      element.className = 'dashboard-widget';
      // Add widget content based on type
      // This is where you'd render charts, tables, etc.
      return element;
    }
  
    private updateWidgetData(element: HTMLElement, data: any): void {
      console.log('data', data);
      console.log('element', element);
      // Update widget content with new data
    }
  
    private getStyles(theme: 'light' | 'dark' = 'light'): string {
      return `
        .dashboard-widget {
          font-family: system-ui, -apple-system, sans-serif;
          background: ${theme === 'light' ? '#ffffff' : '#1a1a1a'};
          color: ${theme === 'light' ? '#000000' : '#ffffff'};
          border-radius: 8px;
          padding: 16px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12);
        }
      `;
    }
  
    destroy(widgetId: string): void {
      const widget = this.widgets.get(widgetId);
      if (widget) {
        if (widget.interval) {
          clearInterval(widget.interval);
        }
        widget.element.remove();
        this.widgets.delete(widgetId);
      }
    }
  
    destroyAll(): void {
      this.widgets.forEach((widget, id) => {
        this.destroy(id);
      });
    }
  }


